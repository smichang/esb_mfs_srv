// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package esb_mfs_srv.esb_file_srv_0_2;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringUtils;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.bcutils;
import routines.Mathematical;
import routines.md5hash;
import routines.DateUtils;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
import java.util.ArrayList;

//the import part of tLibraryLoad_1
import com.google.gson.Gson;

//the import part of tJavaFlex_1
import java.util.concurrent.ThreadLocalRandom;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaFlex_2
import java.util.concurrent.ThreadLocalRandom;

//the import part of tJavaFlex_3
import java.util.concurrent.ThreadLocalRandom;

//the import part of tJavaFlex_4
import java.util.concurrent.ThreadLocalRandom;

//the import part of tJavaRow_2
import java.io.FileOutputStream;
import java.io.File;

//the import part of tJavaFlex_5
import java.util.concurrent.ThreadLocalRandom;

@SuppressWarnings("unused")
/**
 * Job: esb_file_srv Purpose: <br>
 * Description: 0.1 initial version
 0.2 add binary to url service and using azp as authorized field instead of aud <br>
 * @author user@talend.com
 * @version 6.3.1.20161216_1026
 * @status 
 */
public class esb_file_srv implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (mq_host != null) {

				this.setProperty("mq_host", mq_host.toString());

			}

			if (mq_host_c1 != null) {

				this.setProperty("mq_host_c1", mq_host_c1.toString());

			}

			if (mq_host_c2 != null) {

				this.setProperty("mq_host_c2", mq_host_c2.toString());

			}

			if (mq_host_c3 != null) {

				this.setProperty("mq_host_c3", mq_host_c3.toString());

			}

			if (mq_password != null) {

				this.setProperty("mq_password", mq_password.toString());

			}

			if (mq_port != null) {

				this.setProperty("mq_port", mq_port.toString());

			}

			if (mq_port_c1 != null) {

				this.setProperty("mq_port_c1", mq_port_c1.toString());

			}

			if (mq_port_c2 != null) {

				this.setProperty("mq_port_c2", mq_port_c2.toString());

			}

			if (mq_port_c3 != null) {

				this.setProperty("mq_port_c3", mq_port_c3.toString());

			}

			if (mq_queuename != null) {

				this.setProperty("mq_queuename", mq_queuename.toString());

			}

			if (mq_username != null) {

				this.setProperty("mq_username", mq_username.toString());

			}

			if (mq_virtualhost != null) {

				this.setProperty("mq_virtualhost", mq_virtualhost.toString());

			}

			if (retrySAPConn != null) {

				this.setProperty("retrySAPConn", retrySAPConn.toString());

			}

			if (APPNAME_PREFIX != null) {

				this.setProperty("APPNAME_PREFIX", APPNAME_PREFIX.toString());

			}

			if (DRIVER_CLASS != null) {

				this.setProperty("DRIVER_CLASS", DRIVER_CLASS.toString());

			}

			if (JDBC_JAR != null) {

				this.setProperty("JDBC_JAR", JDBC_JAR.toString());

			}

			if (JDBC_URL != null) {

				this.setProperty("JDBC_URL", JDBC_URL.toString());

			}

			if (LOG_TABLE != null) {

				this.setProperty("LOG_TABLE", LOG_TABLE.toString());

			}

			if (MAX_CONNECTION != null) {

				this.setProperty("MAX_CONNECTION", MAX_CONNECTION.toString());

			}

			if (MID_NO != null) {

				this.setProperty("MID_NO", MID_NO.toString());

			}

			if (PASSWORD != null) {

				this.setProperty("PASSWORD", PASSWORD.toString());

			}

			if (RANDOM_CONN != null) {

				this.setProperty("RANDOM_CONN", RANDOM_CONN.toString());

			}

			if (USERNAME != null) {

				this.setProperty("USERNAME", USERNAME.toString());

			}

			if (mount_folder != null) {

				this.setProperty("mount_folder", mount_folder.toString());

			}

			if (debugging != null) {

				this.setProperty("debugging", debugging.toString());

			}

			if (mapping_table_name != null) {

				this.setProperty("mapping_table_name",
						mapping_table_name.toString());

			}

		}

		public String mq_host;

		public String getMq_host() {
			return this.mq_host;
		}

		public String mq_host_c1;

		public String getMq_host_c1() {
			return this.mq_host_c1;
		}

		public String mq_host_c2;

		public String getMq_host_c2() {
			return this.mq_host_c2;
		}

		public String mq_host_c3;

		public String getMq_host_c3() {
			return this.mq_host_c3;
		}

		public String mq_password;

		public String getMq_password() {
			return this.mq_password;
		}

		public String mq_port;

		public String getMq_port() {
			return this.mq_port;
		}

		public String mq_port_c1;

		public String getMq_port_c1() {
			return this.mq_port_c1;
		}

		public String mq_port_c2;

		public String getMq_port_c2() {
			return this.mq_port_c2;
		}

		public String mq_port_c3;

		public String getMq_port_c3() {
			return this.mq_port_c3;
		}

		public String mq_queuename;

		public String getMq_queuename() {
			return this.mq_queuename;
		}

		public String mq_username;

		public String getMq_username() {
			return this.mq_username;
		}

		public String mq_virtualhost;

		public String getMq_virtualhost() {
			return this.mq_virtualhost;
		}

		public Integer retrySAPConn;

		public Integer getRetrySAPConn() {
			return this.retrySAPConn;
		}

		public String APPNAME_PREFIX;

		public String getAPPNAME_PREFIX() {
			return this.APPNAME_PREFIX;
		}

		public String DRIVER_CLASS;

		public String getDRIVER_CLASS() {
			return this.DRIVER_CLASS;
		}

		public String JDBC_JAR;

		public String getJDBC_JAR() {
			return this.JDBC_JAR;
		}

		public String JDBC_URL;

		public String getJDBC_URL() {
			return this.JDBC_URL;
		}

		public String LOG_TABLE;

		public String getLOG_TABLE() {
			return this.LOG_TABLE;
		}

		public Integer MAX_CONNECTION;

		public Integer getMAX_CONNECTION() {
			return this.MAX_CONNECTION;
		}

		public String MID_NO;

		public String getMID_NO() {
			return this.MID_NO;
		}

		public String PASSWORD;

		public String getPASSWORD() {
			return this.PASSWORD;
		}

		public Integer RANDOM_CONN;

		public Integer getRANDOM_CONN() {
			return this.RANDOM_CONN;
		}

		public String USERNAME;

		public String getUSERNAME() {
			return this.USERNAME;
		}

		public String mount_folder;

		public String getMount_folder() {
			return this.mount_folder;
		}

		public Boolean debugging;

		public Boolean getDebugging() {
			return this.debugging;
		}

		public String mapping_table_name;

		public String getMapping_table_name() {
			return this.mapping_table_name;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.2";
	private final String jobName = "esb_file_srv";
	private final String projectName = "ESB_MFS_SRV";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					esb_file_srv.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(esb_file_srv.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_9_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_10_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void pccRbtMQOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_14_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_13_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCConnection_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputRaw_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_13_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_12_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_11_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_10_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_9_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCConnection_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_20_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_27_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_27_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_27_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_27_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_23_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_27_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_10_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_9_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_12_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_11_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_11_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_12_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_13_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCConnection_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_14_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_16_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_15_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_17_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_19_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_16_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_18_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_20_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_17_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_15_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_14_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_21_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_16_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_17_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_19_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_19_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_19_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_19_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_19_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_18_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCConnection_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_15_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJDBCInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_21_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tFixedFlowInput_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tFixedFlowInput_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_22_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_22_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_23_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_22_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_19_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_22_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_23_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_23_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_24_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_23_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_20_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_23_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_24_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tFixedFlowInput_24_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJDBCOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tFixedFlowInput_24_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_26_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_26_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_26_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_26_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_22_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_26_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_25_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_25_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_25_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_25_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_21_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_25_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_20_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_22_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_18_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTRequest_1_Loop_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tRESTRequest_1_In_error(exception, errorComponent, globalMap);

	}

	public void tRESTRequest_1_In_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_2_TXMLMAP_OUT_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tXMLMap_2_TXMLMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tXMLMap_2_TXMLMAP_IN_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaFlex_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			errorCode = null;
			tFixedFlowInput_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void tFixedFlowInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_14_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaFlex_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputRaw_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_13_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_11_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaFlex_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			errorCode = null;
			tFixedFlowInput_7Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void tFixedFlowInput_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_27_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_10_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_12_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaFlex_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_16_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_17_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_18_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_15_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_19_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaFlex_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJDBCInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_21_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			errorCode = null;
			tFixedFlowInput_22Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void tFixedFlowInput_22_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_23_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_24_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			errorCode = null;
			tFixedFlowInput_25Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void tFixedFlowInput_26_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_25_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_20_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRESTRequest_1_Loop_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	private boolean runInTalendEsbRuntimeContainer = false;

	public void setRunInTalendEsbRuntimeContainer(boolean flag) {
		runInTalendEsbRuntimeContainer = flag;
	}

	private boolean restTalendJobAlreadyStarted = false;

	/**
	 * REST provider implementation
	 */
	@javax.ws.rs.Path("/")
	public static class RestServiceProviderImpl4TalendJob {

		@javax.ws.rs.core.Context
		private org.apache.cxf.jaxrs.ext.MessageContext messageContext;

		private final esb_file_srv job;

		public RestServiceProviderImpl4TalendJob(esb_file_srv job) {
			this.job = job;
		}

		private void populateRequestWithJobContext(
				java.util.Map<String, Object> requestGlobalMap, esb_file_srv job) {
			// pass job DataSources
			java.util.Map<String, routines.system.TalendDataSource> talendDataSources = (java.util.Map<String, routines.system.TalendDataSource>) job.globalMap
					.get(KEY_DB_DATASOURCES);
			if (null != talendDataSources) {
				java.util.Map<String, routines.system.TalendDataSource> restDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
				for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry : talendDataSources
						.entrySet()) {
					restDataSources.put(talendDataSourceEntry.getKey(),
							new routines.system.TalendDataSource(
									talendDataSourceEntry.getValue()
											.getRawDataSource()));
				}
				requestGlobalMap.put(KEY_DB_DATASOURCES, restDataSources);
			}

			// pass job shared connections
			requestGlobalMap.putAll(job.getSharedConnections4REST());

			// pass job concurrent map
			requestGlobalMap.put("concurrentHashMap",
					job.globalMap.get("concurrentHashMap"));
		}

		private void closePassedDataSourceConnections(
				java.util.Map<String, Object> requestGlobalMap) {
			// close connections in passed job DataSources
			try {
				java.util.Map<String, routines.system.TalendDataSource> restDataSources = (java.util.Map<String, routines.system.TalendDataSource>) requestGlobalMap
						.get(KEY_DB_DATASOURCES);
				if (null != restDataSources) {
					for (routines.system.TalendDataSource restDataSource : restDataSources
							.values()) {
						restDataSource.close();
					}
				}
			} catch (Throwable e) {
				e.printStackTrace(System.err);
			}
		}

		private javax.ws.rs.core.Response processRequest(
				java.util.Map<String, Object> request) {
			final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
			try {
				globalMap.put("restRequest", request);

				populateRequestWithJobContext(globalMap, job);

				job.tRESTRequest_1_LoopProcess(globalMap);

				java.util.Map<String, Object> response = (java.util.Map<String, Object>) globalMap
						.get("restResponse");

				Object responseBody = null;
				Integer status = null;
				java.util.Map<String, String> headers = null;
				if (null != response) {
					Object dropJsonRootProp = response
							.get("drop.json.root.element");
					Boolean dropJsonRoot = (null == dropJsonRootProp) ? false
							: (Boolean) dropJsonRootProp;
					messageContext.put("drop.json.root.element",
							dropJsonRoot.toString());

					responseBody = response.get("BODY");
					status = (Integer) response.get("STATUS");
					headers = (java.util.Map<String, String>) response
							.get("HEADERS");
				}
				if (null == status) {
					status = (request.containsKey("STATUS")) ? (Integer) request
							.get("STATUS") : 404;
				}

				javax.ws.rs.core.Response.ResponseBuilder responseBuilder = javax.ws.rs.core.Response
						.status(status).entity(responseBody);
				if (headers != null) {
					for (java.util.Map.Entry<String, String> header : headers
							.entrySet()) {
						responseBuilder.header(header.getKey(),
								header.getValue());
					}
				}

				return responseBuilder.build();

			} catch (Throwable ex) {
				ex.printStackTrace();
				throw new javax.ws.rs.WebApplicationException(ex, 500);
			} finally {
				// close DB connections
				closePassedDataSourceConnections(globalMap);
			}
		}

		private javax.ws.rs.core.Response processStreamingResponseRequest(
				final java.util.Map<String, Object> request) {

			javax.ws.rs.core.StreamingOutput streamingOutput = new javax.ws.rs.core.StreamingOutput() {
				public void write(java.io.OutputStream output) {
					final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
					try {
						globalMap.put("restResponseStream", output);

						globalMap.put("restRequest", request);

						populateRequestWithJobContext(globalMap, job);

						job.tRESTRequest_1_LoopProcess(globalMap);

						if (globalMap
								.containsKey("restResponseWrappingClosure")) {
							output.write(((String) globalMap
									.get("restResponseWrappingClosure"))
									.getBytes());
						}
					} catch (Throwable ex) {
						ex.printStackTrace();
						throw new javax.ws.rs.WebApplicationException(ex, 500);
					} finally {
						// close DB connections
						closePassedDataSourceConnections(globalMap);
					}
				}
			};

			return javax.ws.rs.core.Response.ok().entity(streamingOutput)
					.build();
		}

		@javax.ws.rs.PUT()
		@javax.ws.rs.Path("/")
		@javax.ws.rs.Consumes({ "multipart/form-data", "multipart/mixed",
				"multipart/related" })
		@javax.ws.rs.Produces({ "application/xml", "text/xml",
				"application/json" })
		public javax.ws.rs.core.Response binary(

				@javax.ws.rs.HeaderParam("Authorization") String Authorization,
				@org.apache.cxf.jaxrs.ext.multipart.Multipart("userfile") byte[] userfile,
				@org.apache.cxf.jaxrs.ext.multipart.Multipart("grant_system") String grant_system

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "PUT");
			request_tRESTRequest_1.put("OPERATION", "binary");
			request_tRESTRequest_1.put("PATTERN", "/");

			populateRequestInfo(request_tRESTRequest_1, messageContext);

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			parameters_tRESTRequest_1.put("HEADER:Authorization:id_String",
					Authorization);

			parameters_tRESTRequest_1.put("MULTIPART:userfile:id_byte[]",
					userfile);

			parameters_tRESTRequest_1.put("MULTIPART:grant_system:id_String",
					grant_system);

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			java.util.List<String> partNames_tRESTRequest_1 = new java.util.ArrayList<String>();
			partNames_tRESTRequest_1.add("userfile");
			partNames_tRESTRequest_1.add("grant_system");
			populateMultipartRequestInfo(request_tRESTRequest_1,
					messageContext, partNames_tRESTRequest_1);

			return processRequest(request_tRESTRequest_1);
		}

		@javax.ws.rs.HEAD()
		@javax.ws.rs.Path("/{file_id}")
		public javax.ws.rs.core.Response header(

		@javax.ws.rs.HeaderParam("Authorization") String Authorization,
				@javax.ws.rs.PathParam("file_id") String file_id

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "HEAD");
			request_tRESTRequest_1.put("OPERATION", "header");
			request_tRESTRequest_1.put("PATTERN", "/{file_id}");

			populateRequestInfo(request_tRESTRequest_1, messageContext);

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			parameters_tRESTRequest_1.put("HEADER:Authorization:id_String",
					Authorization);

			parameters_tRESTRequest_1.put("PATH:file_id:id_String", file_id);

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			return processRequest(request_tRESTRequest_1);
		}

		@javax.ws.rs.DELETE()
		@javax.ws.rs.Path("/{file_id}")
		@javax.ws.rs.Produces({ "application/xml", "text/xml",
				"application/json" })
		public javax.ws.rs.core.Response expring(

		@javax.ws.rs.HeaderParam("Authorization") String Authorization,
				@javax.ws.rs.PathParam("file_id") String file_id

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "DELETE");
			request_tRESTRequest_1.put("OPERATION", "expring");
			request_tRESTRequest_1.put("PATTERN", "/{file_id}");

			populateRequestInfo(request_tRESTRequest_1, messageContext);

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			parameters_tRESTRequest_1.put("HEADER:Authorization:id_String",
					Authorization);

			parameters_tRESTRequest_1.put("PATH:file_id:id_String", file_id);

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			return processRequest(request_tRESTRequest_1);
		}

		@javax.ws.rs.GET()
		@javax.ws.rs.Path("/{file_id}")
		@javax.ws.rs.Produces({ "application/xml", "text/xml",
				"application/json" })
		public javax.ws.rs.core.Response retrieve(

		@javax.ws.rs.HeaderParam("Authorization") String Authorization,
				@javax.ws.rs.PathParam("file_id") String file_id

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "GET");
			request_tRESTRequest_1.put("OPERATION", "retrieve");
			request_tRESTRequest_1.put("PATTERN", "/{file_id}");

			populateRequestInfo(request_tRESTRequest_1, messageContext);

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			parameters_tRESTRequest_1.put("HEADER:Authorization:id_String",
					Authorization);

			parameters_tRESTRequest_1.put("PATH:file_id:id_String", file_id);

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			return processRequest(request_tRESTRequest_1);
		}

		@javax.ws.rs.POST()
		@javax.ws.rs.Path("/")
		@javax.ws.rs.Consumes({ "application/xml", "text/xml",
				"application/json" })
		@javax.ws.rs.Produces({ "application/xml", "text/xml",
				"application/json" })
		public javax.ws.rs.core.Response upload(

		@javax.ws.rs.HeaderParam("Authorization") String Authorization

		, org.dom4j.Document body

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "POST");
			request_tRESTRequest_1.put("OPERATION", "upload");
			request_tRESTRequest_1.put("PATTERN", "/");

			request_tRESTRequest_1.put("BODY", body);

			populateRequestInfo(request_tRESTRequest_1, messageContext);

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			parameters_tRESTRequest_1.put("HEADER:Authorization:id_String",
					Authorization);

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			return processRequest(request_tRESTRequest_1);
		}

		public javax.ws.rs.core.Response handleWrongRequest(
				org.apache.cxf.jaxrs.ext.MessageContext context, int status,
				String error) {

			// System.out.println("wrong call [uri: " +
			// context.getUriInfo().getPath() + " ; method: " +
			// context.getRequest().getMethod() + " ; status: " + status +
			// " ; error: " + error + "]");

			java.util.Map<String, Object> wrongRequest = new java.util.HashMap<String, Object>();
			wrongRequest.put("ERROR", error);
			wrongRequest.put("STATUS", status);
			wrongRequest.put("VERB", context.getRequest().getMethod());
			wrongRequest.put("URI", context.getUriInfo().getPath());
			wrongRequest.put("URI_BASE", context.getUriInfo().getBaseUri()
					.toString());
			wrongRequest.put("URI_ABSOLUTE", context.getUriInfo()
					.getAbsolutePath().toString());
			wrongRequest.put("URI_REQUEST", context.getUriInfo()
					.getRequestUri().toString());

			return processRequest(wrongRequest);
		}

		private void populateRequestInfo(java.util.Map<String, Object> request,
				org.apache.cxf.jaxrs.ext.MessageContext context) {
			final javax.ws.rs.core.UriInfo ui = context.getUriInfo();

			request.put("URI", ui.getPath());
			request.put("URI_BASE", ui.getBaseUri().toString());
			request.put("URI_ABSOLUTE", ui.getAbsolutePath().toString());
			request.put("URI_REQUEST", ui.getRequestUri().toString());

			request.put("ALL_HEADER_PARAMS", context.getHttpHeaders()
					.getRequestHeaders());
			request.put("ALL_QUERY_PARAMS", ui.getQueryParameters());

			javax.ws.rs.core.SecurityContext securityContext = context
					.getSecurityContext();
			if (null != securityContext
					&& null != securityContext.getUserPrincipal()) {
				request.put("PRINCIPAL_NAME", securityContext
						.getUserPrincipal().getName());
			}

			request.put("CorrelationID", context.get("CorrelationID"));

			request.put("MESSAGE_CONTEXT", context);
		}

		private void populateMultipartRequestInfo(
				java.util.Map<String, Object> request,
				org.apache.cxf.jaxrs.ext.MessageContext context,
				java.util.List<String> partNames) {
			java.util.Map<String, String> attachmentFilenames = new java.util.HashMap<String, String>();

			java.util.Map<String, java.util.Map<String, java.util.List<String>>> attachmentHeaders = new java.util.HashMap<String, java.util.Map<String, java.util.List<String>>>();

			for (String partName : partNames) {
				org.apache.cxf.jaxrs.ext.multipart.Attachment attachment = getFirstMatchingPart(
						context, partName);
				if (null != attachment) {
					attachmentHeaders.put(partName, attachment.getHeaders());
					if (null != attachment.getContentDisposition()) {
						String filename = attachment.getContentDisposition()
								.getParameter("filename");
						if (null != filename) {
							attachmentFilenames.put(partName, filename);
						}
					}
				}
			}

			request.put("ATTACHMENT_HEADERS", attachmentHeaders);
			request.put("ATTACHMENT_FILENAMES", attachmentFilenames);
		}

		private static org.apache.cxf.jaxrs.ext.multipart.Attachment getFirstMatchingPart(
				org.apache.cxf.jaxrs.ext.MessageContext context, String partName) {
			List<org.apache.cxf.jaxrs.ext.multipart.Attachment> attachments = org.apache.cxf.jaxrs.utils.multipart.AttachmentUtils
					.getAttachments(context);
			for (org.apache.cxf.jaxrs.ext.multipart.Attachment attachment : attachments) {
				if (partName.equals(attachment.getContentId())) {
					return attachment;
				}
				org.apache.cxf.jaxrs.ext.multipart.ContentDisposition cd = attachment
						.getContentDisposition();
				if (null != cd && partName.equals(cd.getParameter("name"))) {
					return attachment;
				}
			}
			// unexpected
			throw new javax.ws.rs.InternalServerErrorException();
		}
	}

	public static class ExceptionMapper4TalendJobRestService extends
			org.apache.cxf.jaxrs.impl.WebApplicationExceptionMapper {

		@javax.ws.rs.core.Context
		private org.apache.cxf.jaxrs.ext.MessageContext messageContext;

		private RestServiceProviderImpl4TalendJob provider;

		public ExceptionMapper4TalendJobRestService(
				RestServiceProviderImpl4TalendJob provider) {
			this.provider = provider;
		}

		public javax.ws.rs.core.Response toResponse(
				javax.ws.rs.WebApplicationException ex) {
			String error = null;
			javax.ws.rs.core.Response response = ex.getResponse();
			if (null != response && null != response.getEntity()) {
				error = response.getEntity().toString();
			}
			response = super.toResponse(ex);
			if (null == error) {
				if (null != response && null != response.getEntity()) {
					error = response.getEntity().toString();
				} else {
					error = null == ex.getCause() ? ex.getMessage() : ex
							.getCause().getMessage();
				}
			}
			response = provider.handleWrongRequest(messageContext,
					response.getStatus(), error);

			java.util.List<javax.ws.rs.core.MediaType> accepts = messageContext
					.getHttpHeaders().getAcceptableMediaTypes();
			javax.ws.rs.core.MediaType responseType = accepts.isEmpty() ? null
					: accepts.get(0);

			if (responseType == null
					|| !responseType.getSubtype().equals("xml")
					&& !responseType.getSubtype().equals("json")) {
				responseType = javax.ws.rs.core.MediaType.APPLICATION_XML_TYPE;
			}

			javax.ws.rs.core.Response r = javax.ws.rs.core.Response
					.status(response.getStatus()).entity(response.getEntity())
					.type(responseType).build();

			if (response.getHeaders() != null) {
				r.getHeaders().putAll(response.getHeaders());
			}

			return r;
		}
	}

	private String checkEndpointUrl(String url) {
		final String defaultEndpointUrl = "http://127.0.0.1:8090/";

		String endpointUrl = url;
		if (null == endpointUrl || endpointUrl.trim().isEmpty()) {
			endpointUrl = defaultEndpointUrl;
		} else if (!endpointUrl.contains("://")) { // relative
			if (endpointUrl.startsWith("/")) {
				endpointUrl = endpointUrl.substring(1);
			}
			endpointUrl = defaultEndpointUrl + endpointUrl;
		}

		// test for busy
		java.net.URI endpointURI = java.net.URI.create(endpointUrl);
		String host = endpointURI.getHost();
		try {
			if (java.net.InetAddress.getByName(host).isLoopbackAddress()) {
				int port = endpointURI.getPort();
				java.net.ServerSocket ss = null;
				try {
					ss = new java.net.ServerSocket(port);
				} catch (IOException e) {
					// rethrow exception
					throw new IllegalArgumentException(
							"Cannot start provider with uri: " + endpointUrl
									+ ". Port " + port + " already in use.");
				} finally {
					if (ss != null) {
						try {
							ss.close();
						} catch (IOException e) {
							// ignore
						}
					}
				}
				try {
					// ok, let's doublecheck for silent listeners
					java.net.Socket cs = new java.net.Socket(host, port);
					// if succeed - somebody silently listening, fail!
					cs.close();
					// rethrow exception
					throw new IllegalArgumentException(
							"Cannot start provider with uri: " + endpointUrl
									+ ". Port " + port + " already in use.");
				} catch (IOException e) {
					// ok, nobody listens, proceed
				}
			}
		} catch (java.net.UnknownHostException e) {
			// ignore
		}

		return endpointUrl;
	}

	public static class StreamingDOM4JProvider extends
			org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider {

		public static final String SUPRESS_XML_DECLARATION = "supress.xml.declaration";

		public void writeTo(org.dom4j.Document doc, Class<?> cls,
				java.lang.reflect.Type type,
				java.lang.annotation.Annotation[] anns,
				javax.ws.rs.core.MediaType mt,
				javax.ws.rs.core.MultivaluedMap<String, Object> headers,
				java.io.OutputStream os) throws java.io.IOException,
				javax.ws.rs.WebApplicationException {
			if (mt.getSubtype().contains("xml")) {
				org.dom4j.io.XMLWriter writer;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage()
						.getExchange().containsKey(SUPRESS_XML_DECLARATION)) {
					org.dom4j.io.OutputFormat format = new org.dom4j.io.OutputFormat();
					format.setSuppressDeclaration(true);
					writer = new org.dom4j.io.XMLWriter(os, format);
				} else {
					writer = new org.dom4j.io.XMLWriter(os);
				}
				writer.write(doc);
				writer.flush();
			} else {
				super.writeTo(doc, cls, type, anns, mt, headers, os);
			}
		}
	}

	Thread4RestServiceProviderEndpoint thread4RestServiceProviderEndpoint = null;

	class Thread4RestServiceProviderEndpoint extends Thread {

		private final String endpointUrl;

		private final esb_file_srv job;

		private org.apache.cxf.endpoint.Server server;

		public Thread4RestServiceProviderEndpoint(esb_file_srv job,
				String endpointUrl) {
			this.job = job;
			this.endpointUrl = endpointUrl;
		}

		public void run() {
			try {
				RestServiceProviderImpl4TalendJob provider = new RestServiceProviderImpl4TalendJob(
						job);

				org.apache.cxf.jaxrs.JAXRSServerFactoryBean sf = new org.apache.cxf.jaxrs.JAXRSServerFactoryBean();
				java.util.List<Object> providers = new java.util.ArrayList<Object>();
				providers
						.add(new ExceptionMapper4TalendJobRestService(provider));
				providers.add(new StreamingDOM4JProvider());
				org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
				jsonProvider.setIgnoreNamespaces(true);
				jsonProvider.setAttributesToElements(true);

				jsonProvider.setSupportUnwrapped(true);
				jsonProvider.setWrapperName("root");

				jsonProvider.setConvertTypesToStrings(false);

				providers.add(jsonProvider);
				sf.setProviders(providers);
				sf.setTransportId("http://cxf.apache.org/transports/http");
				sf.setResourceClasses(RestServiceProviderImpl4TalendJob.class);
				sf.setResourceProvider(
						RestServiceProviderImpl4TalendJob.class,
						new org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider(
								provider));
				sf.setAddress(endpointUrl);

				final java.util.List<org.apache.cxf.feature.Feature> features = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

				features.add(new org.apache.cxf.feature.LoggingFeature());

				sf.setFeatures(features);

				server = sf.create();

				// System.out.println("REST service [endpoint: " + endpointUrl +
				// "] published");
			} catch (Throwable e) {
				e.printStackTrace();
			}
		}

		public void stopEndpoint() {
			if (null != server) {
				server.stop();
				server.destroy();
				// System.out.println("REST service [endpoint: " + endpointUrl +
				// "] unpublished");
			}
		}
	}

	public static class row26Struct implements
			routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row26Struct row26 = new row26Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				class BytesLimit65535_tLogRow_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogRow_1().limitLog4jByte();

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				class BytesLimit65535_tLogCatcher_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogCatcher_1().limitLog4jByte();

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					row26.type = lcm.getType();
					row26.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row26.priority = lcm.getPriority();
					row26.message = lcm.getMessage();
					row26.code = lcm.getCode();

					row26.moment = java.util.Calendar.getInstance().getTime();

					row26.pid = pid;
					row26.root_pid = rootPid;
					row26.father_pid = fatherPid;

					row26.project = projectName;
					row26.job = jobName;
					row26.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */

					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					// /////////////////////

					strBuffer_tLogRow_1 = new StringBuilder();

					if (row26.moment != null) { //

						strBuffer_tLogRow_1.append(FormatterUtils.format_Date(
								row26.moment, "yyyy-MM-dd HH:mm:ss"));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row26.pid != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row26.pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row26.root_pid != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row26.root_pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row26.father_pid != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row26.father_pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row26.project != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row26.project));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row26.job != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row26.job));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row26.context != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row26.context));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row26.priority != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row26.priority));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row26.type != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row26.type));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row26.origin != null) { //

						strBuffer_tLogRow_1
								.append(String.valueOf(row26.origin));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row26.message != null) { //

						strBuffer_tLogRow_1.append(String
								.valueOf(row26.message));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row26.code != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row26.code));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
								.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_1 = new java.io.PrintStream(
								new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
					}
					consoleOut_tLogRow_1
							.println(strBuffer_tLogRow_1.toString());
					consoleOut_tLogRow_1.flush();
					nb_line_tLogRow_1++;
					// ////

					// ////

					// /////////////////////

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				if (!((String) globalMap.get("tLogCatcher_1_ERROR_MESSAGE"))
						.equals("")) {

					tFixedFlowInput_9Process(globalMap);
				}

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class no500Struct implements
			routines.system.IPersistableRow<no500Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(no500Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String status_code;

		public String getStatus_code() {
			return this.status_code;
		}

		public String status_message;

		public String getStatus_message() {
			return this.status_message;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.status_code = readString(dis);

					this.status_message = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status_code, dos);

				// String

				writeString(this.status_message, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status_code=" + status_code);
			sb.append(",status_message=" + status_message);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();
				no500Struct no500 = new no500Struct();

				/**
				 * [tRESTResponse_4 begin ] start
				 */

				ok_Hash.put("tRESTResponse_4", false);
				start_Hash.put("tRESTResponse_4", System.currentTimeMillis());

				currentComponent = "tRESTResponse_4";

				int tos_count_tRESTResponse_4 = 0;

				class BytesLimit65535_tRESTResponse_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTResponse_4().limitLog4jByte();

				/**
				 * [tRESTResponse_4 begin ] stop
				 */

				/**
				 * [tXMLMap_6 begin ] start
				 */

				ok_Hash.put("tXMLMap_6", false);
				start_Hash.put("tXMLMap_6", System.currentTimeMillis());

				currentComponent = "tXMLMap_6";

				int tos_count_tXMLMap_6 = 0;

				class BytesLimit65535_tXMLMap_6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_6().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_6 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_6__Struct {
				}
				Var__tXMLMap_6__Struct Var__tXMLMap_6 = new Var__tXMLMap_6__Struct();
				// ###############################
				// # Outputs initialization
				no500Struct no500_tmp = new no500Struct();
				no500Struct no500_save = null;
				// ###############################
				int nb_line_tXMLMap_6 = 0;

				XML_API_tXMLMap_6 xml_api_tXMLMap_6 = new XML_API_tXMLMap_6();

				class GenerateDocument_no500 {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					String currentValue = null;

					public GenerateDocument_no500() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						generateOk();
						return this.doc;
					}

					// do some work after document has been generated
					private void generateOk() {
						routines.system.NestXMLTool.replaceDefaultNameSpace(
								this.doc.getRootElement(), null);
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin,
							row11Struct row11, Var__tXMLMap_6__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = org.dom4j.DocumentHelper
									.createElement("root");
							doc.add(root);
							subTreeRootParent = root;
							org.dom4j.Element root_0 = null;
							root_0 = root.addElement("STATUS");
							valueMap.put("root_0", "0");
							if (valueMap.get("root_0") != null) {
								routines.system.NestXMLTool.setText(root_0,
										FormatterUtils.format("0", null));
							}
							org.dom4j.Element root_1 = null;
							root_1 = root.addElement("FILE_ID");
							valueMap.put("root_1", "");
							if (valueMap.get("root_1") != null) {
								routines.system.NestXMLTool.setText(root_1,
										FormatterUtils.format("", null));
							}
							org.dom4j.Element root_2 = null;
							root_2 = root.addElement("RETURN_CODE");
							valueMap.put("root_2", row11.status_code);
							if (valueMap.get("root_2") != null) {
								routines.system.NestXMLTool.setText(root_2,
										FormatterUtils.format(
												row11.status_code, null));
							}
							org.dom4j.Element root_3 = null;
							root_3 = root.addElement("RETURN_MSG");
							valueMap.put("root_3", row11.status_message);
							if (valueMap.get("root_3") != null) {
								routines.system.NestXMLTool.setText(root_3,
										FormatterUtils.format(
												row11.status_message, null));
							}
							org.dom4j.Element root_4 = null;
							root_4 = root.addElement("CONTENT");
							valueMap.put("root_4", "");
							if (valueMap.get("root_4") != null) {
								routines.system.NestXMLTool.setText(root_4,
										FormatterUtils.format("", null));
							}
							org.dom4j.Element root_5 = null;
							root_5 = root.addElement("MID_NO");
							valueMap.put("root_5", context.MID_NO);
							if (valueMap.get("root_5") != null) {
								routines.system.NestXMLTool.setText(root_5,
										FormatterUtils.format(context.MID_NO,
												null));
							}
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
					}
				}

				/**
				 * [tXMLMap_6 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_9 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_9", false);
				start_Hash.put("tFixedFlowInput_9", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_9";

				int tos_count_tFixedFlowInput_9 = 0;

				class BytesLimit65535_tFixedFlowInput_9 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_9().limitLog4jByte();

				for (int i_tFixedFlowInput_9 = 0; i_tFixedFlowInput_9 < 1; i_tFixedFlowInput_9++) {

					row11.status_code = "500";

					row11.status_message = ((String) globalMap
							.get("tLogCatcher_1_ERROR_MESSAGE"));

					/**
					 * [tFixedFlowInput_9 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_9 main ] start
					 */

					currentComponent = "tFixedFlowInput_9";

					tos_count_tFixedFlowInput_9++;

					/**
					 * [tFixedFlowInput_9 main ] stop
					 */

					/**
					 * [tXMLMap_6 main ] start
					 */

					currentComponent = "tXMLMap_6";

					boolean rejectedInnerJoin_tXMLMap_6 = false;
					boolean rejectedDocInnerJoin_tXMLMap_6 = false;
					boolean mainRowRejected_tXMLMap_6 = false;
					boolean isMatchDocRowtXMLMap_6 = false;

					GenerateDocument_no500 gen_Doc_no500_tXMLMap_6 = new GenerateDocument_no500();
					no500_tmp.body = null;

					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tXMLMap_6__Struct Var = Var__tXMLMap_6;
						// ###############################
						// # Output tables

						no500 = null;

						// # Output table : 'no500'

						gen_Doc_no500_tXMLMap_6.generateElements(
								rejectedDocInnerJoin_tXMLMap_6, row11, Var);

						if (no500_tmp.body == null) {
							no500_tmp.body = new routines.system.Document();
							no500_tmp.body.setDocument(gen_Doc_no500_tXMLMap_6
									.getDocument());
						}

						no500 = no500_tmp;
						no500_save = no500_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tXMLMap_6 = false;

					tos_count_tXMLMap_6++;

					/**
					 * [tXMLMap_6 main ] stop
					 */
					// Start of branch "no500"
					if (no500 != null) {

						/**
						 * [tRESTResponse_4 main ] start
						 */

						currentComponent = "tRESTResponse_4";

						java.io.OutputStream outputStream_tRESTResponse_4 = (java.io.OutputStream) globalMap
								.get("restResponseStream");
						boolean responseAlreadySent_tRESTResponse_4 = globalMap
								.containsKey("restResponse");

						if (null == outputStream_tRESTResponse_4
								&& responseAlreadySent_tRESTResponse_4) {
							throw new RuntimeException(
									"Rest response already sent.");
						} else if (!globalMap.containsKey("restRequest")) {
							throw new RuntimeException(
									"Not received rest request yet.");
						} else {
							Integer restProviderStatusCode_tRESTResponse_4 = 500;

							Object restProviderResponse_tRESTResponse_4 = null;
							if (null != no500.body) {
								restProviderResponse_tRESTResponse_4 = no500.body
										.getDocument();
							}

							java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_4 = new java.util.TreeMap<String, String>(
									String.CASE_INSENSITIVE_ORDER);

							java.util.Map<String, Object> restRequest_tRESTResponse_4 = (java.util.Map<String, Object>) globalMap
									.get("restRequest");
							org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_4 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_4
									.get("MESSAGE_CONTEXT");

							if (null == outputStream_tRESTResponse_4) {
								java.util.Map<String, Object> restResponse_tRESTResponse_4 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_4.put("BODY",
										restProviderResponse_tRESTResponse_4);
								restResponse_tRESTResponse_4.put("STATUS",
										restProviderStatusCode_tRESTResponse_4);
								restResponse_tRESTResponse_4
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_4);
								restResponse_tRESTResponse_4.put(
										"drop.json.root.element",
										Boolean.valueOf(true));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_4);

							} else {

								javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_4 = null;
								if (!responseAlreadySent_tRESTResponse_4) {
									org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
													true);

									messageContext_tRESTResponse_4
											.put(org.apache.cxf.message.Message.RESPONSE_CODE,
													restProviderStatusCode_tRESTResponse_4);
									javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_4 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
									for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_4
											.entrySet()) {
										headersMultivaluedMap_tRESTResponse_4
												.putSingle(multivaluedHeader
														.getKey(),
														multivaluedHeader
																.getValue());
									}
									messageContext_tRESTResponse_4
											.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
													headersMultivaluedMap_tRESTResponse_4);

									// String
									// responseContentType_tRESTResponse_4 =
									// (String)
									// messageContext_tRESTResponse_4.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									String responseContentType_tRESTResponse_4 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									if (null == responseContentType_tRESTResponse_4) {
										// this should not be needed, just in
										// case. set it to the first value in
										// the sorted list returned from
										// HttpHeaders
										responseMediaType_tRESTResponse_4 = messageContext_tRESTResponse_4
												.getHttpHeaders()
												.getAcceptableMediaTypes()
												.get(0);
									} else {
										responseMediaType_tRESTResponse_4 = org.apache.cxf.jaxrs.utils.JAXRSUtils
												.toMediaType(responseContentType_tRESTResponse_4);
									}
									globalMap.put("restResponseMediaType",
											responseMediaType_tRESTResponse_4);

									String responseMediaSubType_tRESTResponse_4 = responseMediaType_tRESTResponse_4
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_4
											.equals("xml")
											|| responseMediaSubType_tRESTResponse_4
													.endsWith("+xml")) {
										outputStream_tRESTResponse_4
												.write("<wrapper>".getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"</wrapper>");
									}
									if (responseMediaSubType_tRESTResponse_4
											.equals("json")
											|| responseMediaSubType_tRESTResponse_4
													.endsWith("+json")) {
										outputStream_tRESTResponse_4.write("["
												.getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"]");
									}

									globalMap.put("restResponse", true);
								} else {
									responseMediaType_tRESTResponse_4 = (javax.ws.rs.core.MediaType) globalMap
											.get("restResponseMediaType");
								}

								if (null != restProviderResponse_tRESTResponse_4) {
									String responseMediaSubType_tRESTResponse_4 = responseMediaType_tRESTResponse_4
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_4
											.equals("json")
											|| responseMediaSubType_tRESTResponse_4
													.endsWith("+json")) {
										if (globalMap
												.containsKey("restResponseJsonStarted")) {
											outputStream_tRESTResponse_4
													.write(",".getBytes());
										} else {
											globalMap.put(
													"restResponseJsonStarted",
													true);
										}
									}

									Class<? extends Object> responseBodyClass_tRESTResponse_4 = restProviderResponse_tRESTResponse_4
											.getClass();
									javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_4 = messageContext_tRESTResponse_4
											.getProviders();
									javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_4 = messageBodyProviders_tRESTResponse_4
											.getMessageBodyWriter(
													responseBodyClass_tRESTResponse_4,
													responseBodyClass_tRESTResponse_4,
													null,
													responseMediaType_tRESTResponse_4);
									messageBodyWriter_tRESTResponse_4
											.writeTo(
													restProviderResponse_tRESTResponse_4,
													responseBodyClass_tRESTResponse_4,
													responseBodyClass_tRESTResponse_4,
													new java.lang.annotation.Annotation[] {},
													responseMediaType_tRESTResponse_4,
													null,
													outputStream_tRESTResponse_4);
								}
								// initial variant
								// outputStream_tRESTResponse_4.write(String.valueOf(restProviderResponse_tRESTResponse_4).getBytes());
								outputStream_tRESTResponse_4.flush();
							}
						}

						tos_count_tRESTResponse_4++;

						/**
						 * [tRESTResponse_4 main ] stop
						 */

					} // End of branch "no500"

					/**
					 * [tFixedFlowInput_9 end ] start
					 */

					currentComponent = "tFixedFlowInput_9";

				}
				globalMap.put("tFixedFlowInput_9_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_9", true);
				end_Hash.put("tFixedFlowInput_9", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_9 end ] stop
				 */

				/**
				 * [tXMLMap_6 end ] start
				 */

				currentComponent = "tXMLMap_6";

				ok_Hash.put("tXMLMap_6", true);
				end_Hash.put("tXMLMap_6", System.currentTimeMillis());

				/**
				 * [tXMLMap_6 end ] stop
				 */

				/**
				 * [tRESTResponse_4 end ] start
				 */

				currentComponent = "tRESTResponse_4";

				ok_Hash.put("tRESTResponse_4", true);
				end_Hash.put("tRESTResponse_4", System.currentTimeMillis());

				/**
				 * [tRESTResponse_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_9 finally ] start
				 */

				currentComponent = "tFixedFlowInput_9";

				/**
				 * [tFixedFlowInput_9 finally ] stop
				 */

				/**
				 * [tXMLMap_6 finally ] start
				 */

				currentComponent = "tXMLMap_6";

				/**
				 * [tXMLMap_6 finally ] stop
				 */

				/**
				 * [tRESTResponse_4 finally ] start
				 */

				currentComponent = "tRESTResponse_4";

				/**
				 * [tRESTResponse_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_9_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				class BytesLimit65535_tPostjob_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPostjob_1().limitLog4jByte();

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				tRunJob_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				class BytesLimit65535_tRunJob_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRunJob_1().limitLog4jByte();

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

				paraList_tRunJob_1.add("--father_pid=" + pid);

				paraList_tRunJob_1.add("--root_pid=" + rootPid);

				paraList_tRunJob_1.add("--father_node=tRunJob_1");

				paraList_tRunJob_1.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_1.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
						&& childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();

				parentContextMap_tRunJob_1.put("mq_host", context.mq_host);

				parentContextMap_tRunJob_1
						.put("mq_host_c1", context.mq_host_c1);

				parentContextMap_tRunJob_1
						.put("mq_host_c2", context.mq_host_c2);

				parentContextMap_tRunJob_1
						.put("mq_host_c3", context.mq_host_c3);

				parentContextMap_tRunJob_1.put("mq_password",
						context.mq_password);

				parentContextMap_tRunJob_1.put("mq_port", context.mq_port);

				parentContextMap_tRunJob_1
						.put("mq_port_c1", context.mq_port_c1);

				parentContextMap_tRunJob_1
						.put("mq_port_c2", context.mq_port_c2);

				parentContextMap_tRunJob_1
						.put("mq_port_c3", context.mq_port_c3);

				parentContextMap_tRunJob_1.put("mq_queuename",
						context.mq_queuename);

				parentContextMap_tRunJob_1.put("mq_username",
						context.mq_username);

				parentContextMap_tRunJob_1.put("mq_virtualhost",
						context.mq_virtualhost);

				parentContextMap_tRunJob_1.put("retrySAPConn",
						context.retrySAPConn);

				parentContextMap_tRunJob_1.put("APPNAME_PREFIX",
						context.APPNAME_PREFIX);

				parentContextMap_tRunJob_1.put("DRIVER_CLASS",
						context.DRIVER_CLASS);

				parentContextMap_tRunJob_1.put("JDBC_JAR", context.JDBC_JAR);

				parentContextMap_tRunJob_1.put("JDBC_URL", context.JDBC_URL);

				parentContextMap_tRunJob_1.put("LOG_TABLE", context.LOG_TABLE);

				parentContextMap_tRunJob_1.put("MAX_CONNECTION",
						context.MAX_CONNECTION);

				parentContextMap_tRunJob_1.put("MID_NO", context.MID_NO);

				parentContextMap_tRunJob_1.put("PASSWORD", context.PASSWORD);

				parentContextMap_tRunJob_1.put("RANDOM_CONN",
						context.RANDOM_CONN);

				parentContextMap_tRunJob_1.put("USERNAME", context.USERNAME);

				parentContextMap_tRunJob_1.put("mount_folder",
						context.mount_folder);

				parentContextMap_tRunJob_1.put("debugging", context.debugging);

				parentContextMap_tRunJob_1.put("mapping_table_name",
						context.mapping_table_name);

				java.util.Enumeration<?> propertyNames_tRunJob_1 = context
						.propertyNames();
				while (propertyNames_tRunJob_1.hasMoreElements()) {
					String key_tRunJob_1 = (String) propertyNames_tRunJob_1
							.nextElement();
					Object value_tRunJob_1 = (Object) context
							.get(key_tRunJob_1);
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1
							+ "=" + value_tRunJob_1);

				}

				Object obj_tRunJob_1 = null;

				esb_mfs_srv.esb_dbclose_0_4.esb_dbclose childJob_tRunJob_1 = new esb_mfs_srv.esb_dbclose_0_4.esb_dbclose();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_1) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
							.entrySet()) {
						dataSources_tRunJob_1.put(
								talendDataSourceEntry_tRunJob_1.getKey(),
								talendDataSourceEntry_tRunJob_1.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
				}

				childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

				String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
						.runJob((String[]) paraList_tRunJob_1
								.toArray(new String[paraList_tRunJob_1.size()]));

				errorCode = childJob_tRunJob_1.getErrorCode();

				if (childJob_tRunJob_1.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_1
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getErrorCode());
				}
				if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_1.getExceptionStackTrace());
				}

				if (childJob_tRunJob_1.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_1.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				/**
				 * [tRunJob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				class BytesLimit65535_tPrejob_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPrejob_1().limitLog4jByte();

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				tJava_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				class BytesLimit65535_tJava_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJava_1().limitLog4jByte();

				// define queue name
				context.mq_queuename = "FILE";

				context.RANDOM_CONN = 3;
				context.APPNAME_PREFIX = "FILE_MAPPING";

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				tLibraryLoad_1Process(globalMap);

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				class BytesLimit65535_tLibraryLoad_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLibraryLoad_1().limitLog4jByte();

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */

				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */

				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLibraryLoad_1 finally ] start
				 */

				currentComponent = "tLibraryLoad_1";

				/**
				 * [tLibraryLoad_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String sso;

		public String getSso() {
			return this.sso;
		}

		public String verify_pccuid;

		public String getVerify_pccuid() {
			return this.verify_pccuid;
		}

		public Boolean verified;

		public Boolean getVerified() {
			return this.verified;
		}

		public String aud;

		public String getAud() {
			return this.aud;
		}

		public String azp;

		public String getAzp() {
			return this.azp;
		}

		public Boolean valid;

		public Boolean getValid() {
			return this.valid;
		}

		public Boolean admin;

		public Boolean getAdmin() {
			return this.admin;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.sso = readString(dis);

					this.verify_pccuid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.verified = null;
					} else {
						this.verified = dis.readBoolean();
					}

					this.aud = readString(dis);

					this.azp = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valid = null;
					} else {
						this.valid = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.admin = null;
					} else {
						this.admin = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sso, dos);

				// String

				writeString(this.verify_pccuid, dos);

				// Boolean

				if (this.verified == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.verified);
				}

				// String

				writeString(this.aud, dos);

				// String

				writeString(this.azp, dos);

				// Boolean

				if (this.valid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.valid);
				}

				// Boolean

				if (this.admin == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.admin);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sso=" + sso);
			sb.append(",verify_pccuid=" + verify_pccuid);
			sb.append(",verified=" + String.valueOf(verified));
			sb.append(",aud=" + aud);
			sb.append(",azp=" + azp);
			sb.append(",valid=" + String.valueOf(valid));
			sb.append(",admin=" + String.valueOf(admin));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRunJob_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row19Struct row19 = new row19Struct();

				/**
				 * [tFlowToIterate_10 begin ] start
				 */

				ok_Hash.put("tFlowToIterate_10", false);
				start_Hash.put("tFlowToIterate_10", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_10";

				int tos_count_tFlowToIterate_10 = 0;

				class BytesLimit65535_tFlowToIterate_10 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowToIterate_10().limitLog4jByte();

				int nb_line_tFlowToIterate_10 = 0;
				int counter_tFlowToIterate_10 = 0;

				/**
				 * [tFlowToIterate_10 begin ] stop
				 */

				/**
				 * [tRunJob_4 begin ] start
				 */

				ok_Hash.put("tRunJob_4", false);
				start_Hash.put("tRunJob_4", System.currentTimeMillis());

				currentComponent = "tRunJob_4";

				int tos_count_tRunJob_4 = 0;

				class BytesLimit65535_tRunJob_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRunJob_4().limitLog4jByte();

				/**
				 * [tRunJob_4 begin ] stop
				 */

				/**
				 * [tRunJob_4 main ] start
				 */

				currentComponent = "tRunJob_4";

				java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();

				paraList_tRunJob_4.add("--father_pid=" + pid);

				paraList_tRunJob_4.add("--root_pid=" + rootPid);

				paraList_tRunJob_4.add("--father_node=tRunJob_4");

				paraList_tRunJob_4.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_4.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_4.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_4 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_4 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_4".equals(tRunJobName_tRunJob_4)
						&& childResumePath_tRunJob_4 != null) {
					paraList_tRunJob_4
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_4.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_4");

				java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_4 = null;

				obj_tRunJob_4 = ((String) globalMap
						.get("upload1.Authorization"));
				paraList_tRunJob_4.add("--context_param Authorization="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));

				parentContextMap_tRunJob_4.put("Authorization", obj_tRunJob_4);

				esb_mfs_srv.api_jwt_verify_0_1.api_jwt_verify childJob_tRunJob_4 = new esb_mfs_srv.api_jwt_verify_0_1.api_jwt_verify();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_4) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_4 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_4 : talendDataSources_tRunJob_4
							.entrySet()) {
						dataSources_tRunJob_4.put(
								talendDataSourceEntry_tRunJob_4.getKey(),
								talendDataSourceEntry_tRunJob_4.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_4.setDataSources(dataSources_tRunJob_4);
				}

				childJob_tRunJob_4.parentContextMap = parentContextMap_tRunJob_4;

				String[][] childReturn_tRunJob_4 = childJob_tRunJob_4
						.runJob((String[]) paraList_tRunJob_4
								.toArray(new String[paraList_tRunJob_4.size()]));

				errorCode = childJob_tRunJob_4.getErrorCode();

				if (childJob_tRunJob_4.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_4_CHILD_RETURN_CODE",
							childJob_tRunJob_4.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_4
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_4_CHILD_RETURN_CODE",
							childJob_tRunJob_4.getErrorCode());
				}
				if (childJob_tRunJob_4.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_4.getExceptionStackTrace());
				}

				if (childJob_tRunJob_4.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_4.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				for (String[] item_tRunJob_4 : childReturn_tRunJob_4) {
					if (childJob_tRunJob_4.hastBufferOutputComponent() || true) {

						if (0 < item_tRunJob_4.length) {

							row19.sso = item_tRunJob_4[0];

						} else {
							row19.sso = null;
						}

						if (1 < item_tRunJob_4.length) {

							row19.verify_pccuid = item_tRunJob_4[1];

						} else {
							row19.verify_pccuid = null;
						}

						if (2 < item_tRunJob_4.length) {

							row19.verified = ParserUtils
									.parseTo_Boolean(item_tRunJob_4[2]);

						} else {
							row19.verified = null;
						}

						if (3 < item_tRunJob_4.length) {

							row19.aud = item_tRunJob_4[3];

						} else {
							row19.aud = null;
						}

						if (4 < item_tRunJob_4.length) {

							row19.azp = item_tRunJob_4[4];

						} else {
							row19.azp = null;
						}

						if (5 < item_tRunJob_4.length) {

							row19.valid = ParserUtils
									.parseTo_Boolean(item_tRunJob_4[5]);

						} else {
							row19.valid = null;
						}

						if (6 < item_tRunJob_4.length) {

							row19.admin = ParserUtils
									.parseTo_Boolean(item_tRunJob_4[6]);

						} else {
							row19.admin = null;
						}

					}

					tos_count_tRunJob_4++;

					/**
					 * [tRunJob_4 main ] stop
					 */

					/**
					 * [tFlowToIterate_10 main ] start
					 */

					currentComponent = "tFlowToIterate_10";

					globalMap.put("row19.sso", row19.sso);

					globalMap.put("row19.verify_pccuid", row19.verify_pccuid);

					globalMap.put("row19.verified", row19.verified);

					globalMap.put("row19.aud", row19.aud);

					globalMap.put("row19.azp", row19.azp);

					globalMap.put("row19.valid", row19.valid);

					globalMap.put("row19.admin", row19.admin);

					nb_line_tFlowToIterate_10++;
					counter_tFlowToIterate_10++;
					globalMap.put("tFlowToIterate_10_CURRENT_ITERATION",
							counter_tFlowToIterate_10);

					tos_count_tFlowToIterate_10++;

					/**
					 * [tFlowToIterate_10 main ] stop
					 */

				} // C_01

				/**
				 * [tRunJob_4 end ] start
				 */

				currentComponent = "tRunJob_4";

				ok_Hash.put("tRunJob_4", true);
				end_Hash.put("tRunJob_4", System.currentTimeMillis());

				/**
				 * [tRunJob_4 end ] stop
				 */

				/**
				 * [tFlowToIterate_10 end ] start
				 */

				currentComponent = "tFlowToIterate_10";

				globalMap.put("tFlowToIterate_10_NB_LINE",
						nb_line_tFlowToIterate_10);

				ok_Hash.put("tFlowToIterate_10", true);
				end_Hash.put("tFlowToIterate_10", System.currentTimeMillis());

				if (context.debugging
						|| ((Boolean) globalMap.get("row19.verified"))) {

					tJavaFlex_1Process(globalMap);
				}

				if (!context.debugging
						&& !((Boolean) globalMap.get("row19.verified"))) {

					tFixedFlowInput_14Process(globalMap);
				}

				/**
				 * [tFlowToIterate_10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_4 finally ] start
				 */

				currentComponent = "tRunJob_4";

				/**
				 * [tRunJob_4 finally ] stop
				 */

				/**
				 * [tFlowToIterate_10 finally ] start
				 */

				currentComponent = "tFlowToIterate_10";

				/**
				 * [tFlowToIterate_10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 1);
	}

	public static class rndcon1Struct implements
			routines.system.IPersistableRow<rndcon1Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public Integer RANDOM_NUM;

		public Integer getRANDOM_NUM() {
			return this.RANDOM_NUM;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.RANDOM_NUM = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.RANDOM_NUM, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("RANDOM_NUM=" + String.valueOf(RANDOM_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(rndcon1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaFlex_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaFlex_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				rndcon1Struct rndcon1 = new rndcon1Struct();

				/**
				 * [tFlowToIterate_4 begin ] start
				 */

				int NB_ITERATE_tJDBCConnection_1 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_4", false);
				start_Hash.put("tFlowToIterate_4", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_4";

				int tos_count_tFlowToIterate_4 = 0;

				class BytesLimit65535_tFlowToIterate_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowToIterate_4().limitLog4jByte();

				int nb_line_tFlowToIterate_4 = 0;
				int counter_tFlowToIterate_4 = 0;

				/**
				 * [tFlowToIterate_4 begin ] stop
				 */

				/**
				 * [tJavaFlex_1 begin ] start
				 */

				ok_Hash.put("tJavaFlex_1", false);
				start_Hash.put("tJavaFlex_1", System.currentTimeMillis());

				currentComponent = "tJavaFlex_1";

				int tos_count_tJavaFlex_1 = 0;

				class BytesLimit65535_tJavaFlex_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaFlex_1().limitLog4jByte();

				/**
				 * [tJavaFlex_1 begin ] stop
				 */

				/**
				 * [tJavaFlex_1 main ] start
				 */

				currentComponent = "tJavaFlex_1";

				// here is the main part of the component,
				// a piece of code executed in the row
				rndcon1.RANDOM_NUM = ThreadLocalRandom.current().nextInt(0,
						context.MAX_CONNECTION) + 1;
				// log

				tos_count_tJavaFlex_1++;

				/**
				 * [tJavaFlex_1 main ] stop
				 */

				/**
				 * [tFlowToIterate_4 main ] start
				 */

				currentComponent = "tFlowToIterate_4";

				globalMap.put("rndcon1.RANDOM_NUM", rndcon1.RANDOM_NUM);

				nb_line_tFlowToIterate_4++;
				counter_tFlowToIterate_4++;
				globalMap.put("tFlowToIterate_4_CURRENT_ITERATION",
						counter_tFlowToIterate_4);

				tos_count_tFlowToIterate_4++;

				/**
				 * [tFlowToIterate_4 main ] stop
				 */
				NB_ITERATE_tJDBCConnection_1++;

				/**
				 * [tJDBCConnection_1 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_1", false);
				start_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				currentComponent = "tJDBCConnection_1";

				int tos_count_tJDBCConnection_1 = 0;

				class BytesLimit65535_tJDBCConnection_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJDBCConnection_1().limitLog4jByte();

				String url_tJDBCConnection_1 = context.JDBC_URL
						+ "?tcpKeepAlive=true&ApplicationName="
						+ context.MID_NO + "-" + context.APPNAME_PREFIX + "_"
						+ ((Integer) globalMap.get("rndcon1.RANDOM_NUM"));

				String dbUser_tJDBCConnection_1 = context.USERNAME;

				final String decryptedPassword_tJDBCConnection_1 = context.PASSWORD;
				String dbPwd_tJDBCConnection_1 = decryptedPassword_tJDBCConnection_1;

				java.sql.Connection conn_tJDBCConnection_1 = null;

				String sharedConnectionName_tJDBCConnection_1 = context.APPNAME_PREFIX
						+ "_" + ((Integer) globalMap.get("rndcon1.RANDOM_NUM"));
				conn_tJDBCConnection_1 = SharedDBConnection.getDBConnection(
						context.DRIVER_CLASS, url_tJDBCConnection_1,
						dbUser_tJDBCConnection_1, dbPwd_tJDBCConnection_1,
						sharedConnectionName_tJDBCConnection_1);
				if (null != conn_tJDBCConnection_1) {

					conn_tJDBCConnection_1.setAutoCommit(true);
				}

				globalMap.put("conn_tJDBCConnection_1", conn_tJDBCConnection_1);
				globalMap.put("url_tJDBCConnection_1", url_tJDBCConnection_1);
				// globalMap.put("user_tJDBCConnection_1",
				// dbUser_tJDBCConnection_1);
				// globalMap.put("pass_tJDBCConnection_1",
				// dbPwd_tJDBCConnection_1);

				/**
				 * [tJDBCConnection_1 begin ] stop
				 */

				/**
				 * [tJDBCConnection_1 main ] start
				 */

				currentComponent = "tJDBCConnection_1";

				tos_count_tJDBCConnection_1++;

				/**
				 * [tJDBCConnection_1 main ] stop
				 */

				/**
				 * [tJDBCConnection_1 end ] start
				 */

				currentComponent = "tJDBCConnection_1";

				ok_Hash.put("tJDBCConnection_1", true);
				end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_1 end ] stop
				 */

				/**
				 * [tJavaFlex_1 end ] start
				 */

				currentComponent = "tJavaFlex_1";

				ok_Hash.put("tJavaFlex_1", true);
				end_Hash.put("tJavaFlex_1", System.currentTimeMillis());

				/**
				 * [tJavaFlex_1 end ] stop
				 */

				/**
				 * [tFlowToIterate_4 end ] start
				 */

				currentComponent = "tFlowToIterate_4";

				globalMap.put("tFlowToIterate_4_NB_LINE",
						nb_line_tFlowToIterate_4);

				ok_Hash.put("tFlowToIterate_4", true);
				end_Hash.put("tFlowToIterate_4", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJavaFlex_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFixedFlowInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaFlex_1 finally ] start
				 */

				currentComponent = "tJavaFlex_1";

				/**
				 * [tJavaFlex_1 finally ] stop
				 */

				/**
				 * [tFlowToIterate_4 finally ] start
				 */

				currentComponent = "tFlowToIterate_4";

				/**
				 * [tFlowToIterate_4 finally ] stop
				 */

				/**
				 * [tJDBCConnection_1 finally ] start
				 */

				currentComponent = "tJDBCConnection_1";

				/**
				 * [tJDBCConnection_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaFlex_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		public String original_uri;

		public String getOriginal_uri() {
			return this.original_uri;
		}

		public String auth_string;

		public String getAuth_string() {
			return this.auth_string;
		}

		public String grant_system;

		public String getGrant_system() {
			return this.grant_system;
		}

		public Boolean valid;

		public Boolean getValid() {
			return this.valid;
		}

		public String md5sum;

		public String getMd5sum() {
			return this.md5sum;
		}

		public Integer content_length;

		public Integer getContent_length() {
			return this.content_length;
		}

		public String content_disposition;

		public String getContent_disposition() {
			return this.content_disposition;
		}

		public String content_type;

		public String getContent_type() {
			return this.content_type;
		}

		public String ref_file_id;

		public String getRef_file_id() {
			return this.ref_file_id;
		}

		public java.util.Date create_time;

		public java.util.Date getCreate_time() {
			return this.create_time;
		}

		public java.util.Date update_time;

		public java.util.Date getUpdate_time() {
			return this.update_time;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.file_id == null) ? 0 : this.file_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.file_id == null) {
				if (other.file_id != null)
					return false;

			} else if (!this.file_id.equals(other.file_id))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.file_id = this.file_id;
			other.original_uri = this.original_uri;
			other.auth_string = this.auth_string;
			other.grant_system = this.grant_system;
			other.valid = this.valid;
			other.md5sum = this.md5sum;
			other.content_length = this.content_length;
			other.content_disposition = this.content_disposition;
			other.content_type = this.content_type;
			other.ref_file_id = this.ref_file_id;
			other.create_time = this.create_time;
			other.update_time = this.update_time;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.file_id = this.file_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.file_id = readString(dis);

					this.original_uri = readString(dis);

					this.auth_string = readString(dis);

					this.grant_system = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valid = null;
					} else {
						this.valid = dis.readBoolean();
					}

					this.md5sum = readString(dis);

					this.content_length = readInteger(dis);

					this.content_disposition = readString(dis);

					this.content_type = readString(dis);

					this.ref_file_id = readString(dis);

					this.create_time = readDate(dis);

					this.update_time = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.file_id, dos);

				// String

				writeString(this.original_uri, dos);

				// String

				writeString(this.auth_string, dos);

				// String

				writeString(this.grant_system, dos);

				// Boolean

				if (this.valid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.valid);
				}

				// String

				writeString(this.md5sum, dos);

				// Integer

				writeInteger(this.content_length, dos);

				// String

				writeString(this.content_disposition, dos);

				// String

				writeString(this.content_type, dos);

				// String

				writeString(this.ref_file_id, dos);

				// java.util.Date

				writeDate(this.create_time, dos);

				// java.util.Date

				writeDate(this.update_time, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("file_id=" + file_id);
			sb.append(",original_uri=" + original_uri);
			sb.append(",auth_string=" + auth_string);
			sb.append(",grant_system=" + grant_system);
			sb.append(",valid=" + String.valueOf(valid));
			sb.append(",md5sum=" + md5sum);
			sb.append(",content_length=" + String.valueOf(content_length));
			sb.append(",content_disposition=" + content_disposition);
			sb.append(",content_type=" + content_type);
			sb.append(",ref_file_id=" + ref_file_id);
			sb.append(",create_time=" + String.valueOf(create_time));
			sb.append(",update_time=" + String.valueOf(update_time));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.file_id, other.file_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tJDBCOutput_1 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_1", false);
				start_Hash.put("tJDBCOutput_1", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_1";

				int tos_count_tJDBCOutput_1 = 0;

				class BytesLimit65535_tJDBCOutput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJDBCOutput_1().limitLog4jByte();

				int nb_line_tJDBCOutput_1 = 0;
				int nb_line_update_tJDBCOutput_1 = 0;
				int nb_line_inserted_tJDBCOutput_1 = 0;
				int nb_line_deleted_tJDBCOutput_1 = 0;
				int nb_line_rejected_tJDBCOutput_1 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_1 = 0;

				int deletedCount_tJDBCOutput_1 = 0;
				int updatedCount_tJDBCOutput_1 = 0;
				int insertedCount_tJDBCOutput_1 = 0;
				int rejectedCount_tJDBCOutput_1 = 0;

				boolean whetherReject_tJDBCOutput_1 = false;

				java.sql.Connection connection_tJDBCOutput_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_1");
				int batchSize_tJDBCOutput_1 = 1000;
				int batchSizeCounter_tJDBCOutput_1 = 0;

				String insert_tJDBCOutput_1 = "INSERT INTO "
						+ context.mapping_table_name
						+ " (file_id,original_uri,auth_string,grant_system,valid,md5sum,content_length,content_disposition,content_type,ref_file_id,create_time,update_time) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_1 = connection_tJDBCOutput_1
						.prepareStatement(insert_tJDBCOutput_1);

				/**
				 * [tJDBCOutput_1 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_1 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_1", false);
				start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_1";

				int tos_count_tFixedFlowInput_1 = 0;

				class BytesLimit65535_tFixedFlowInput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_1().limitLog4jByte();

				for (int i_tFixedFlowInput_1 = 0; i_tFixedFlowInput_1 < 1; i_tFixedFlowInput_1++) {

					row2.file_id = ((String) globalMap.get("upload1.file_id"));

					row2.original_uri = ((String) globalMap
							.get("upload1.original_uri"));

					row2.auth_string = ((String) globalMap
							.get("upload1.auth_string"));

					row2.grant_system = ((String) globalMap
							.get("upload1.grant_system"));

					row2.valid = false;

					row2.md5sum = "";

					row2.content_length = 0;

					row2.content_disposition = "";

					row2.content_type = "";

					row2.ref_file_id = ((String) globalMap
							.get("upload1.file_id"));

					row2.create_time = new Date();

					row2.update_time = new Date();

					/**
					 * [tFixedFlowInput_1 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_1 main ] start
					 */

					currentComponent = "tFixedFlowInput_1";

					tos_count_tFixedFlowInput_1++;

					/**
					 * [tFixedFlowInput_1 main ] stop
					 */

					/**
					 * [tJDBCOutput_1 main ] start
					 */

					currentComponent = "tJDBCOutput_1";

					whetherReject_tJDBCOutput_1 = false;
					if (row2.file_id == null) {
						pstmt_tJDBCOutput_1.setNull(1, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_1.setString(1, row2.file_id);
					}

					if (row2.original_uri == null) {
						pstmt_tJDBCOutput_1.setNull(2, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_1.setString(2, row2.original_uri);
					}

					if (row2.auth_string == null) {
						pstmt_tJDBCOutput_1.setNull(3, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_1.setString(3, row2.auth_string);
					}

					if (row2.grant_system == null) {
						pstmt_tJDBCOutput_1.setNull(4, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_1.setString(4, row2.grant_system);
					}

					if (row2.valid == null) {
						pstmt_tJDBCOutput_1.setNull(5, java.sql.Types.BOOLEAN);
					} else {
						pstmt_tJDBCOutput_1.setBoolean(5, row2.valid);
					}

					if (row2.md5sum == null) {
						pstmt_tJDBCOutput_1.setNull(6, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_1.setString(6, row2.md5sum);
					}

					if (row2.content_length == null) {
						pstmt_tJDBCOutput_1.setNull(7, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_1.setInt(7, row2.content_length);
					}

					if (row2.content_disposition == null) {
						pstmt_tJDBCOutput_1.setNull(8, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_1.setString(8,
								row2.content_disposition);
					}

					if (row2.content_type == null) {
						pstmt_tJDBCOutput_1.setNull(9, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_1.setString(9, row2.content_type);
					}

					if (row2.ref_file_id == null) {
						pstmt_tJDBCOutput_1.setNull(10, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_1.setString(10, row2.ref_file_id);
					}

					if (row2.create_time != null) {
						pstmt_tJDBCOutput_1.setTimestamp(
								11,
								new java.sql.Timestamp(row2.create_time
										.getTime()));
					} else {
						pstmt_tJDBCOutput_1.setNull(11, java.sql.Types.DATE);
					}

					if (row2.update_time != null) {
						pstmt_tJDBCOutput_1.setTimestamp(
								12,
								new java.sql.Timestamp(row2.update_time
										.getTime()));
					} else {
						pstmt_tJDBCOutput_1.setNull(12, java.sql.Types.DATE);
					}

					pstmt_tJDBCOutput_1.addBatch();
					batchSizeCounter_tJDBCOutput_1++;
					nb_line_tJDBCOutput_1++;

					if (!whetherReject_tJDBCOutput_1) {
					}
					if ((batchSize_tJDBCOutput_1 > 0)
							&& (batchSize_tJDBCOutput_1 <= batchSizeCounter_tJDBCOutput_1)) {
						int[] status_tJDBCOutput_1 = null;
						int countSum_tJDBCOutput_1 = 0;
						try {
							batchSizeCounter_tJDBCOutput_1 = 0;
							status_tJDBCOutput_1 = pstmt_tJDBCOutput_1
									.executeBatch();
							for (int countEach_tJDBCOutput_1 : status_tJDBCOutput_1) {
								countSum_tJDBCOutput_1 += (countEach_tJDBCOutput_1 < 0 ? 0
										: countEach_tJDBCOutput_1);
							}
						} catch (java.sql.BatchUpdateException e) {
							throw (e);
						}
						try {
							tmp_batchUpdateCount_tJDBCOutput_1 = pstmt_tJDBCOutput_1
									.getUpdateCount();
						} catch (java.sql.SQLException e) {
							System.err.println(e.getMessage());
						}
						tmp_batchUpdateCount_tJDBCOutput_1 = tmp_batchUpdateCount_tJDBCOutput_1 > countSum_tJDBCOutput_1 ? tmp_batchUpdateCount_tJDBCOutput_1
								: countSum_tJDBCOutput_1;
						insertedCount_tJDBCOutput_1 += tmp_batchUpdateCount_tJDBCOutput_1;
					}

					tos_count_tJDBCOutput_1++;

					/**
					 * [tJDBCOutput_1 main ] stop
					 */

					/**
					 * [tFixedFlowInput_1 end ] start
					 */

					currentComponent = "tFixedFlowInput_1";

				}
				globalMap.put("tFixedFlowInput_1_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_1", true);
				end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_1 end ] stop
				 */

				/**
				 * [tJDBCOutput_1 end ] start
				 */

				currentComponent = "tJDBCOutput_1";

				int[] status_tJDBCOutput_1 = null;
				int countSum_tJDBCOutput_1 = 0;
				try {
					if (pstmt_tJDBCOutput_1 != null
							&& batchSizeCounter_tJDBCOutput_1 > 0) {

						status_tJDBCOutput_1 = pstmt_tJDBCOutput_1
								.executeBatch();

						for (int countEach_tJDBCOutput_1 : status_tJDBCOutput_1) {
							countSum_tJDBCOutput_1 += (countEach_tJDBCOutput_1 < 0 ? 0
									: countEach_tJDBCOutput_1);
						}
					}
				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				if (pstmt_tJDBCOutput_1 != null
						&& batchSizeCounter_tJDBCOutput_1 > 0) {
					try {
						tmp_batchUpdateCount_tJDBCOutput_1 = pstmt_tJDBCOutput_1
								.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tJDBCOutput_1 = tmp_batchUpdateCount_tJDBCOutput_1 > countSum_tJDBCOutput_1 ? tmp_batchUpdateCount_tJDBCOutput_1
							: countSum_tJDBCOutput_1;

					insertedCount_tJDBCOutput_1 += tmp_batchUpdateCount_tJDBCOutput_1;

				}
				if (pstmt_tJDBCOutput_1 != null) {

					pstmt_tJDBCOutput_1.close();

				}

				nb_line_deleted_tJDBCOutput_1 = nb_line_deleted_tJDBCOutput_1
						+ deletedCount_tJDBCOutput_1;
				nb_line_update_tJDBCOutput_1 = nb_line_update_tJDBCOutput_1
						+ updatedCount_tJDBCOutput_1;
				nb_line_inserted_tJDBCOutput_1 = nb_line_inserted_tJDBCOutput_1
						+ insertedCount_tJDBCOutput_1;
				nb_line_rejected_tJDBCOutput_1 = nb_line_rejected_tJDBCOutput_1
						+ rejectedCount_tJDBCOutput_1;

				globalMap.put("tJDBCOutput_1_NB_LINE", nb_line_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_1);
				globalMap.put("tJDBCOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_1);

				ok_Hash.put("tJDBCOutput_1", true);
				end_Hash.put("tJDBCOutput_1", System.currentTimeMillis());

				tFixedFlowInput_3Process(globalMap);

				/**
				 * [tJDBCOutput_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tFixedFlowInput_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tFixedFlowInput_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_1 finally ] start
				 */

				currentComponent = "tFixedFlowInput_1";

				/**
				 * [tFixedFlowInput_1 finally ] stop
				 */

				/**
				 * [tJDBCOutput_1 finally ] start
				 */

				currentComponent = "tJDBCOutput_1";

				/**
				 * [tJDBCOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String content;

		public String getContent() {
			return this.content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("content=" + content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		public String original_uri;

		public String getOriginal_uri() {
			return this.original_uri;
		}

		public String auth_string;

		public String getAuth_string() {
			return this.auth_string;
		}

		public String grant_system;

		public String getGrant_system() {
			return this.grant_system;
		}

		public Boolean valid;

		public Boolean getValid() {
			return this.valid;
		}

		public String md5sum;

		public String getMd5sum() {
			return this.md5sum;
		}

		public Integer content_length;

		public Integer getContent_length() {
			return this.content_length;
		}

		public String content_disposition;

		public String getContent_disposition() {
			return this.content_disposition;
		}

		public String content_type;

		public String getContent_type() {
			return this.content_type;
		}

		public String ref_file_id;

		public String getRef_file_id() {
			return this.ref_file_id;
		}

		public java.util.Date create_time;

		public java.util.Date getCreate_time() {
			return this.create_time;
		}

		public java.util.Date update_time;

		public java.util.Date getUpdate_time() {
			return this.update_time;
		}

		public String tempfolder;

		public String getTempfolder() {
			return this.tempfolder;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.file_id = readString(dis);

					this.original_uri = readString(dis);

					this.auth_string = readString(dis);

					this.grant_system = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valid = null;
					} else {
						this.valid = dis.readBoolean();
					}

					this.md5sum = readString(dis);

					this.content_length = readInteger(dis);

					this.content_disposition = readString(dis);

					this.content_type = readString(dis);

					this.ref_file_id = readString(dis);

					this.create_time = readDate(dis);

					this.update_time = readDate(dis);

					this.tempfolder = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.file_id, dos);

				// String

				writeString(this.original_uri, dos);

				// String

				writeString(this.auth_string, dos);

				// String

				writeString(this.grant_system, dos);

				// Boolean

				if (this.valid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.valid);
				}

				// String

				writeString(this.md5sum, dos);

				// Integer

				writeInteger(this.content_length, dos);

				// String

				writeString(this.content_disposition, dos);

				// String

				writeString(this.content_type, dos);

				// String

				writeString(this.ref_file_id, dos);

				// java.util.Date

				writeDate(this.create_time, dos);

				// java.util.Date

				writeDate(this.update_time, dos);

				// String

				writeString(this.tempfolder, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("file_id=" + file_id);
			sb.append(",original_uri=" + original_uri);
			sb.append(",auth_string=" + auth_string);
			sb.append(",grant_system=" + grant_system);
			sb.append(",valid=" + String.valueOf(valid));
			sb.append(",md5sum=" + md5sum);
			sb.append(",content_length=" + String.valueOf(content_length));
			sb.append(",content_disposition=" + content_disposition);
			sb.append(",content_type=" + content_type);
			sb.append(",ref_file_id=" + ref_file_id);
			sb.append(",create_time=" + String.valueOf(create_time));
			sb.append(",update_time=" + String.valueOf(update_time));
			sb.append(",tempfolder=" + tempfolder);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();
				row5Struct row5 = new row5Struct();

				/**
				 * [pccRbtMQOutput_1 begin ] start
				 */

				ok_Hash.put("pccRbtMQOutput_1", false);
				start_Hash.put("pccRbtMQOutput_1", System.currentTimeMillis());

				currentComponent = "pccRbtMQOutput_1";

				int tos_count_pccRbtMQOutput_1 = 0;

				class BytesLimit65535_pccRbtMQOutput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_pccRbtMQOutput_1().limitLog4jByte();

				final String decryptedPassword_pccRbtMQOutput_1 = context.mq_password;

				// =============== try block handling ==================
				try {
					com.rabbitmq.client.Connection pccRbtMQOutput_1_connection = null;

					// create connection standalone
					// =============== ssl and tls handling ==================
					javax.net.ssl.TrustManager[] pccRbtMQOutput_1_trustManagers = new javax.net.ssl.TrustManager[] { new javax.net.ssl.X509TrustManager() {
						@Override
						public void checkClientTrusted(
								java.security.cert.X509Certificate[] chain,
								String authType)
								throws java.security.cert.CertificateException {
						}

						@Override
						public void checkServerTrusted(
								java.security.cert.X509Certificate[] chain,
								String authType)
								throws java.security.cert.CertificateException {
						}

						@Override
						public java.security.cert.X509Certificate[] getAcceptedIssuers() {
							return null;
						}
					} };
					javax.net.ssl.SSLContext pccRbtMQOutput_1_sslContext = javax.net.ssl.SSLContext
							.getInstance("TLSv1.2");
					pccRbtMQOutput_1_sslContext.init(null,
							pccRbtMQOutput_1_trustManagers, null);

					// =============== create connection factory
					// ==================
					com.rabbitmq.client.ConnectionFactory pccRbtMQOutput_1_factory = new com.rabbitmq.client.ConnectionFactory();
					pccRbtMQOutput_1_factory
							.useSslProtocol(pccRbtMQOutput_1_sslContext);
					pccRbtMQOutput_1_factory
							.setVirtualHost(context.mq_virtualhost);
					pccRbtMQOutput_1_factory.setUsername(context.mq_username);
					pccRbtMQOutput_1_factory
							.setPassword(decryptedPassword_pccRbtMQOutput_1);

					java.util.List<com.rabbitmq.client.Address> pccRbtMQOutput_1_addresses = new ArrayList<>();

					pccRbtMQOutput_1_addresses
							.add(new com.rabbitmq.client.Address(
									context.mq_host_c1, Integer
											.valueOf(context.mq_port_c1)));

					pccRbtMQOutput_1_addresses
							.add(new com.rabbitmq.client.Address(
									context.mq_host_c2, Integer
											.valueOf(context.mq_port_c2)));

					pccRbtMQOutput_1_addresses
							.add(new com.rabbitmq.client.Address(
									context.mq_host_c3, Integer
											.valueOf(context.mq_port_c3)));

					// ============== create rabbitmq connection ==============
					pccRbtMQOutput_1_connection = pccRbtMQOutput_1_factory
							.newConnection(pccRbtMQOutput_1_addresses);

					// =============== create channel ==================
					com.rabbitmq.client.Channel pccRbtMQOutput_1_channel = pccRbtMQOutput_1_connection
							.createChannel();

					// here are main section in _main.javajet
					// for try }

					/**
					 * [pccRbtMQOutput_1 begin ] stop
					 */

					/**
					 * [tJavaRow_1 begin ] start
					 */

					ok_Hash.put("tJavaRow_1", false);
					start_Hash.put("tJavaRow_1", System.currentTimeMillis());

					currentComponent = "tJavaRow_1";

					int tos_count_tJavaRow_1 = 0;

					class BytesLimit65535_tJavaRow_1 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tJavaRow_1().limitLog4jByte();

					int nb_line_tJavaRow_1 = 0;

					/**
					 * [tJavaRow_1 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_3 begin ] start
					 */

					ok_Hash.put("tFixedFlowInput_3", false);
					start_Hash.put("tFixedFlowInput_3",
							System.currentTimeMillis());

					currentComponent = "tFixedFlowInput_3";

					int tos_count_tFixedFlowInput_3 = 0;

					class BytesLimit65535_tFixedFlowInput_3 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tFixedFlowInput_3().limitLog4jByte();

					for (int i_tFixedFlowInput_3 = 0; i_tFixedFlowInput_3 < 1; i_tFixedFlowInput_3++) {

						row10.file_id = ((String) globalMap
								.get("upload1.file_id"));

						row10.original_uri = ((String) globalMap
								.get("upload1.original_uri"));

						row10.auth_string = ((String) globalMap
								.get("upload1.auth_string"));

						row10.grant_system = ((String) globalMap
								.get("upload1.grant_system"));

						row10.valid = false;

						row10.md5sum = "";

						row10.content_length = 0;

						row10.content_disposition = "";

						row10.content_type = "";

						row10.ref_file_id = ((String) globalMap
								.get("upload1.file_id"));

						row10.create_time = new Date();

						row10.update_time = new Date();

						row10.tempfolder = context.mount_folder.trim()
								+ "/"
								+ ((String) globalMap.get("upload1.file_id"))
										.split("-")[1].trim();

						/**
						 * [tFixedFlowInput_3 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_3 main ] start
						 */

						currentComponent = "tFixedFlowInput_3";

						tos_count_tFixedFlowInput_3++;

						/**
						 * [tFixedFlowInput_3 main ] stop
						 */

						/**
						 * [tJavaRow_1 main ] start
						 */

						currentComponent = "tJavaRow_1";

						// gson instance with row structure
						Gson gson = new Gson();
						String jsonStr = gson.toJson(row10);
						// output json string to rabbitMQ component
						row5.content = jsonStr;

						// end

						nb_line_tJavaRow_1++;

						tos_count_tJavaRow_1++;

						/**
						 * [tJavaRow_1 main ] stop
						 */

						/**
						 * [pccRbtMQOutput_1 main ] start
						 */

						currentComponent = "pccRbtMQOutput_1";

						byte[] pccRbtMQOutput_1_contentBytes = null;
						// =============== convert flow data to byte
						// ==================
						pccRbtMQOutput_1_contentBytes = row5.content.getBytes();

						// =============== bind exchange and queue
						// ==================
						pccRbtMQOutput_1_channel.exchangeDeclare(
								context.mq_queuename + "_exchangeName",
								"direct", true, false, null);

						java.util.Map<String, Object> pccRbtMQOutput_1_queueParaMap = new java.util.HashMap<String, Object>();
						pccRbtMQOutput_1_queueParaMap.put("x-queue-type",
								"quorum");
						pccRbtMQOutput_1_channel.queueDeclare(
								context.mq_queuename, true, false, false,
								pccRbtMQOutput_1_queueParaMap);

						// pccRbtMQOutput_1_channel.queueDeclare(context.mq_queuename,
						// true, false, false, null);
						pccRbtMQOutput_1_channel.queueBind(
								context.mq_queuename, context.mq_queuename
										+ "_exchangeName", context.mq_queuename
										+ "_key");
						pccRbtMQOutput_1_channel.confirmSelect();
						// logger

						// =============== publish to rabbitmq server
						// =================
						pccRbtMQOutput_1_channel
								.basicPublish(
										context.mq_queuename + "_exchangeName",
										context.mq_queuename + "_key",
										com.rabbitmq.client.MessageProperties.MINIMAL_PERSISTENT_BASIC,
										pccRbtMQOutput_1_contentBytes);

						// =============== log content size ==================

						// =============== return code process
						// ==================
						if (pccRbtMQOutput_1_channel.waitForConfirms()) {
							System.out.println(new java.util.Date(System
									.currentTimeMillis())
									+ ","
									+ Thread.currentThread().getName()
									+ "==>RabbitMQ waitForConfirms success!");
						}

						tos_count_pccRbtMQOutput_1++;

						/**
						 * [pccRbtMQOutput_1 main ] stop
						 */

						/**
						 * [tFixedFlowInput_3 end ] start
						 */

						currentComponent = "tFixedFlowInput_3";

					}
					globalMap.put("tFixedFlowInput_3_NB_LINE", 1);

					ok_Hash.put("tFixedFlowInput_3", true);
					end_Hash.put("tFixedFlowInput_3",
							System.currentTimeMillis());

					/**
					 * [tFixedFlowInput_3 end ] stop
					 */

					/**
					 * [tJavaRow_1 end ] start
					 */

					currentComponent = "tJavaRow_1";

					globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

					ok_Hash.put("tJavaRow_1", true);
					end_Hash.put("tJavaRow_1", System.currentTimeMillis());

					/**
					 * [tJavaRow_1 end ] stop
					 */

					/**
					 * [pccRbtMQOutput_1 end ] start
					 */

					currentComponent = "pccRbtMQOutput_1";

					// =============== close channel and connection
					// ==================
					pccRbtMQOutput_1_channel.close();

					pccRbtMQOutput_1_connection.close();

				} catch (Exception e) {
					if (false) {
						throw new TalendException(e, "pccRbtMQOutput_1",
								globalMap);
					} else {
						e.printStackTrace();
					}
				}

				ok_Hash.put("pccRbtMQOutput_1", true);
				end_Hash.put("pccRbtMQOutput_1", System.currentTimeMillis());

				/**
				 * [pccRbtMQOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_3 finally ] start
				 */

				currentComponent = "tFixedFlowInput_3";

				/**
				 * [tFixedFlowInput_3 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [pccRbtMQOutput_1 finally ] start
				 */

				currentComponent = "pccRbtMQOutput_1";

				/**
				 * [pccRbtMQOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}

	public static class ok_respStruct implements
			routines.system.IPersistableRow<ok_respStruct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ok_respStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String status_code;

		public String getStatus_code() {
			return this.status_code;
		}

		public String messages;

		public String getMessages() {
			return this.messages;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.status_code = readString(dis);

					this.messages = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status_code, dos);

				// String

				writeString(this.messages, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status_code=" + status_code);
			sb.append(",messages=" + messages);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				ok_respStruct ok_resp = new ok_respStruct();

				/**
				 * [tRESTResponse_5 begin ] start
				 */

				ok_Hash.put("tRESTResponse_5", false);
				start_Hash.put("tRESTResponse_5", System.currentTimeMillis());

				currentComponent = "tRESTResponse_5";

				int tos_count_tRESTResponse_5 = 0;

				class BytesLimit65535_tRESTResponse_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTResponse_5().limitLog4jByte();

				/**
				 * [tRESTResponse_5 begin ] stop
				 */

				/**
				 * [tXMLMap_7 begin ] start
				 */

				ok_Hash.put("tXMLMap_7", false);
				start_Hash.put("tXMLMap_7", System.currentTimeMillis());

				currentComponent = "tXMLMap_7";

				int tos_count_tXMLMap_7 = 0;

				class BytesLimit65535_tXMLMap_7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_7().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_7 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_7__Struct {
				}
				Var__tXMLMap_7__Struct Var__tXMLMap_7 = new Var__tXMLMap_7__Struct();
				// ###############################
				// # Outputs initialization
				ok_respStruct ok_resp_tmp = new ok_respStruct();
				ok_respStruct ok_resp_save = null;
				// ###############################
				int nb_line_tXMLMap_7 = 0;

				XML_API_tXMLMap_7 xml_api_tXMLMap_7 = new XML_API_tXMLMap_7();

				class GenerateDocument_ok_resp {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					String currentValue = null;

					public GenerateDocument_ok_resp() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						generateOk();
						return this.doc;
					}

					// do some work after document has been generated
					private void generateOk() {
						routines.system.NestXMLTool.replaceDefaultNameSpace(
								this.doc.getRootElement(), null);
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin, row7Struct row7,
							Var__tXMLMap_7__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = org.dom4j.DocumentHelper
									.createElement("root");
							doc.add(root);
							subTreeRootParent = root;
							org.dom4j.Element root_0 = null;
							root_0 = root.addElement("STATUS");
							valueMap.put("root_0", "1");
							if (valueMap.get("root_0") != null) {
								routines.system.NestXMLTool.setText(root_0,
										FormatterUtils.format("1", null));
							}
							org.dom4j.Element root_1 = null;
							root_1 = root.addElement("FILE_ID");
							valueMap.put("root_1", row7.file_id);
							if (valueMap.get("root_1") != null) {
								routines.system.NestXMLTool.setText(root_1,
										FormatterUtils.format(row7.file_id,
												null));
							}
							org.dom4j.Element root_2 = null;
							root_2 = root.addElement("RETURN_CODE");
							valueMap.put("root_2", row7.status_code);
							if (valueMap.get("root_2") != null) {
								routines.system.NestXMLTool.setText(root_2,
										FormatterUtils.format(row7.status_code,
												null));
							}
							org.dom4j.Element root_3 = null;
							root_3 = root.addElement("RETURN_MSG");
							valueMap.put("root_3", row7.messages);
							if (valueMap.get("root_3") != null) {
								routines.system.NestXMLTool.setText(root_3,
										FormatterUtils.format(row7.messages,
												null));
							}
							org.dom4j.Element root_4 = null;
							root_4 = root.addElement("CONTENT");
							valueMap.put(
									"root_4",
									((String) globalMap
											.get("tRESTRequest_1_URI_BASE"))
											+ "/" + row7.file_id);
							if (valueMap.get("root_4") != null) {
								routines.system.NestXMLTool
										.setText(
												root_4,
												FormatterUtils.format(
														((String) globalMap
																.get("tRESTRequest_1_URI_BASE"))
																+ "/"
																+ row7.file_id,
														null));
							}
							org.dom4j.Element root_5 = null;
							root_5 = root.addElement("MID_NO");
							valueMap.put("root_5", context.MID_NO);
							if (valueMap.get("root_5") != null) {
								routines.system.NestXMLTool.setText(root_5,
										FormatterUtils.format(context.MID_NO,
												null));
							}
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
					}
				}

				/**
				 * [tXMLMap_7 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_5 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_5", false);
				start_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_5";

				int tos_count_tFixedFlowInput_5 = 0;

				class BytesLimit65535_tFixedFlowInput_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_5().limitLog4jByte();

				for (int i_tFixedFlowInput_5 = 0; i_tFixedFlowInput_5 < 1; i_tFixedFlowInput_5++) {

					row7.status_code = "201";

					row7.messages = "file mapping created";

					row7.file_id = ((String) globalMap.get("upload1.file_id"));

					/**
					 * [tFixedFlowInput_5 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_5 main ] start
					 */

					currentComponent = "tFixedFlowInput_5";

					tos_count_tFixedFlowInput_5++;

					/**
					 * [tFixedFlowInput_5 main ] stop
					 */

					/**
					 * [tXMLMap_7 main ] start
					 */

					currentComponent = "tXMLMap_7";

					boolean rejectedInnerJoin_tXMLMap_7 = false;
					boolean rejectedDocInnerJoin_tXMLMap_7 = false;
					boolean mainRowRejected_tXMLMap_7 = false;
					boolean isMatchDocRowtXMLMap_7 = false;

					GenerateDocument_ok_resp gen_Doc_ok_resp_tXMLMap_7 = new GenerateDocument_ok_resp();
					ok_resp_tmp.body = null;

					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tXMLMap_7__Struct Var = Var__tXMLMap_7;
						// ###############################
						// # Output tables

						ok_resp = null;

						// # Output table : 'ok_resp'

						gen_Doc_ok_resp_tXMLMap_7.generateElements(
								rejectedDocInnerJoin_tXMLMap_7, row7, Var);

						if (ok_resp_tmp.body == null) {
							ok_resp_tmp.body = new routines.system.Document();
							ok_resp_tmp.body
									.setDocument(gen_Doc_ok_resp_tXMLMap_7
											.getDocument());
						}

						ok_resp = ok_resp_tmp;
						ok_resp_save = ok_resp_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tXMLMap_7 = false;

					tos_count_tXMLMap_7++;

					/**
					 * [tXMLMap_7 main ] stop
					 */
					// Start of branch "ok_resp"
					if (ok_resp != null) {

						/**
						 * [tRESTResponse_5 main ] start
						 */

						currentComponent = "tRESTResponse_5";

						java.io.OutputStream outputStream_tRESTResponse_5 = (java.io.OutputStream) globalMap
								.get("restResponseStream");
						boolean responseAlreadySent_tRESTResponse_5 = globalMap
								.containsKey("restResponse");

						if (null == outputStream_tRESTResponse_5
								&& responseAlreadySent_tRESTResponse_5) {
							throw new RuntimeException(
									"Rest response already sent.");
						} else if (!globalMap.containsKey("restRequest")) {
							throw new RuntimeException(
									"Not received rest request yet.");
						} else {
							Integer restProviderStatusCode_tRESTResponse_5 = 201;

							Object restProviderResponse_tRESTResponse_5 = null;
							if (null != ok_resp.body) {
								restProviderResponse_tRESTResponse_5 = ok_resp.body
										.getDocument();
							}

							java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_5 = new java.util.TreeMap<String, String>(
									String.CASE_INSENSITIVE_ORDER);

							java.util.Map<String, Object> restRequest_tRESTResponse_5 = (java.util.Map<String, Object>) globalMap
									.get("restRequest");
							org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_5 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_5
									.get("MESSAGE_CONTEXT");

							if (null == outputStream_tRESTResponse_5) {
								java.util.Map<String, Object> restResponse_tRESTResponse_5 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_5.put("BODY",
										restProviderResponse_tRESTResponse_5);
								restResponse_tRESTResponse_5.put("STATUS",
										restProviderStatusCode_tRESTResponse_5);
								restResponse_tRESTResponse_5
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_5);
								restResponse_tRESTResponse_5.put(
										"drop.json.root.element",
										Boolean.valueOf(true));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_5);

							} else {

								javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_5 = null;
								if (!responseAlreadySent_tRESTResponse_5) {
									org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
													true);

									messageContext_tRESTResponse_5
											.put(org.apache.cxf.message.Message.RESPONSE_CODE,
													restProviderStatusCode_tRESTResponse_5);
									javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_5 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
									for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_5
											.entrySet()) {
										headersMultivaluedMap_tRESTResponse_5
												.putSingle(multivaluedHeader
														.getKey(),
														multivaluedHeader
																.getValue());
									}
									messageContext_tRESTResponse_5
											.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
													headersMultivaluedMap_tRESTResponse_5);

									// String
									// responseContentType_tRESTResponse_5 =
									// (String)
									// messageContext_tRESTResponse_5.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									String responseContentType_tRESTResponse_5 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									if (null == responseContentType_tRESTResponse_5) {
										// this should not be needed, just in
										// case. set it to the first value in
										// the sorted list returned from
										// HttpHeaders
										responseMediaType_tRESTResponse_5 = messageContext_tRESTResponse_5
												.getHttpHeaders()
												.getAcceptableMediaTypes()
												.get(0);
									} else {
										responseMediaType_tRESTResponse_5 = org.apache.cxf.jaxrs.utils.JAXRSUtils
												.toMediaType(responseContentType_tRESTResponse_5);
									}
									globalMap.put("restResponseMediaType",
											responseMediaType_tRESTResponse_5);

									String responseMediaSubType_tRESTResponse_5 = responseMediaType_tRESTResponse_5
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_5
											.equals("xml")
											|| responseMediaSubType_tRESTResponse_5
													.endsWith("+xml")) {
										outputStream_tRESTResponse_5
												.write("<wrapper>".getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"</wrapper>");
									}
									if (responseMediaSubType_tRESTResponse_5
											.equals("json")
											|| responseMediaSubType_tRESTResponse_5
													.endsWith("+json")) {
										outputStream_tRESTResponse_5.write("["
												.getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"]");
									}

									globalMap.put("restResponse", true);
								} else {
									responseMediaType_tRESTResponse_5 = (javax.ws.rs.core.MediaType) globalMap
											.get("restResponseMediaType");
								}

								if (null != restProviderResponse_tRESTResponse_5) {
									String responseMediaSubType_tRESTResponse_5 = responseMediaType_tRESTResponse_5
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_5
											.equals("json")
											|| responseMediaSubType_tRESTResponse_5
													.endsWith("+json")) {
										if (globalMap
												.containsKey("restResponseJsonStarted")) {
											outputStream_tRESTResponse_5
													.write(",".getBytes());
										} else {
											globalMap.put(
													"restResponseJsonStarted",
													true);
										}
									}

									Class<? extends Object> responseBodyClass_tRESTResponse_5 = restProviderResponse_tRESTResponse_5
											.getClass();
									javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_5 = messageContext_tRESTResponse_5
											.getProviders();
									javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_5 = messageBodyProviders_tRESTResponse_5
											.getMessageBodyWriter(
													responseBodyClass_tRESTResponse_5,
													responseBodyClass_tRESTResponse_5,
													null,
													responseMediaType_tRESTResponse_5);
									messageBodyWriter_tRESTResponse_5
											.writeTo(
													restProviderResponse_tRESTResponse_5,
													responseBodyClass_tRESTResponse_5,
													responseBodyClass_tRESTResponse_5,
													new java.lang.annotation.Annotation[] {},
													responseMediaType_tRESTResponse_5,
													null,
													outputStream_tRESTResponse_5);
								}
								// initial variant
								// outputStream_tRESTResponse_5.write(String.valueOf(restProviderResponse_tRESTResponse_5).getBytes());
								outputStream_tRESTResponse_5.flush();
							}
						}

						tos_count_tRESTResponse_5++;

						/**
						 * [tRESTResponse_5 main ] stop
						 */

					} // End of branch "ok_resp"

					/**
					 * [tFixedFlowInput_5 end ] start
					 */

					currentComponent = "tFixedFlowInput_5";

				}
				globalMap.put("tFixedFlowInput_5_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_5", true);
				end_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_5 end ] stop
				 */

				/**
				 * [tXMLMap_7 end ] start
				 */

				currentComponent = "tXMLMap_7";

				ok_Hash.put("tXMLMap_7", true);
				end_Hash.put("tXMLMap_7", System.currentTimeMillis());

				/**
				 * [tXMLMap_7 end ] stop
				 */

				/**
				 * [tRESTResponse_5 end ] start
				 */

				currentComponent = "tRESTResponse_5";

				ok_Hash.put("tRESTResponse_5", true);
				end_Hash.put("tRESTResponse_5", System.currentTimeMillis());

				/**
				 * [tRESTResponse_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_5 finally ] start
				 */

				currentComponent = "tFixedFlowInput_5";

				/**
				 * [tFixedFlowInput_5 finally ] stop
				 */

				/**
				 * [tXMLMap_7 finally ] start
				 */

				currentComponent = "tXMLMap_7";

				/**
				 * [tXMLMap_7 finally ] stop
				 */

				/**
				 * [tRESTResponse_5 finally ] start
				 */

				currentComponent = "tRESTResponse_5";

				/**
				 * [tRESTResponse_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 1);
	}

	public static class no500_1Struct implements
			routines.system.IPersistableRow<no500_1Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(no500_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String status_code;

		public String getStatus_code() {
			return this.status_code;
		}

		public String status_message;

		public String getStatus_message() {
			return this.status_message;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.status_code = readString(dis);

					this.status_message = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status_code, dos);

				// String

				writeString(this.status_message, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status_code=" + status_code);
			sb.append(",status_message=" + status_message);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();
				no500_1Struct no500_1 = new no500_1Struct();

				/**
				 * [tRESTResponse_6 begin ] start
				 */

				ok_Hash.put("tRESTResponse_6", false);
				start_Hash.put("tRESTResponse_6", System.currentTimeMillis());

				currentComponent = "tRESTResponse_6";

				int tos_count_tRESTResponse_6 = 0;

				class BytesLimit65535_tRESTResponse_6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTResponse_6().limitLog4jByte();

				/**
				 * [tRESTResponse_6 begin ] stop
				 */

				/**
				 * [tXMLMap_8 begin ] start
				 */

				ok_Hash.put("tXMLMap_8", false);
				start_Hash.put("tXMLMap_8", System.currentTimeMillis());

				currentComponent = "tXMLMap_8";

				int tos_count_tXMLMap_8 = 0;

				class BytesLimit65535_tXMLMap_8 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_8().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_8 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_8__Struct {
				}
				Var__tXMLMap_8__Struct Var__tXMLMap_8 = new Var__tXMLMap_8__Struct();
				// ###############################
				// # Outputs initialization
				no500_1Struct no500_1_tmp = new no500_1Struct();
				no500_1Struct no500_1_save = null;
				// ###############################
				int nb_line_tXMLMap_8 = 0;

				XML_API_tXMLMap_8 xml_api_tXMLMap_8 = new XML_API_tXMLMap_8();

				class GenerateDocument_no500_1 {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					String currentValue = null;

					public GenerateDocument_no500_1() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						generateOk();
						return this.doc;
					}

					// do some work after document has been generated
					private void generateOk() {
						routines.system.NestXMLTool.replaceDefaultNameSpace(
								this.doc.getRootElement(), null);
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin,
							row13Struct row13, Var__tXMLMap_8__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = org.dom4j.DocumentHelper
									.createElement("root");
							doc.add(root);
							subTreeRootParent = root;
							org.dom4j.Element root_0 = null;
							root_0 = root.addElement("STATUS");
							valueMap.put("root_0", "0");
							if (valueMap.get("root_0") != null) {
								routines.system.NestXMLTool.setText(root_0,
										FormatterUtils.format("0", null));
							}
							org.dom4j.Element root_1 = null;
							root_1 = root.addElement("FILE_ID");
							valueMap.put("root_1", row13.file_id);
							if (valueMap.get("root_1") != null) {
								routines.system.NestXMLTool.setText(root_1,
										FormatterUtils.format(row13.file_id,
												null));
							}
							org.dom4j.Element root_2 = null;
							root_2 = root.addElement("RETURN_CODE");
							valueMap.put("root_2", row13.status_code);
							if (valueMap.get("root_2") != null) {
								routines.system.NestXMLTool.setText(root_2,
										FormatterUtils.format(
												row13.status_code, null));
							}
							org.dom4j.Element root_3 = null;
							root_3 = root.addElement("RETURN_MSG");
							valueMap.put("root_3", row13.status_message);
							if (valueMap.get("root_3") != null) {
								routines.system.NestXMLTool.setText(root_3,
										FormatterUtils.format(
												row13.status_message, null));
							}
							org.dom4j.Element root_4 = null;
							root_4 = root.addElement("CONTENT");
							valueMap.put("root_4", "");
							if (valueMap.get("root_4") != null) {
								routines.system.NestXMLTool.setText(root_4,
										FormatterUtils.format("", null));
							}
							org.dom4j.Element root_5 = null;
							root_5 = root.addElement("MID_NO");
							valueMap.put("root_5", context.MID_NO);
							if (valueMap.get("root_5") != null) {
								routines.system.NestXMLTool.setText(root_5,
										FormatterUtils.format(context.MID_NO,
												null));
							}
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
					}
				}

				/**
				 * [tXMLMap_8 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_6 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_6", false);
				start_Hash.put("tFixedFlowInput_6", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_6";

				int tos_count_tFixedFlowInput_6 = 0;

				class BytesLimit65535_tFixedFlowInput_6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_6().limitLog4jByte();

				for (int i_tFixedFlowInput_6 = 0; i_tFixedFlowInput_6 < 1; i_tFixedFlowInput_6++) {

					row13.status_code = "500";

					row13.status_message = "File mapping create failed";

					row13.file_id = ((String) globalMap.get("upload1.file_id"));

					/**
					 * [tFixedFlowInput_6 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_6 main ] start
					 */

					currentComponent = "tFixedFlowInput_6";

					tos_count_tFixedFlowInput_6++;

					/**
					 * [tFixedFlowInput_6 main ] stop
					 */

					/**
					 * [tXMLMap_8 main ] start
					 */

					currentComponent = "tXMLMap_8";

					boolean rejectedInnerJoin_tXMLMap_8 = false;
					boolean rejectedDocInnerJoin_tXMLMap_8 = false;
					boolean mainRowRejected_tXMLMap_8 = false;
					boolean isMatchDocRowtXMLMap_8 = false;

					GenerateDocument_no500_1 gen_Doc_no500_1_tXMLMap_8 = new GenerateDocument_no500_1();
					no500_1_tmp.body = null;

					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tXMLMap_8__Struct Var = Var__tXMLMap_8;
						// ###############################
						// # Output tables

						no500_1 = null;

						// # Output table : 'no500_1'

						gen_Doc_no500_1_tXMLMap_8.generateElements(
								rejectedDocInnerJoin_tXMLMap_8, row13, Var);

						if (no500_1_tmp.body == null) {
							no500_1_tmp.body = new routines.system.Document();
							no500_1_tmp.body
									.setDocument(gen_Doc_no500_1_tXMLMap_8
											.getDocument());
						}

						no500_1 = no500_1_tmp;
						no500_1_save = no500_1_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tXMLMap_8 = false;

					tos_count_tXMLMap_8++;

					/**
					 * [tXMLMap_8 main ] stop
					 */
					// Start of branch "no500_1"
					if (no500_1 != null) {

						/**
						 * [tRESTResponse_6 main ] start
						 */

						currentComponent = "tRESTResponse_6";

						java.io.OutputStream outputStream_tRESTResponse_6 = (java.io.OutputStream) globalMap
								.get("restResponseStream");
						boolean responseAlreadySent_tRESTResponse_6 = globalMap
								.containsKey("restResponse");

						if (null == outputStream_tRESTResponse_6
								&& responseAlreadySent_tRESTResponse_6) {
							throw new RuntimeException(
									"Rest response already sent.");
						} else if (!globalMap.containsKey("restRequest")) {
							throw new RuntimeException(
									"Not received rest request yet.");
						} else {
							Integer restProviderStatusCode_tRESTResponse_6 = 500;

							Object restProviderResponse_tRESTResponse_6 = null;
							if (null != no500_1.body) {
								restProviderResponse_tRESTResponse_6 = no500_1.body
										.getDocument();
							}

							java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_6 = new java.util.TreeMap<String, String>(
									String.CASE_INSENSITIVE_ORDER);

							java.util.Map<String, Object> restRequest_tRESTResponse_6 = (java.util.Map<String, Object>) globalMap
									.get("restRequest");
							org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_6 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_6
									.get("MESSAGE_CONTEXT");

							if (null == outputStream_tRESTResponse_6) {
								java.util.Map<String, Object> restResponse_tRESTResponse_6 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_6.put("BODY",
										restProviderResponse_tRESTResponse_6);
								restResponse_tRESTResponse_6.put("STATUS",
										restProviderStatusCode_tRESTResponse_6);
								restResponse_tRESTResponse_6
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_6);
								restResponse_tRESTResponse_6.put(
										"drop.json.root.element",
										Boolean.valueOf(true));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_6);

							} else {

								javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_6 = null;
								if (!responseAlreadySent_tRESTResponse_6) {
									org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
													true);

									messageContext_tRESTResponse_6
											.put(org.apache.cxf.message.Message.RESPONSE_CODE,
													restProviderStatusCode_tRESTResponse_6);
									javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_6 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
									for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_6
											.entrySet()) {
										headersMultivaluedMap_tRESTResponse_6
												.putSingle(multivaluedHeader
														.getKey(),
														multivaluedHeader
																.getValue());
									}
									messageContext_tRESTResponse_6
											.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
													headersMultivaluedMap_tRESTResponse_6);

									// String
									// responseContentType_tRESTResponse_6 =
									// (String)
									// messageContext_tRESTResponse_6.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									String responseContentType_tRESTResponse_6 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									if (null == responseContentType_tRESTResponse_6) {
										// this should not be needed, just in
										// case. set it to the first value in
										// the sorted list returned from
										// HttpHeaders
										responseMediaType_tRESTResponse_6 = messageContext_tRESTResponse_6
												.getHttpHeaders()
												.getAcceptableMediaTypes()
												.get(0);
									} else {
										responseMediaType_tRESTResponse_6 = org.apache.cxf.jaxrs.utils.JAXRSUtils
												.toMediaType(responseContentType_tRESTResponse_6);
									}
									globalMap.put("restResponseMediaType",
											responseMediaType_tRESTResponse_6);

									String responseMediaSubType_tRESTResponse_6 = responseMediaType_tRESTResponse_6
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_6
											.equals("xml")
											|| responseMediaSubType_tRESTResponse_6
													.endsWith("+xml")) {
										outputStream_tRESTResponse_6
												.write("<wrapper>".getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"</wrapper>");
									}
									if (responseMediaSubType_tRESTResponse_6
											.equals("json")
											|| responseMediaSubType_tRESTResponse_6
													.endsWith("+json")) {
										outputStream_tRESTResponse_6.write("["
												.getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"]");
									}

									globalMap.put("restResponse", true);
								} else {
									responseMediaType_tRESTResponse_6 = (javax.ws.rs.core.MediaType) globalMap
											.get("restResponseMediaType");
								}

								if (null != restProviderResponse_tRESTResponse_6) {
									String responseMediaSubType_tRESTResponse_6 = responseMediaType_tRESTResponse_6
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_6
											.equals("json")
											|| responseMediaSubType_tRESTResponse_6
													.endsWith("+json")) {
										if (globalMap
												.containsKey("restResponseJsonStarted")) {
											outputStream_tRESTResponse_6
													.write(",".getBytes());
										} else {
											globalMap.put(
													"restResponseJsonStarted",
													true);
										}
									}

									Class<? extends Object> responseBodyClass_tRESTResponse_6 = restProviderResponse_tRESTResponse_6
											.getClass();
									javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_6 = messageContext_tRESTResponse_6
											.getProviders();
									javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_6 = messageBodyProviders_tRESTResponse_6
											.getMessageBodyWriter(
													responseBodyClass_tRESTResponse_6,
													responseBodyClass_tRESTResponse_6,
													null,
													responseMediaType_tRESTResponse_6);
									messageBodyWriter_tRESTResponse_6
											.writeTo(
													restProviderResponse_tRESTResponse_6,
													responseBodyClass_tRESTResponse_6,
													responseBodyClass_tRESTResponse_6,
													new java.lang.annotation.Annotation[] {},
													responseMediaType_tRESTResponse_6,
													null,
													outputStream_tRESTResponse_6);
								}
								// initial variant
								// outputStream_tRESTResponse_6.write(String.valueOf(restProviderResponse_tRESTResponse_6).getBytes());
								outputStream_tRESTResponse_6.flush();
							}
						}

						tos_count_tRESTResponse_6++;

						/**
						 * [tRESTResponse_6 main ] stop
						 */

					} // End of branch "no500_1"

					/**
					 * [tFixedFlowInput_6 end ] start
					 */

					currentComponent = "tFixedFlowInput_6";

				}
				globalMap.put("tFixedFlowInput_6_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_6", true);
				end_Hash.put("tFixedFlowInput_6", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_6 end ] stop
				 */

				/**
				 * [tXMLMap_8 end ] start
				 */

				currentComponent = "tXMLMap_8";

				ok_Hash.put("tXMLMap_8", true);
				end_Hash.put("tXMLMap_8", System.currentTimeMillis());

				/**
				 * [tXMLMap_8 end ] stop
				 */

				/**
				 * [tRESTResponse_6 end ] start
				 */

				currentComponent = "tRESTResponse_6";

				ok_Hash.put("tRESTResponse_6", true);
				end_Hash.put("tRESTResponse_6", System.currentTimeMillis());

				/**
				 * [tRESTResponse_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_6 finally ] start
				 */

				currentComponent = "tFixedFlowInput_6";

				/**
				 * [tFixedFlowInput_6 finally ] stop
				 */

				/**
				 * [tXMLMap_8 finally ] start
				 */

				currentComponent = "tXMLMap_8";

				/**
				 * [tXMLMap_8 finally ] stop
				 */

				/**
				 * [tRESTResponse_6 finally ] start
				 */

				currentComponent = "tRESTResponse_6";

				/**
				 * [tRESTResponse_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_6_SUBPROCESS_STATE", 1);
	}

	public static class e401_3Struct implements
			routines.system.IPersistableRow<e401_3Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(e401_3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String status_code;

		public String getStatus_code() {
			return this.status_code;
		}

		public String status_message;

		public String getStatus_message() {
			return this.status_message;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.status_code = readString(dis);

					this.status_message = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status_code, dos);

				// String

				writeString(this.status_message, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status_code=" + status_code);
			sb.append(",status_message=" + status_message);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_14Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row20Struct row20 = new row20Struct();
				e401_3Struct e401_3 = new e401_3Struct();

				/**
				 * [tRESTResponse_13 begin ] start
				 */

				ok_Hash.put("tRESTResponse_13", false);
				start_Hash.put("tRESTResponse_13", System.currentTimeMillis());

				currentComponent = "tRESTResponse_13";

				int tos_count_tRESTResponse_13 = 0;

				class BytesLimit65535_tRESTResponse_13 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTResponse_13().limitLog4jByte();

				/**
				 * [tRESTResponse_13 begin ] stop
				 */

				/**
				 * [tXMLMap_15 begin ] start
				 */

				ok_Hash.put("tXMLMap_15", false);
				start_Hash.put("tXMLMap_15", System.currentTimeMillis());

				currentComponent = "tXMLMap_15";

				int tos_count_tXMLMap_15 = 0;

				class BytesLimit65535_tXMLMap_15 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_15().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_15 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_15__Struct {
				}
				Var__tXMLMap_15__Struct Var__tXMLMap_15 = new Var__tXMLMap_15__Struct();
				// ###############################
				// # Outputs initialization
				e401_3Struct e401_3_tmp = new e401_3Struct();
				e401_3Struct e401_3_save = null;
				// ###############################
				int nb_line_tXMLMap_15 = 0;

				XML_API_tXMLMap_15 xml_api_tXMLMap_15 = new XML_API_tXMLMap_15();

				class GenerateDocument_e401_3 {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					String currentValue = null;

					public GenerateDocument_e401_3() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						generateOk();
						return this.doc;
					}

					// do some work after document has been generated
					private void generateOk() {
						routines.system.NestXMLTool.replaceDefaultNameSpace(
								this.doc.getRootElement(), null);
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin,
							row20Struct row20, Var__tXMLMap_15__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = org.dom4j.DocumentHelper
									.createElement("root");
							doc.add(root);
							subTreeRootParent = root;
							org.dom4j.Element root_0 = null;
							root_0 = root.addElement("STATUS");
							valueMap.put("root_0", "0");
							if (valueMap.get("root_0") != null) {
								routines.system.NestXMLTool.setText(root_0,
										FormatterUtils.format("0", null));
							}
							org.dom4j.Element root_1 = null;
							root_1 = root.addElement("FILE_ID");
							valueMap.put("root_1", row20.file_id);
							if (valueMap.get("root_1") != null) {
								routines.system.NestXMLTool.setText(root_1,
										FormatterUtils.format(row20.file_id,
												null));
							}
							org.dom4j.Element root_2 = null;
							root_2 = root.addElement("RETURN_CODE");
							valueMap.put("root_2", row20.status_code);
							if (valueMap.get("root_2") != null) {
								routines.system.NestXMLTool.setText(root_2,
										FormatterUtils.format(
												row20.status_code, null));
							}
							org.dom4j.Element root_3 = null;
							root_3 = root.addElement("RETURN_MSG");
							valueMap.put("root_3", row20.status_message);
							if (valueMap.get("root_3") != null) {
								routines.system.NestXMLTool.setText(root_3,
										FormatterUtils.format(
												row20.status_message, null));
							}
							org.dom4j.Element root_4 = null;
							root_4 = root.addElement("CONTENT");
							valueMap.put("root_4", "file_id : " + row20.file_id);
							if (valueMap.get("root_4") != null) {
								routines.system.NestXMLTool.setText(
										root_4,
										FormatterUtils.format("file_id : "
												+ row20.file_id, null));
							}
							org.dom4j.Element root_5 = null;
							root_5 = root.addElement("MID_NO");
							valueMap.put("root_5", context.MID_NO);
							if (valueMap.get("root_5") != null) {
								routines.system.NestXMLTool.setText(root_5,
										FormatterUtils.format(context.MID_NO,
												null));
							}
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
					}
				}

				/**
				 * [tXMLMap_15 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_14 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_14", false);
				start_Hash
						.put("tFixedFlowInput_14", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_14";

				int tos_count_tFixedFlowInput_14 = 0;

				class BytesLimit65535_tFixedFlowInput_14 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_14().limitLog4jByte();

				for (int i_tFixedFlowInput_14 = 0; i_tFixedFlowInput_14 < 1; i_tFixedFlowInput_14++) {

					row20.status_code = "401";

					row20.status_message = "Authenication fail";

					row20.file_id = ((String) globalMap.get("upload1.file_id"));

					/**
					 * [tFixedFlowInput_14 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_14 main ] start
					 */

					currentComponent = "tFixedFlowInput_14";

					tos_count_tFixedFlowInput_14++;

					/**
					 * [tFixedFlowInput_14 main ] stop
					 */

					/**
					 * [tXMLMap_15 main ] start
					 */

					currentComponent = "tXMLMap_15";

					boolean rejectedInnerJoin_tXMLMap_15 = false;
					boolean rejectedDocInnerJoin_tXMLMap_15 = false;
					boolean mainRowRejected_tXMLMap_15 = false;
					boolean isMatchDocRowtXMLMap_15 = false;

					GenerateDocument_e401_3 gen_Doc_e401_3_tXMLMap_15 = new GenerateDocument_e401_3();
					e401_3_tmp.body = null;

					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tXMLMap_15__Struct Var = Var__tXMLMap_15;
						// ###############################
						// # Output tables

						e401_3 = null;

						// # Output table : 'e401_3'

						gen_Doc_e401_3_tXMLMap_15.generateElements(
								rejectedDocInnerJoin_tXMLMap_15, row20, Var);

						if (e401_3_tmp.body == null) {
							e401_3_tmp.body = new routines.system.Document();
							e401_3_tmp.body
									.setDocument(gen_Doc_e401_3_tXMLMap_15
											.getDocument());
						}

						e401_3 = e401_3_tmp;
						e401_3_save = e401_3_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tXMLMap_15 = false;

					tos_count_tXMLMap_15++;

					/**
					 * [tXMLMap_15 main ] stop
					 */
					// Start of branch "e401_3"
					if (e401_3 != null) {

						/**
						 * [tRESTResponse_13 main ] start
						 */

						currentComponent = "tRESTResponse_13";

						java.io.OutputStream outputStream_tRESTResponse_13 = (java.io.OutputStream) globalMap
								.get("restResponseStream");
						boolean responseAlreadySent_tRESTResponse_13 = globalMap
								.containsKey("restResponse");

						if (null == outputStream_tRESTResponse_13
								&& responseAlreadySent_tRESTResponse_13) {
							throw new RuntimeException(
									"Rest response already sent.");
						} else if (!globalMap.containsKey("restRequest")) {
							throw new RuntimeException(
									"Not received rest request yet.");
						} else {
							Integer restProviderStatusCode_tRESTResponse_13 = 401;

							Object restProviderResponse_tRESTResponse_13 = null;
							if (null != e401_3.body) {
								restProviderResponse_tRESTResponse_13 = e401_3.body
										.getDocument();
							}

							java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_13 = new java.util.TreeMap<String, String>(
									String.CASE_INSENSITIVE_ORDER);

							java.util.Map<String, Object> restRequest_tRESTResponse_13 = (java.util.Map<String, Object>) globalMap
									.get("restRequest");
							org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_13 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_13
									.get("MESSAGE_CONTEXT");

							if (null == outputStream_tRESTResponse_13) {
								java.util.Map<String, Object> restResponse_tRESTResponse_13 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_13.put("BODY",
										restProviderResponse_tRESTResponse_13);
								restResponse_tRESTResponse_13
										.put("STATUS",
												restProviderStatusCode_tRESTResponse_13);
								restResponse_tRESTResponse_13
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_13);
								restResponse_tRESTResponse_13.put(
										"drop.json.root.element",
										Boolean.valueOf(true));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_13);

							} else {

								javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_13 = null;
								if (!responseAlreadySent_tRESTResponse_13) {
									org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
													true);

									messageContext_tRESTResponse_13
											.put(org.apache.cxf.message.Message.RESPONSE_CODE,
													restProviderStatusCode_tRESTResponse_13);
									javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_13 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
									for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_13
											.entrySet()) {
										headersMultivaluedMap_tRESTResponse_13
												.putSingle(multivaluedHeader
														.getKey(),
														multivaluedHeader
																.getValue());
									}
									messageContext_tRESTResponse_13
											.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
													headersMultivaluedMap_tRESTResponse_13);

									// String
									// responseContentType_tRESTResponse_13 =
									// (String)
									// messageContext_tRESTResponse_13.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									String responseContentType_tRESTResponse_13 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									if (null == responseContentType_tRESTResponse_13) {
										// this should not be needed, just in
										// case. set it to the first value in
										// the sorted list returned from
										// HttpHeaders
										responseMediaType_tRESTResponse_13 = messageContext_tRESTResponse_13
												.getHttpHeaders()
												.getAcceptableMediaTypes()
												.get(0);
									} else {
										responseMediaType_tRESTResponse_13 = org.apache.cxf.jaxrs.utils.JAXRSUtils
												.toMediaType(responseContentType_tRESTResponse_13);
									}
									globalMap.put("restResponseMediaType",
											responseMediaType_tRESTResponse_13);

									String responseMediaSubType_tRESTResponse_13 = responseMediaType_tRESTResponse_13
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_13
											.equals("xml")
											|| responseMediaSubType_tRESTResponse_13
													.endsWith("+xml")) {
										outputStream_tRESTResponse_13
												.write("<wrapper>".getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"</wrapper>");
									}
									if (responseMediaSubType_tRESTResponse_13
											.equals("json")
											|| responseMediaSubType_tRESTResponse_13
													.endsWith("+json")) {
										outputStream_tRESTResponse_13.write("["
												.getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"]");
									}

									globalMap.put("restResponse", true);
								} else {
									responseMediaType_tRESTResponse_13 = (javax.ws.rs.core.MediaType) globalMap
											.get("restResponseMediaType");
								}

								if (null != restProviderResponse_tRESTResponse_13) {
									String responseMediaSubType_tRESTResponse_13 = responseMediaType_tRESTResponse_13
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_13
											.equals("json")
											|| responseMediaSubType_tRESTResponse_13
													.endsWith("+json")) {
										if (globalMap
												.containsKey("restResponseJsonStarted")) {
											outputStream_tRESTResponse_13
													.write(",".getBytes());
										} else {
											globalMap.put(
													"restResponseJsonStarted",
													true);
										}
									}

									Class<? extends Object> responseBodyClass_tRESTResponse_13 = restProviderResponse_tRESTResponse_13
											.getClass();
									javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_13 = messageContext_tRESTResponse_13
											.getProviders();
									javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_13 = messageBodyProviders_tRESTResponse_13
											.getMessageBodyWriter(
													responseBodyClass_tRESTResponse_13,
													responseBodyClass_tRESTResponse_13,
													null,
													responseMediaType_tRESTResponse_13);
									messageBodyWriter_tRESTResponse_13
											.writeTo(
													restProviderResponse_tRESTResponse_13,
													responseBodyClass_tRESTResponse_13,
													responseBodyClass_tRESTResponse_13,
													new java.lang.annotation.Annotation[] {},
													responseMediaType_tRESTResponse_13,
													null,
													outputStream_tRESTResponse_13);
								}
								// initial variant
								// outputStream_tRESTResponse_13.write(String.valueOf(restProviderResponse_tRESTResponse_13).getBytes());
								outputStream_tRESTResponse_13.flush();
							}
						}

						tos_count_tRESTResponse_13++;

						/**
						 * [tRESTResponse_13 main ] stop
						 */

					} // End of branch "e401_3"

					/**
					 * [tFixedFlowInput_14 end ] start
					 */

					currentComponent = "tFixedFlowInput_14";

				}
				globalMap.put("tFixedFlowInput_14_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_14", true);
				end_Hash.put("tFixedFlowInput_14", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_14 end ] stop
				 */

				/**
				 * [tXMLMap_15 end ] start
				 */

				currentComponent = "tXMLMap_15";

				ok_Hash.put("tXMLMap_15", true);
				end_Hash.put("tXMLMap_15", System.currentTimeMillis());

				/**
				 * [tXMLMap_15 end ] stop
				 */

				/**
				 * [tRESTResponse_13 end ] start
				 */

				currentComponent = "tRESTResponse_13";

				ok_Hash.put("tRESTResponse_13", true);
				end_Hash.put("tRESTResponse_13", System.currentTimeMillis());

				/**
				 * [tRESTResponse_13 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_14 finally ] start
				 */

				currentComponent = "tFixedFlowInput_14";

				/**
				 * [tFixedFlowInput_14 finally ] stop
				 */

				/**
				 * [tXMLMap_15 finally ] start
				 */

				currentComponent = "tXMLMap_15";

				/**
				 * [tXMLMap_15 finally ] stop
				 */

				/**
				 * [tRESTResponse_13 finally ] start
				 */

				currentComponent = "tRESTResponse_13";

				/**
				 * [tRESTResponse_13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_14_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String sso;

		public String getSso() {
			return this.sso;
		}

		public String verify_pccuid;

		public String getVerify_pccuid() {
			return this.verify_pccuid;
		}

		public Boolean verified;

		public Boolean getVerified() {
			return this.verified;
		}

		public String aud;

		public String getAud() {
			return this.aud;
		}

		public String azp;

		public String getAzp() {
			return this.azp;
		}

		public Boolean valid;

		public Boolean getValid() {
			return this.valid;
		}

		public Boolean admin;

		public Boolean getAdmin() {
			return this.admin;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.sso = readString(dis);

					this.verify_pccuid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.verified = null;
					} else {
						this.verified = dis.readBoolean();
					}

					this.aud = readString(dis);

					this.azp = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valid = null;
					} else {
						this.valid = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.admin = null;
					} else {
						this.admin = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sso, dos);

				// String

				writeString(this.verify_pccuid, dos);

				// Boolean

				if (this.verified == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.verified);
				}

				// String

				writeString(this.aud, dos);

				// String

				writeString(this.azp, dos);

				// Boolean

				if (this.valid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.valid);
				}

				// Boolean

				if (this.admin == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.admin);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sso=" + sso);
			sb.append(",verify_pccuid=" + verify_pccuid);
			sb.append(",verified=" + String.valueOf(verified));
			sb.append(",aud=" + aud);
			sb.append(",azp=" + azp);
			sb.append(",valid=" + String.valueOf(valid));
			sb.append(",admin=" + String.valueOf(admin));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRunJob_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();

				/**
				 * [tFlowToIterate_6 begin ] start
				 */

				ok_Hash.put("tFlowToIterate_6", false);
				start_Hash.put("tFlowToIterate_6", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_6";

				int tos_count_tFlowToIterate_6 = 0;

				class BytesLimit65535_tFlowToIterate_6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowToIterate_6().limitLog4jByte();

				int nb_line_tFlowToIterate_6 = 0;
				int counter_tFlowToIterate_6 = 0;

				/**
				 * [tFlowToIterate_6 begin ] stop
				 */

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());

				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				class BytesLimit65535_tRunJob_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRunJob_2().limitLog4jByte();

				/**
				 * [tRunJob_2 begin ] stop
				 */

				/**
				 * [tRunJob_2 main ] start
				 */

				currentComponent = "tRunJob_2";

				java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();

				paraList_tRunJob_2.add("--father_pid=" + pid);

				paraList_tRunJob_2.add("--root_pid=" + rootPid);

				paraList_tRunJob_2.add("--father_node=tRunJob_2");

				paraList_tRunJob_2.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_2.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_2.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_2 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_2 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_2".equals(tRunJobName_tRunJob_2)
						&& childResumePath_tRunJob_2 != null) {
					paraList_tRunJob_2
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_2");

				java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_2 = null;

				obj_tRunJob_2 = ((String) globalMap
						.get("retrieve1.Authorization"));
				paraList_tRunJob_2.add("--context_param Authorization="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));

				parentContextMap_tRunJob_2.put("Authorization", obj_tRunJob_2);

				esb_mfs_srv.api_jwt_verify_0_1.api_jwt_verify childJob_tRunJob_2 = new esb_mfs_srv.api_jwt_verify_0_1.api_jwt_verify();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_2) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
							.entrySet()) {
						dataSources_tRunJob_2.put(
								talendDataSourceEntry_tRunJob_2.getKey(),
								talendDataSourceEntry_tRunJob_2.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
				}

				childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;

				String[][] childReturn_tRunJob_2 = childJob_tRunJob_2
						.runJob((String[]) paraList_tRunJob_2
								.toArray(new String[paraList_tRunJob_2.size()]));

				errorCode = childJob_tRunJob_2.getErrorCode();

				if (childJob_tRunJob_2.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_2
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getErrorCode());
				}
				if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_2.getExceptionStackTrace());
				}

				if (childJob_tRunJob_2.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_2.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				for (String[] item_tRunJob_2 : childReturn_tRunJob_2) {
					if (childJob_tRunJob_2.hastBufferOutputComponent() || true) {

						if (0 < item_tRunJob_2.length) {

							row12.sso = item_tRunJob_2[0];

						} else {
							row12.sso = null;
						}

						if (1 < item_tRunJob_2.length) {

							row12.verify_pccuid = item_tRunJob_2[1];

						} else {
							row12.verify_pccuid = null;
						}

						if (2 < item_tRunJob_2.length) {

							row12.verified = ParserUtils
									.parseTo_Boolean(item_tRunJob_2[2]);

						} else {
							row12.verified = null;
						}

						if (3 < item_tRunJob_2.length) {

							row12.aud = item_tRunJob_2[3];

						} else {
							row12.aud = null;
						}

						if (4 < item_tRunJob_2.length) {

							row12.azp = item_tRunJob_2[4];

						} else {
							row12.azp = null;
						}

						if (5 < item_tRunJob_2.length) {

							row12.valid = ParserUtils
									.parseTo_Boolean(item_tRunJob_2[5]);

						} else {
							row12.valid = null;
						}

						if (6 < item_tRunJob_2.length) {

							row12.admin = ParserUtils
									.parseTo_Boolean(item_tRunJob_2[6]);

						} else {
							row12.admin = null;
						}

					}

					tos_count_tRunJob_2++;

					/**
					 * [tRunJob_2 main ] stop
					 */

					/**
					 * [tFlowToIterate_6 main ] start
					 */

					currentComponent = "tFlowToIterate_6";

					globalMap.put("row12.sso", row12.sso);

					globalMap.put("row12.verify_pccuid", row12.verify_pccuid);

					globalMap.put("row12.verified", row12.verified);

					globalMap.put("row12.aud", row12.aud);

					globalMap.put("row12.azp", row12.azp);

					globalMap.put("row12.valid", row12.valid);

					globalMap.put("row12.admin", row12.admin);

					nb_line_tFlowToIterate_6++;
					counter_tFlowToIterate_6++;
					globalMap.put("tFlowToIterate_6_CURRENT_ITERATION",
							counter_tFlowToIterate_6);

					tos_count_tFlowToIterate_6++;

					/**
					 * [tFlowToIterate_6 main ] stop
					 */

				} // C_01

				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				/**
				 * [tRunJob_2 end ] stop
				 */

				/**
				 * [tFlowToIterate_6 end ] start
				 */

				currentComponent = "tFlowToIterate_6";

				globalMap.put("tFlowToIterate_6_NB_LINE",
						nb_line_tFlowToIterate_6);

				ok_Hash.put("tFlowToIterate_6", true);
				end_Hash.put("tFlowToIterate_6", System.currentTimeMillis());

				if (context.debugging
						|| ((Boolean) globalMap.get("row12.verified"))) {

					tJavaFlex_2Process(globalMap);
				}

				if (!context.debugging
						&& !((Boolean) globalMap.get("row12.verified"))) {

					tFixedFlowInput_11Process(globalMap);
				}

				/**
				 * [tFlowToIterate_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_2 finally ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 finally ] stop
				 */

				/**
				 * [tFlowToIterate_6 finally ] start
				 */

				currentComponent = "tFlowToIterate_6";

				/**
				 * [tFlowToIterate_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}

	public static class rndcon2Struct implements
			routines.system.IPersistableRow<rndcon2Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public Integer RANDOM_NUM;

		public Integer getRANDOM_NUM() {
			return this.RANDOM_NUM;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.RANDOM_NUM = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.RANDOM_NUM, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("RANDOM_NUM=" + String.valueOf(RANDOM_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(rndcon2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaFlex_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaFlex_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				rndcon2Struct rndcon2 = new rndcon2Struct();

				/**
				 * [tFlowToIterate_5 begin ] start
				 */

				int NB_ITERATE_tJDBCConnection_2 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_5", false);
				start_Hash.put("tFlowToIterate_5", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_5";

				int tos_count_tFlowToIterate_5 = 0;

				class BytesLimit65535_tFlowToIterate_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowToIterate_5().limitLog4jByte();

				int nb_line_tFlowToIterate_5 = 0;
				int counter_tFlowToIterate_5 = 0;

				/**
				 * [tFlowToIterate_5 begin ] stop
				 */

				/**
				 * [tJavaFlex_2 begin ] start
				 */

				ok_Hash.put("tJavaFlex_2", false);
				start_Hash.put("tJavaFlex_2", System.currentTimeMillis());

				currentComponent = "tJavaFlex_2";

				int tos_count_tJavaFlex_2 = 0;

				class BytesLimit65535_tJavaFlex_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaFlex_2().limitLog4jByte();

				/**
				 * [tJavaFlex_2 begin ] stop
				 */

				/**
				 * [tJavaFlex_2 main ] start
				 */

				currentComponent = "tJavaFlex_2";

				// here is the main part of the component,
				// a piece of code executed in the row
				rndcon2.RANDOM_NUM = ThreadLocalRandom.current().nextInt(0,
						context.MAX_CONNECTION) + 1;
				// log

				tos_count_tJavaFlex_2++;

				/**
				 * [tJavaFlex_2 main ] stop
				 */

				/**
				 * [tFlowToIterate_5 main ] start
				 */

				currentComponent = "tFlowToIterate_5";

				globalMap.put("rndcon2.RANDOM_NUM", rndcon2.RANDOM_NUM);

				nb_line_tFlowToIterate_5++;
				counter_tFlowToIterate_5++;
				globalMap.put("tFlowToIterate_5_CURRENT_ITERATION",
						counter_tFlowToIterate_5);

				tos_count_tFlowToIterate_5++;

				/**
				 * [tFlowToIterate_5 main ] stop
				 */
				NB_ITERATE_tJDBCConnection_2++;

				/**
				 * [tJDBCConnection_2 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_2", false);
				start_Hash.put("tJDBCConnection_2", System.currentTimeMillis());

				currentComponent = "tJDBCConnection_2";

				int tos_count_tJDBCConnection_2 = 0;

				class BytesLimit65535_tJDBCConnection_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJDBCConnection_2().limitLog4jByte();

				String url_tJDBCConnection_2 = context.JDBC_URL
						+ "?tcpKeepAlive=true&ApplicationName="
						+ context.MID_NO + "-" + context.APPNAME_PREFIX + "_"
						+ ((Integer) globalMap.get("rndcon2.RANDOM_NUM"));

				String dbUser_tJDBCConnection_2 = context.USERNAME;

				final String decryptedPassword_tJDBCConnection_2 = context.PASSWORD;
				String dbPwd_tJDBCConnection_2 = decryptedPassword_tJDBCConnection_2;

				java.sql.Connection conn_tJDBCConnection_2 = null;

				String sharedConnectionName_tJDBCConnection_2 = context.APPNAME_PREFIX
						+ "_" + ((Integer) globalMap.get("rndcon2.RANDOM_NUM"));
				conn_tJDBCConnection_2 = SharedDBConnection.getDBConnection(
						context.DRIVER_CLASS, url_tJDBCConnection_2,
						dbUser_tJDBCConnection_2, dbPwd_tJDBCConnection_2,
						sharedConnectionName_tJDBCConnection_2);
				if (null != conn_tJDBCConnection_2) {

					conn_tJDBCConnection_2.setAutoCommit(true);
				}

				globalMap.put("conn_tJDBCConnection_2", conn_tJDBCConnection_2);
				globalMap.put("url_tJDBCConnection_2", url_tJDBCConnection_2);
				// globalMap.put("user_tJDBCConnection_2",
				// dbUser_tJDBCConnection_2);
				// globalMap.put("pass_tJDBCConnection_2",
				// dbPwd_tJDBCConnection_2);

				/**
				 * [tJDBCConnection_2 begin ] stop
				 */

				/**
				 * [tJDBCConnection_2 main ] start
				 */

				currentComponent = "tJDBCConnection_2";

				tos_count_tJDBCConnection_2++;

				/**
				 * [tJDBCConnection_2 main ] stop
				 */

				/**
				 * [tJDBCConnection_2 end ] start
				 */

				currentComponent = "tJDBCConnection_2";

				ok_Hash.put("tJDBCConnection_2", true);
				end_Hash.put("tJDBCConnection_2", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_2 end ] stop
				 */

				/**
				 * [tJavaFlex_2 end ] start
				 */

				currentComponent = "tJavaFlex_2";

				ok_Hash.put("tJavaFlex_2", true);
				end_Hash.put("tJavaFlex_2", System.currentTimeMillis());

				/**
				 * [tJavaFlex_2 end ] stop
				 */

				/**
				 * [tFlowToIterate_5 end ] start
				 */

				currentComponent = "tFlowToIterate_5";

				globalMap.put("tFlowToIterate_5_NB_LINE",
						nb_line_tFlowToIterate_5);

				ok_Hash.put("tFlowToIterate_5", true);
				end_Hash.put("tFlowToIterate_5", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_5 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJavaFlex_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaFlex_2 finally ] start
				 */

				currentComponent = "tJavaFlex_2";

				/**
				 * [tJavaFlex_2 finally ] stop
				 */

				/**
				 * [tFlowToIterate_5 finally ] start
				 */

				currentComponent = "tFlowToIterate_5";

				/**
				 * [tFlowToIterate_5 finally ] stop
				 */

				/**
				 * [tJDBCConnection_2 finally ] start
				 */

				currentComponent = "tJDBCConnection_2";

				/**
				 * [tJDBCConnection_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaFlex_2_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		public String original_uri;

		public String getOriginal_uri() {
			return this.original_uri;
		}

		public String content_disposition;

		public String getContent_disposition() {
			return this.content_disposition;
		}

		public String content_type;

		public String getContent_type() {
			return this.content_type;
		}

		public String content_length;

		public String getContent_length() {
			return this.content_length;
		}

		public String grant_system;

		public String getGrant_system() {
			return this.grant_system;
		}

		public String md5sum;

		public String getMd5sum() {
			return this.md5sum;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.file_id = readString(dis);

					this.original_uri = readString(dis);

					this.content_disposition = readString(dis);

					this.content_type = readString(dis);

					this.content_length = readString(dis);

					this.grant_system = readString(dis);

					this.md5sum = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.file_id, dos);

				// String

				writeString(this.original_uri, dos);

				// String

				writeString(this.content_disposition, dos);

				// String

				writeString(this.content_type, dos);

				// String

				writeString(this.content_length, dos);

				// String

				writeString(this.grant_system, dos);

				// String

				writeString(this.md5sum, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("file_id=" + file_id);
			sb.append(",original_uri=" + original_uri);
			sb.append(",content_disposition=" + content_disposition);
			sb.append(",content_type=" + content_type);
			sb.append(",content_length=" + content_length);
			sb.append(",grant_system=" + grant_system);
			sb.append(",md5sum=" + md5sum);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tFlowToIterate_8 begin ] start
				 */

				ok_Hash.put("tFlowToIterate_8", false);
				start_Hash.put("tFlowToIterate_8", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_8";

				int tos_count_tFlowToIterate_8 = 0;

				class BytesLimit65535_tFlowToIterate_8 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowToIterate_8().limitLog4jByte();

				int nb_line_tFlowToIterate_8 = 0;
				int counter_tFlowToIterate_8 = 0;

				/**
				 * [tFlowToIterate_8 begin ] stop
				 */

				/**
				 * [tJDBCInput_1 begin ] start
				 */

				ok_Hash.put("tJDBCInput_1", false);
				start_Hash.put("tJDBCInput_1", System.currentTimeMillis());

				currentComponent = "tJDBCInput_1";

				int tos_count_tJDBCInput_1 = 0;

				class BytesLimit65535_tJDBCInput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJDBCInput_1().limitLog4jByte();

				int nb_line_tJDBCInput_1 = 0;
				java.sql.Connection conn_tJDBCInput_1 = null;
				conn_tJDBCInput_1 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_2");

				java.sql.Statement stmt_tJDBCInput_1 = conn_tJDBCInput_1
						.createStatement();

				String dbquery_tJDBCInput_1 = "SELECT ref_file_id as file_id,original_uri,content_disposition,content_type,content_length,grant_system,md5sum\nFROM "
						+ context.mapping_table_name
						+ "  \nWHERE file_id = '"
						+ ((String) globalMap.get("retrieve1.file_id"))
						+ "' \nAND valid is true\nLIMIT 1";

				globalMap.put("tJDBCInput_1_QUERY", dbquery_tJDBCInput_1);

				java.sql.ResultSet rs_tJDBCInput_1 = null;
				try {
					rs_tJDBCInput_1 = stmt_tJDBCInput_1
							.executeQuery(dbquery_tJDBCInput_1);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_1 = rs_tJDBCInput_1
							.getMetaData();
					int colQtyInRs_tJDBCInput_1 = rsmd_tJDBCInput_1
							.getColumnCount();

					String tmpContent_tJDBCInput_1 = null;

					while (rs_tJDBCInput_1.next()) {
						nb_line_tJDBCInput_1++;

						if (colQtyInRs_tJDBCInput_1 < 1) {
							row3.file_id = null;
						} else {

							row3.file_id = routines.system.JDBCUtil.getString(
									rs_tJDBCInput_1, 1, false);
						}
						if (colQtyInRs_tJDBCInput_1 < 2) {
							row3.original_uri = null;
						} else {

							row3.original_uri = routines.system.JDBCUtil
									.getString(rs_tJDBCInput_1, 2, false);
						}
						if (colQtyInRs_tJDBCInput_1 < 3) {
							row3.content_disposition = null;
						} else {

							row3.content_disposition = routines.system.JDBCUtil
									.getString(rs_tJDBCInput_1, 3, false);
						}
						if (colQtyInRs_tJDBCInput_1 < 4) {
							row3.content_type = null;
						} else {

							row3.content_type = routines.system.JDBCUtil
									.getString(rs_tJDBCInput_1, 4, false);
						}
						if (colQtyInRs_tJDBCInput_1 < 5) {
							row3.content_length = null;
						} else {

							row3.content_length = routines.system.JDBCUtil
									.getString(rs_tJDBCInput_1, 5, false);
						}
						if (colQtyInRs_tJDBCInput_1 < 6) {
							row3.grant_system = null;
						} else {

							row3.grant_system = routines.system.JDBCUtil
									.getString(rs_tJDBCInput_1, 6, false);
						}
						if (colQtyInRs_tJDBCInput_1 < 7) {
							row3.md5sum = null;
						} else {

							row3.md5sum = routines.system.JDBCUtil.getString(
									rs_tJDBCInput_1, 7, false);
						}

						/**
						 * [tJDBCInput_1 begin ] stop
						 */

						/**
						 * [tJDBCInput_1 main ] start
						 */

						currentComponent = "tJDBCInput_1";

						tos_count_tJDBCInput_1++;

						/**
						 * [tJDBCInput_1 main ] stop
						 */

						/**
						 * [tFlowToIterate_8 main ] start
						 */

						currentComponent = "tFlowToIterate_8";

						globalMap.put("row3.file_id", row3.file_id);

						globalMap.put("row3.original_uri", row3.original_uri);

						globalMap.put("row3.content_disposition",
								row3.content_disposition);

						globalMap.put("row3.content_type", row3.content_type);

						globalMap.put("row3.content_length",
								row3.content_length);

						globalMap.put("row3.grant_system", row3.grant_system);

						globalMap.put("row3.md5sum", row3.md5sum);

						nb_line_tFlowToIterate_8++;
						counter_tFlowToIterate_8++;
						globalMap.put("tFlowToIterate_8_CURRENT_ITERATION",
								counter_tFlowToIterate_8);

						tos_count_tFlowToIterate_8++;

						/**
						 * [tFlowToIterate_8 main ] stop
						 */

						/**
						 * [tJDBCInput_1 end ] start
						 */

						currentComponent = "tJDBCInput_1";

					}
				} finally {
					if (rs_tJDBCInput_1 != null) {
						rs_tJDBCInput_1.close();
					}
					stmt_tJDBCInput_1.close();

				}
				globalMap.put("tJDBCInput_1_NB_LINE", nb_line_tJDBCInput_1);

				ok_Hash.put("tJDBCInput_1", true);
				end_Hash.put("tJDBCInput_1", System.currentTimeMillis());

				/**
				 * [tJDBCInput_1 end ] stop
				 */

				/**
				 * [tFlowToIterate_8 end ] start
				 */

				currentComponent = "tFlowToIterate_8";

				globalMap.put("tFlowToIterate_8_NB_LINE",
						nb_line_tFlowToIterate_8);

				ok_Hash.put("tFlowToIterate_8", true);
				end_Hash.put("tFlowToIterate_8", System.currentTimeMillis());

				if (((Integer) globalMap.get("tFlowToIterate_8_NB_LINE")) > 0
						&& ((String) globalMap.get("row12.azp"))
								.contains((String) globalMap
										.get("row3.grant_system"))) {

					tFileInputRaw_1Process(globalMap);
				}

				if (((Integer) globalMap.get("tFlowToIterate_8_NB_LINE")) <= 0) {

					tFixedFlowInput_2Process(globalMap);
				}

				if (((Integer) globalMap.get("tFlowToIterate_8_NB_LINE")) > 0
						&& !((String) globalMap.get("row12.azp"))
								.contains((String) globalMap
										.get("row3.grant_system"))) {

					tFixedFlowInput_13Process(globalMap);
				}

				/**
				 * [tFlowToIterate_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_1 finally ] start
				 */

				currentComponent = "tJDBCInput_1";

				/**
				 * [tJDBCInput_1 finally ] stop
				 */

				/**
				 * [tFlowToIterate_8 finally ] start
				 */

				currentComponent = "tFlowToIterate_8";

				/**
				 * [tFlowToIterate_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public byte[] body;

		public byte[] getBody() {
			return this.body;
		}

		private byte[] readByteArray(ObjectInputStream dis) throws IOException {
			byte[] byteArrayReturn;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				byteArrayReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.readFully(byteArray);
				byteArrayReturn = byteArray;
			}
			return byteArrayReturn;
		}

		private void writeByteArray(byte[] byteArray, ObjectOutputStream dos)
				throws IOException {
			if (byteArray == null) {
				dos.writeInt(-1);
			} else {
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = readByteArray(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// byte[]

				writeByteArray(this.body, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputRaw_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputRaw_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tRESTResponse_2 begin ] start
				 */

				ok_Hash.put("tRESTResponse_2", false);
				start_Hash.put("tRESTResponse_2", System.currentTimeMillis());

				currentComponent = "tRESTResponse_2";

				int tos_count_tRESTResponse_2 = 0;

				class BytesLimit65535_tRESTResponse_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTResponse_2().limitLog4jByte();

				/**
				 * [tRESTResponse_2 begin ] stop
				 */

				/**
				 * [tFileInputRaw_1 begin ] start
				 */

				ok_Hash.put("tFileInputRaw_1", false);
				start_Hash.put("tFileInputRaw_1", System.currentTimeMillis());

				currentComponent = "tFileInputRaw_1";

				int tos_count_tFileInputRaw_1 = 0;

				class BytesLimit65535_tFileInputRaw_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputRaw_1().limitLog4jByte();

				try {
					byte[] content_tFileInputRaw_1 = org.apache.commons.io.FileUtils
							.readFileToByteArray(new java.io.File(
									context.mount_folder
											+ "/"
											+ ((String) globalMap
													.get("row3.file_id"))
													.split("-")[1]
											+ "/"
											+ ((String) globalMap
													.get("row3.file_id"))));
					row4.body = content_tFileInputRaw_1;
					globalMap.put(
							"tFileInputRaw_1_FILENAME_PATH",
							context.mount_folder
									+ "/"
									+ ((String) globalMap.get("row3.file_id"))
											.split("-")[1] + "/"
									+ ((String) globalMap.get("row3.file_id")));
				} catch (java.io.IOException e_tFileInputRaw_1) {
					throw e_tFileInputRaw_1;
				}

				/**
				 * [tFileInputRaw_1 begin ] stop
				 */

				/**
				 * [tFileInputRaw_1 main ] start
				 */

				currentComponent = "tFileInputRaw_1";

				tos_count_tFileInputRaw_1++;

				/**
				 * [tFileInputRaw_1 main ] stop
				 */

				/**
				 * [tRESTResponse_2 main ] start
				 */

				currentComponent = "tRESTResponse_2";

				java.io.OutputStream outputStream_tRESTResponse_2 = (java.io.OutputStream) globalMap
						.get("restResponseStream");
				boolean responseAlreadySent_tRESTResponse_2 = globalMap
						.containsKey("restResponse");

				if (null == outputStream_tRESTResponse_2
						&& responseAlreadySent_tRESTResponse_2) {
					throw new RuntimeException("Rest response already sent.");
				} else if (!globalMap.containsKey("restRequest")) {
					throw new RuntimeException("Not received rest request yet.");
				} else {
					Integer restProviderStatusCode_tRESTResponse_2 = 200;

					Object restProviderResponse_tRESTResponse_2 = null;
					restProviderResponse_tRESTResponse_2 = row4.body;

					java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_2 = new java.util.TreeMap<String, String>(
							String.CASE_INSENSITIVE_ORDER);
					restProviderResponseHeaders_tRESTResponse_2.put(
							"Content-Type",
							((String) globalMap.get("row3.content_type")));
					restProviderResponseHeaders_tRESTResponse_2.put(
							"Content-Length",
							((String) globalMap.get("row3.content_length")));
					restProviderResponseHeaders_tRESTResponse_2
							.put("Content-Disposition", ((String) globalMap
									.get("row3.content_disposition")));
					restProviderResponseHeaders_tRESTResponse_2.put(
							"Content-MD5",
							((String) globalMap.get("row3.md5sum")));

					java.util.Map<String, Object> restRequest_tRESTResponse_2 = (java.util.Map<String, Object>) globalMap
							.get("restRequest");
					org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_2 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_2
							.get("MESSAGE_CONTEXT");

					if (null == outputStream_tRESTResponse_2) {
						java.util.Map<String, Object> restResponse_tRESTResponse_2 = new java.util.HashMap<String, Object>();
						restResponse_tRESTResponse_2.put("BODY",
								restProviderResponse_tRESTResponse_2);
						restResponse_tRESTResponse_2.put("STATUS",
								restProviderStatusCode_tRESTResponse_2);
						restResponse_tRESTResponse_2.put("HEADERS",
								restProviderResponseHeaders_tRESTResponse_2);
						restResponse_tRESTResponse_2.put(
								"drop.json.root.element",
								Boolean.valueOf(false));
						globalMap.put("restResponse",
								restResponse_tRESTResponse_2);

					} else {

						javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_2 = null;
						if (!responseAlreadySent_tRESTResponse_2) {
							org.apache.cxf.jaxrs.utils.JAXRSUtils
									.getCurrentMessage()
									.getExchange()
									.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
											true);

							messageContext_tRESTResponse_2
									.put(org.apache.cxf.message.Message.RESPONSE_CODE,
											restProviderStatusCode_tRESTResponse_2);
							javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_2 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
							for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_2
									.entrySet()) {
								headersMultivaluedMap_tRESTResponse_2
										.putSingle(multivaluedHeader.getKey(),
												multivaluedHeader.getValue());
							}
							messageContext_tRESTResponse_2
									.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
											headersMultivaluedMap_tRESTResponse_2);

							// String responseContentType_tRESTResponse_2 =
							// (String)
							// messageContext_tRESTResponse_2.get(org.apache.cxf.message.Message.CONTENT_TYPE);
							String responseContentType_tRESTResponse_2 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
									.getCurrentMessage()
									.getExchange()
									.get(org.apache.cxf.message.Message.CONTENT_TYPE);
							if (null == responseContentType_tRESTResponse_2) {
								// this should not be needed, just in case. set
								// it to the first value in the sorted list
								// returned from HttpHeaders
								responseMediaType_tRESTResponse_2 = messageContext_tRESTResponse_2
										.getHttpHeaders()
										.getAcceptableMediaTypes().get(0);
							} else {
								responseMediaType_tRESTResponse_2 = org.apache.cxf.jaxrs.utils.JAXRSUtils
										.toMediaType(responseContentType_tRESTResponse_2);
							}
							globalMap.put("restResponseMediaType",
									responseMediaType_tRESTResponse_2);

							String responseMediaSubType_tRESTResponse_2 = responseMediaType_tRESTResponse_2
									.getSubtype();
							if (responseMediaSubType_tRESTResponse_2
									.equals("xml")
									|| responseMediaSubType_tRESTResponse_2
											.endsWith("+xml")) {
								outputStream_tRESTResponse_2.write("<wrapper>"
										.getBytes());
								globalMap.put("restResponseWrappingClosure",
										"</wrapper>");
							}
							if (responseMediaSubType_tRESTResponse_2
									.equals("json")
									|| responseMediaSubType_tRESTResponse_2
											.endsWith("+json")) {
								outputStream_tRESTResponse_2.write("["
										.getBytes());
								globalMap.put("restResponseWrappingClosure",
										"]");
							}

							globalMap.put("restResponse", true);
						} else {
							responseMediaType_tRESTResponse_2 = (javax.ws.rs.core.MediaType) globalMap
									.get("restResponseMediaType");
						}

						if (null != restProviderResponse_tRESTResponse_2) {
							String responseMediaSubType_tRESTResponse_2 = responseMediaType_tRESTResponse_2
									.getSubtype();
							if (responseMediaSubType_tRESTResponse_2
									.equals("json")
									|| responseMediaSubType_tRESTResponse_2
											.endsWith("+json")) {
								if (globalMap
										.containsKey("restResponseJsonStarted")) {
									outputStream_tRESTResponse_2.write(","
											.getBytes());
								} else {
									globalMap.put("restResponseJsonStarted",
											true);
								}
							}

							Class<? extends Object> responseBodyClass_tRESTResponse_2 = restProviderResponse_tRESTResponse_2
									.getClass();
							javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_2 = messageContext_tRESTResponse_2
									.getProviders();
							javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_2 = messageBodyProviders_tRESTResponse_2
									.getMessageBodyWriter(
											responseBodyClass_tRESTResponse_2,
											responseBodyClass_tRESTResponse_2,
											null,
											responseMediaType_tRESTResponse_2);
							messageBodyWriter_tRESTResponse_2.writeTo(
									restProviderResponse_tRESTResponse_2,
									responseBodyClass_tRESTResponse_2,
									responseBodyClass_tRESTResponse_2,
									new java.lang.annotation.Annotation[] {},
									responseMediaType_tRESTResponse_2, null,
									outputStream_tRESTResponse_2);
						}
						// initial variant
						// outputStream_tRESTResponse_2.write(String.valueOf(restProviderResponse_tRESTResponse_2).getBytes());
						outputStream_tRESTResponse_2.flush();
					}
				}

				tos_count_tRESTResponse_2++;

				/**
				 * [tRESTResponse_2 main ] stop
				 */

				/**
				 * [tFileInputRaw_1 end ] start
				 */

				currentComponent = "tFileInputRaw_1";

				ok_Hash.put("tFileInputRaw_1", true);
				end_Hash.put("tFileInputRaw_1", System.currentTimeMillis());

				/**
				 * [tFileInputRaw_1 end ] stop
				 */

				/**
				 * [tRESTResponse_2 end ] start
				 */

				currentComponent = "tRESTResponse_2";

				ok_Hash.put("tRESTResponse_2", true);
				end_Hash.put("tRESTResponse_2", System.currentTimeMillis());

				/**
				 * [tRESTResponse_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputRaw_1 finally ] start
				 */

				currentComponent = "tFileInputRaw_1";

				/**
				 * [tFileInputRaw_1 finally ] stop
				 */

				/**
				 * [tRESTResponse_2 finally ] start
				 */

				currentComponent = "tRESTResponse_2";

				/**
				 * [tRESTResponse_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputRaw_1_SUBPROCESS_STATE", 1);
	}

	public static class e404_21Struct implements
			routines.system.IPersistableRow<e404_21Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(e404_21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row45Struct implements
			routines.system.IPersistableRow<row45Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String status_code;

		public String getStatus_code() {
			return this.status_code;
		}

		public String status_message;

		public String getStatus_message() {
			return this.status_message;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.status_code = readString(dis);

					this.status_message = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status_code, dos);

				// String

				writeString(this.status_message, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status_code=" + status_code);
			sb.append(",status_message=" + status_message);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row45Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row45Struct row45 = new row45Struct();
				e404_21Struct e404_21 = new e404_21Struct();

				/**
				 * [tRESTResponse_3 begin ] start
				 */

				ok_Hash.put("tRESTResponse_3", false);
				start_Hash.put("tRESTResponse_3", System.currentTimeMillis());

				currentComponent = "tRESTResponse_3";

				int tos_count_tRESTResponse_3 = 0;

				class BytesLimit65535_tRESTResponse_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTResponse_3().limitLog4jByte();

				/**
				 * [tRESTResponse_3 begin ] stop
				 */

				/**
				 * [tXMLMap_5 begin ] start
				 */

				ok_Hash.put("tXMLMap_5", false);
				start_Hash.put("tXMLMap_5", System.currentTimeMillis());

				currentComponent = "tXMLMap_5";

				int tos_count_tXMLMap_5 = 0;

				class BytesLimit65535_tXMLMap_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_5().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_5 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_5__Struct {
				}
				Var__tXMLMap_5__Struct Var__tXMLMap_5 = new Var__tXMLMap_5__Struct();
				// ###############################
				// # Outputs initialization
				e404_21Struct e404_21_tmp = new e404_21Struct();
				e404_21Struct e404_21_save = null;
				// ###############################
				int nb_line_tXMLMap_5 = 0;

				XML_API_tXMLMap_5 xml_api_tXMLMap_5 = new XML_API_tXMLMap_5();

				class GenerateDocument_e404_21 {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					String currentValue = null;

					public GenerateDocument_e404_21() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						generateOk();
						return this.doc;
					}

					// do some work after document has been generated
					private void generateOk() {
						routines.system.NestXMLTool.replaceDefaultNameSpace(
								this.doc.getRootElement(), null);
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin,
							row45Struct row45, Var__tXMLMap_5__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = org.dom4j.DocumentHelper
									.createElement("root");
							doc.add(root);
							subTreeRootParent = root;
							org.dom4j.Element root_0 = null;
							root_0 = root.addElement("STATUS");
							valueMap.put("root_0", "0");
							if (valueMap.get("root_0") != null) {
								routines.system.NestXMLTool.setText(root_0,
										FormatterUtils.format("0", null));
							}
							org.dom4j.Element root_1 = null;
							root_1 = root.addElement("FILE_ID");
							valueMap.put("root_1", row45.file_id);
							if (valueMap.get("root_1") != null) {
								routines.system.NestXMLTool.setText(root_1,
										FormatterUtils.format(row45.file_id,
												null));
							}
							org.dom4j.Element root_2 = null;
							root_2 = root.addElement("RETURN_CODE");
							valueMap.put("root_2", row45.status_code);
							if (valueMap.get("root_2") != null) {
								routines.system.NestXMLTool.setText(root_2,
										FormatterUtils.format(
												row45.status_code, null));
							}
							org.dom4j.Element root_3 = null;
							root_3 = root.addElement("RETURN_MSG");
							valueMap.put("root_3", row45.status_message);
							if (valueMap.get("root_3") != null) {
								routines.system.NestXMLTool.setText(root_3,
										FormatterUtils.format(
												row45.status_message, null));
							}
							org.dom4j.Element root_4 = null;
							root_4 = root.addElement("CONTENT");
							valueMap.put("root_4", "file_id : " + row45.file_id);
							if (valueMap.get("root_4") != null) {
								routines.system.NestXMLTool.setText(
										root_4,
										FormatterUtils.format("file_id : "
												+ row45.file_id, null));
							}
							org.dom4j.Element root_5 = null;
							root_5 = root.addElement("MID_NO");
							valueMap.put("root_5", context.MID_NO);
							if (valueMap.get("root_5") != null) {
								routines.system.NestXMLTool.setText(root_5,
										FormatterUtils.format(context.MID_NO,
												null));
							}
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
					}
				}

				/**
				 * [tXMLMap_5 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_2 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_2", false);
				start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_2";

				int tos_count_tFixedFlowInput_2 = 0;

				class BytesLimit65535_tFixedFlowInput_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_2().limitLog4jByte();

				for (int i_tFixedFlowInput_2 = 0; i_tFixedFlowInput_2 < 1; i_tFixedFlowInput_2++) {

					row45.status_code = "404";

					row45.status_message = "File mapping not found or not valid";

					row45.file_id = ((String) globalMap
							.get("retrieve1.file_id"));

					/**
					 * [tFixedFlowInput_2 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_2 main ] start
					 */

					currentComponent = "tFixedFlowInput_2";

					tos_count_tFixedFlowInput_2++;

					/**
					 * [tFixedFlowInput_2 main ] stop
					 */

					/**
					 * [tXMLMap_5 main ] start
					 */

					currentComponent = "tXMLMap_5";

					boolean rejectedInnerJoin_tXMLMap_5 = false;
					boolean rejectedDocInnerJoin_tXMLMap_5 = false;
					boolean mainRowRejected_tXMLMap_5 = false;
					boolean isMatchDocRowtXMLMap_5 = false;

					GenerateDocument_e404_21 gen_Doc_e404_21_tXMLMap_5 = new GenerateDocument_e404_21();
					e404_21_tmp.body = null;

					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tXMLMap_5__Struct Var = Var__tXMLMap_5;
						// ###############################
						// # Output tables

						e404_21 = null;

						// # Output table : 'e404_21'

						gen_Doc_e404_21_tXMLMap_5.generateElements(
								rejectedDocInnerJoin_tXMLMap_5, row45, Var);

						if (e404_21_tmp.body == null) {
							e404_21_tmp.body = new routines.system.Document();
							e404_21_tmp.body
									.setDocument(gen_Doc_e404_21_tXMLMap_5
											.getDocument());
						}

						e404_21 = e404_21_tmp;
						e404_21_save = e404_21_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tXMLMap_5 = false;

					tos_count_tXMLMap_5++;

					/**
					 * [tXMLMap_5 main ] stop
					 */
					// Start of branch "e404_21"
					if (e404_21 != null) {

						/**
						 * [tRESTResponse_3 main ] start
						 */

						currentComponent = "tRESTResponse_3";

						java.io.OutputStream outputStream_tRESTResponse_3 = (java.io.OutputStream) globalMap
								.get("restResponseStream");
						boolean responseAlreadySent_tRESTResponse_3 = globalMap
								.containsKey("restResponse");

						if (null == outputStream_tRESTResponse_3
								&& responseAlreadySent_tRESTResponse_3) {
							throw new RuntimeException(
									"Rest response already sent.");
						} else if (!globalMap.containsKey("restRequest")) {
							throw new RuntimeException(
									"Not received rest request yet.");
						} else {
							Integer restProviderStatusCode_tRESTResponse_3 = 404;

							Object restProviderResponse_tRESTResponse_3 = null;
							if (null != e404_21.body) {
								restProviderResponse_tRESTResponse_3 = e404_21.body
										.getDocument();
							}

							java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_3 = new java.util.TreeMap<String, String>(
									String.CASE_INSENSITIVE_ORDER);

							java.util.Map<String, Object> restRequest_tRESTResponse_3 = (java.util.Map<String, Object>) globalMap
									.get("restRequest");
							org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_3 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_3
									.get("MESSAGE_CONTEXT");

							if (null == outputStream_tRESTResponse_3) {
								java.util.Map<String, Object> restResponse_tRESTResponse_3 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_3.put("BODY",
										restProviderResponse_tRESTResponse_3);
								restResponse_tRESTResponse_3.put("STATUS",
										restProviderStatusCode_tRESTResponse_3);
								restResponse_tRESTResponse_3
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_3);
								restResponse_tRESTResponse_3.put(
										"drop.json.root.element",
										Boolean.valueOf(true));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_3);

							} else {

								javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_3 = null;
								if (!responseAlreadySent_tRESTResponse_3) {
									org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
													true);

									messageContext_tRESTResponse_3
											.put(org.apache.cxf.message.Message.RESPONSE_CODE,
													restProviderStatusCode_tRESTResponse_3);
									javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_3 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
									for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_3
											.entrySet()) {
										headersMultivaluedMap_tRESTResponse_3
												.putSingle(multivaluedHeader
														.getKey(),
														multivaluedHeader
																.getValue());
									}
									messageContext_tRESTResponse_3
											.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
													headersMultivaluedMap_tRESTResponse_3);

									// String
									// responseContentType_tRESTResponse_3 =
									// (String)
									// messageContext_tRESTResponse_3.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									String responseContentType_tRESTResponse_3 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									if (null == responseContentType_tRESTResponse_3) {
										// this should not be needed, just in
										// case. set it to the first value in
										// the sorted list returned from
										// HttpHeaders
										responseMediaType_tRESTResponse_3 = messageContext_tRESTResponse_3
												.getHttpHeaders()
												.getAcceptableMediaTypes()
												.get(0);
									} else {
										responseMediaType_tRESTResponse_3 = org.apache.cxf.jaxrs.utils.JAXRSUtils
												.toMediaType(responseContentType_tRESTResponse_3);
									}
									globalMap.put("restResponseMediaType",
											responseMediaType_tRESTResponse_3);

									String responseMediaSubType_tRESTResponse_3 = responseMediaType_tRESTResponse_3
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_3
											.equals("xml")
											|| responseMediaSubType_tRESTResponse_3
													.endsWith("+xml")) {
										outputStream_tRESTResponse_3
												.write("<wrapper>".getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"</wrapper>");
									}
									if (responseMediaSubType_tRESTResponse_3
											.equals("json")
											|| responseMediaSubType_tRESTResponse_3
													.endsWith("+json")) {
										outputStream_tRESTResponse_3.write("["
												.getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"]");
									}

									globalMap.put("restResponse", true);
								} else {
									responseMediaType_tRESTResponse_3 = (javax.ws.rs.core.MediaType) globalMap
											.get("restResponseMediaType");
								}

								if (null != restProviderResponse_tRESTResponse_3) {
									String responseMediaSubType_tRESTResponse_3 = responseMediaType_tRESTResponse_3
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_3
											.equals("json")
											|| responseMediaSubType_tRESTResponse_3
													.endsWith("+json")) {
										if (globalMap
												.containsKey("restResponseJsonStarted")) {
											outputStream_tRESTResponse_3
													.write(",".getBytes());
										} else {
											globalMap.put(
													"restResponseJsonStarted",
													true);
										}
									}

									Class<? extends Object> responseBodyClass_tRESTResponse_3 = restProviderResponse_tRESTResponse_3
											.getClass();
									javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_3 = messageContext_tRESTResponse_3
											.getProviders();
									javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_3 = messageBodyProviders_tRESTResponse_3
											.getMessageBodyWriter(
													responseBodyClass_tRESTResponse_3,
													responseBodyClass_tRESTResponse_3,
													null,
													responseMediaType_tRESTResponse_3);
									messageBodyWriter_tRESTResponse_3
											.writeTo(
													restProviderResponse_tRESTResponse_3,
													responseBodyClass_tRESTResponse_3,
													responseBodyClass_tRESTResponse_3,
													new java.lang.annotation.Annotation[] {},
													responseMediaType_tRESTResponse_3,
													null,
													outputStream_tRESTResponse_3);
								}
								// initial variant
								// outputStream_tRESTResponse_3.write(String.valueOf(restProviderResponse_tRESTResponse_3).getBytes());
								outputStream_tRESTResponse_3.flush();
							}
						}

						tos_count_tRESTResponse_3++;

						/**
						 * [tRESTResponse_3 main ] stop
						 */

					} // End of branch "e404_21"

					/**
					 * [tFixedFlowInput_2 end ] start
					 */

					currentComponent = "tFixedFlowInput_2";

				}
				globalMap.put("tFixedFlowInput_2_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_2", true);
				end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_2 end ] stop
				 */

				/**
				 * [tXMLMap_5 end ] start
				 */

				currentComponent = "tXMLMap_5";

				ok_Hash.put("tXMLMap_5", true);
				end_Hash.put("tXMLMap_5", System.currentTimeMillis());

				/**
				 * [tXMLMap_5 end ] stop
				 */

				/**
				 * [tRESTResponse_3 end ] start
				 */

				currentComponent = "tRESTResponse_3";

				ok_Hash.put("tRESTResponse_3", true);
				end_Hash.put("tRESTResponse_3", System.currentTimeMillis());

				/**
				 * [tRESTResponse_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_2 finally ] start
				 */

				currentComponent = "tFixedFlowInput_2";

				/**
				 * [tFixedFlowInput_2 finally ] stop
				 */

				/**
				 * [tXMLMap_5 finally ] start
				 */

				currentComponent = "tXMLMap_5";

				/**
				 * [tXMLMap_5 finally ] stop
				 */

				/**
				 * [tRESTResponse_3 finally ] start
				 */

				currentComponent = "tRESTResponse_3";

				/**
				 * [tRESTResponse_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}

	public static class e401_2aStruct implements
			routines.system.IPersistableRow<e401_2aStruct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(e401_2aStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String status_code;

		public String getStatus_code() {
			return this.status_code;
		}

		public String status_message;

		public String getStatus_message() {
			return this.status_message;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.status_code = readString(dis);

					this.status_message = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status_code, dos);

				// String

				writeString(this.status_message, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status_code=" + status_code);
			sb.append(",status_message=" + status_message);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_13Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();
				e401_2aStruct e401_2a = new e401_2aStruct();

				/**
				 * [tRESTResponse_12 begin ] start
				 */

				ok_Hash.put("tRESTResponse_12", false);
				start_Hash.put("tRESTResponse_12", System.currentTimeMillis());

				currentComponent = "tRESTResponse_12";

				int tos_count_tRESTResponse_12 = 0;

				class BytesLimit65535_tRESTResponse_12 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTResponse_12().limitLog4jByte();

				/**
				 * [tRESTResponse_12 begin ] stop
				 */

				/**
				 * [tXMLMap_14 begin ] start
				 */

				ok_Hash.put("tXMLMap_14", false);
				start_Hash.put("tXMLMap_14", System.currentTimeMillis());

				currentComponent = "tXMLMap_14";

				int tos_count_tXMLMap_14 = 0;

				class BytesLimit65535_tXMLMap_14 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_14().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_14 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_14__Struct {
				}
				Var__tXMLMap_14__Struct Var__tXMLMap_14 = new Var__tXMLMap_14__Struct();
				// ###############################
				// # Outputs initialization
				e401_2aStruct e401_2a_tmp = new e401_2aStruct();
				e401_2aStruct e401_2a_save = null;
				// ###############################
				int nb_line_tXMLMap_14 = 0;

				XML_API_tXMLMap_14 xml_api_tXMLMap_14 = new XML_API_tXMLMap_14();

				class GenerateDocument_e401_2a {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					String currentValue = null;

					public GenerateDocument_e401_2a() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						generateOk();
						return this.doc;
					}

					// do some work after document has been generated
					private void generateOk() {
						routines.system.NestXMLTool.replaceDefaultNameSpace(
								this.doc.getRootElement(), null);
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin,
							row18Struct row18, Var__tXMLMap_14__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = org.dom4j.DocumentHelper
									.createElement("root");
							doc.add(root);
							subTreeRootParent = root;
							org.dom4j.Element root_0 = null;
							root_0 = root.addElement("STATUS");
							valueMap.put("root_0", "0");
							if (valueMap.get("root_0") != null) {
								routines.system.NestXMLTool.setText(root_0,
										FormatterUtils.format("0", null));
							}
							org.dom4j.Element root_1 = null;
							root_1 = root.addElement("FILE_ID");
							valueMap.put("root_1", row18.file_id);
							if (valueMap.get("root_1") != null) {
								routines.system.NestXMLTool.setText(root_1,
										FormatterUtils.format(row18.file_id,
												null));
							}
							org.dom4j.Element root_2 = null;
							root_2 = root.addElement("RETURN_CODE");
							valueMap.put("root_2", row18.status_code);
							if (valueMap.get("root_2") != null) {
								routines.system.NestXMLTool.setText(root_2,
										FormatterUtils.format(
												row18.status_code, null));
							}
							org.dom4j.Element root_3 = null;
							root_3 = root.addElement("RETURN_MSG");
							valueMap.put("root_3", row18.status_message);
							if (valueMap.get("root_3") != null) {
								routines.system.NestXMLTool.setText(root_3,
										FormatterUtils.format(
												row18.status_message, null));
							}
							org.dom4j.Element root_4 = null;
							root_4 = root.addElement("CONTENT");
							valueMap.put("root_4", "file_id : " + row18.file_id);
							if (valueMap.get("root_4") != null) {
								routines.system.NestXMLTool.setText(
										root_4,
										FormatterUtils.format("file_id : "
												+ row18.file_id, null));
							}
							org.dom4j.Element root_5 = null;
							root_5 = root.addElement("MID_NO");
							valueMap.put("root_5", context.MID_NO);
							if (valueMap.get("root_5") != null) {
								routines.system.NestXMLTool.setText(root_5,
										FormatterUtils.format(context.MID_NO,
												null));
							}
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
					}
				}

				/**
				 * [tXMLMap_14 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_13 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_13", false);
				start_Hash
						.put("tFixedFlowInput_13", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_13";

				int tos_count_tFixedFlowInput_13 = 0;

				class BytesLimit65535_tFixedFlowInput_13 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_13().limitLog4jByte();

				for (int i_tFixedFlowInput_13 = 0; i_tFixedFlowInput_13 < 1; i_tFixedFlowInput_13++) {

					row18.status_code = "401";

					row18.status_message = "Authority fail";

					row18.file_id = ((String) globalMap
							.get("retrieve1.file_id"));

					/**
					 * [tFixedFlowInput_13 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_13 main ] start
					 */

					currentComponent = "tFixedFlowInput_13";

					tos_count_tFixedFlowInput_13++;

					/**
					 * [tFixedFlowInput_13 main ] stop
					 */

					/**
					 * [tXMLMap_14 main ] start
					 */

					currentComponent = "tXMLMap_14";

					boolean rejectedInnerJoin_tXMLMap_14 = false;
					boolean rejectedDocInnerJoin_tXMLMap_14 = false;
					boolean mainRowRejected_tXMLMap_14 = false;
					boolean isMatchDocRowtXMLMap_14 = false;

					GenerateDocument_e401_2a gen_Doc_e401_2a_tXMLMap_14 = new GenerateDocument_e401_2a();
					e401_2a_tmp.body = null;

					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tXMLMap_14__Struct Var = Var__tXMLMap_14;
						// ###############################
						// # Output tables

						e401_2a = null;

						// # Output table : 'e401_2a'

						gen_Doc_e401_2a_tXMLMap_14.generateElements(
								rejectedDocInnerJoin_tXMLMap_14, row18, Var);

						if (e401_2a_tmp.body == null) {
							e401_2a_tmp.body = new routines.system.Document();
							e401_2a_tmp.body
									.setDocument(gen_Doc_e401_2a_tXMLMap_14
											.getDocument());
						}

						e401_2a = e401_2a_tmp;
						e401_2a_save = e401_2a_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tXMLMap_14 = false;

					tos_count_tXMLMap_14++;

					/**
					 * [tXMLMap_14 main ] stop
					 */
					// Start of branch "e401_2a"
					if (e401_2a != null) {

						/**
						 * [tRESTResponse_12 main ] start
						 */

						currentComponent = "tRESTResponse_12";

						java.io.OutputStream outputStream_tRESTResponse_12 = (java.io.OutputStream) globalMap
								.get("restResponseStream");
						boolean responseAlreadySent_tRESTResponse_12 = globalMap
								.containsKey("restResponse");

						if (null == outputStream_tRESTResponse_12
								&& responseAlreadySent_tRESTResponse_12) {
							throw new RuntimeException(
									"Rest response already sent.");
						} else if (!globalMap.containsKey("restRequest")) {
							throw new RuntimeException(
									"Not received rest request yet.");
						} else {
							Integer restProviderStatusCode_tRESTResponse_12 = 401;

							Object restProviderResponse_tRESTResponse_12 = null;
							if (null != e401_2a.body) {
								restProviderResponse_tRESTResponse_12 = e401_2a.body
										.getDocument();
							}

							java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_12 = new java.util.TreeMap<String, String>(
									String.CASE_INSENSITIVE_ORDER);

							java.util.Map<String, Object> restRequest_tRESTResponse_12 = (java.util.Map<String, Object>) globalMap
									.get("restRequest");
							org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_12 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_12
									.get("MESSAGE_CONTEXT");

							if (null == outputStream_tRESTResponse_12) {
								java.util.Map<String, Object> restResponse_tRESTResponse_12 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_12.put("BODY",
										restProviderResponse_tRESTResponse_12);
								restResponse_tRESTResponse_12
										.put("STATUS",
												restProviderStatusCode_tRESTResponse_12);
								restResponse_tRESTResponse_12
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_12);
								restResponse_tRESTResponse_12.put(
										"drop.json.root.element",
										Boolean.valueOf(true));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_12);

							} else {

								javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_12 = null;
								if (!responseAlreadySent_tRESTResponse_12) {
									org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
													true);

									messageContext_tRESTResponse_12
											.put(org.apache.cxf.message.Message.RESPONSE_CODE,
													restProviderStatusCode_tRESTResponse_12);
									javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_12 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
									for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_12
											.entrySet()) {
										headersMultivaluedMap_tRESTResponse_12
												.putSingle(multivaluedHeader
														.getKey(),
														multivaluedHeader
																.getValue());
									}
									messageContext_tRESTResponse_12
											.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
													headersMultivaluedMap_tRESTResponse_12);

									// String
									// responseContentType_tRESTResponse_12 =
									// (String)
									// messageContext_tRESTResponse_12.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									String responseContentType_tRESTResponse_12 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									if (null == responseContentType_tRESTResponse_12) {
										// this should not be needed, just in
										// case. set it to the first value in
										// the sorted list returned from
										// HttpHeaders
										responseMediaType_tRESTResponse_12 = messageContext_tRESTResponse_12
												.getHttpHeaders()
												.getAcceptableMediaTypes()
												.get(0);
									} else {
										responseMediaType_tRESTResponse_12 = org.apache.cxf.jaxrs.utils.JAXRSUtils
												.toMediaType(responseContentType_tRESTResponse_12);
									}
									globalMap.put("restResponseMediaType",
											responseMediaType_tRESTResponse_12);

									String responseMediaSubType_tRESTResponse_12 = responseMediaType_tRESTResponse_12
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_12
											.equals("xml")
											|| responseMediaSubType_tRESTResponse_12
													.endsWith("+xml")) {
										outputStream_tRESTResponse_12
												.write("<wrapper>".getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"</wrapper>");
									}
									if (responseMediaSubType_tRESTResponse_12
											.equals("json")
											|| responseMediaSubType_tRESTResponse_12
													.endsWith("+json")) {
										outputStream_tRESTResponse_12.write("["
												.getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"]");
									}

									globalMap.put("restResponse", true);
								} else {
									responseMediaType_tRESTResponse_12 = (javax.ws.rs.core.MediaType) globalMap
											.get("restResponseMediaType");
								}

								if (null != restProviderResponse_tRESTResponse_12) {
									String responseMediaSubType_tRESTResponse_12 = responseMediaType_tRESTResponse_12
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_12
											.equals("json")
											|| responseMediaSubType_tRESTResponse_12
													.endsWith("+json")) {
										if (globalMap
												.containsKey("restResponseJsonStarted")) {
											outputStream_tRESTResponse_12
													.write(",".getBytes());
										} else {
											globalMap.put(
													"restResponseJsonStarted",
													true);
										}
									}

									Class<? extends Object> responseBodyClass_tRESTResponse_12 = restProviderResponse_tRESTResponse_12
											.getClass();
									javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_12 = messageContext_tRESTResponse_12
											.getProviders();
									javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_12 = messageBodyProviders_tRESTResponse_12
											.getMessageBodyWriter(
													responseBodyClass_tRESTResponse_12,
													responseBodyClass_tRESTResponse_12,
													null,
													responseMediaType_tRESTResponse_12);
									messageBodyWriter_tRESTResponse_12
											.writeTo(
													restProviderResponse_tRESTResponse_12,
													responseBodyClass_tRESTResponse_12,
													responseBodyClass_tRESTResponse_12,
													new java.lang.annotation.Annotation[] {},
													responseMediaType_tRESTResponse_12,
													null,
													outputStream_tRESTResponse_12);
								}
								// initial variant
								// outputStream_tRESTResponse_12.write(String.valueOf(restProviderResponse_tRESTResponse_12).getBytes());
								outputStream_tRESTResponse_12.flush();
							}
						}

						tos_count_tRESTResponse_12++;

						/**
						 * [tRESTResponse_12 main ] stop
						 */

					} // End of branch "e401_2a"

					/**
					 * [tFixedFlowInput_13 end ] start
					 */

					currentComponent = "tFixedFlowInput_13";

				}
				globalMap.put("tFixedFlowInput_13_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_13", true);
				end_Hash.put("tFixedFlowInput_13", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_13 end ] stop
				 */

				/**
				 * [tXMLMap_14 end ] start
				 */

				currentComponent = "tXMLMap_14";

				ok_Hash.put("tXMLMap_14", true);
				end_Hash.put("tXMLMap_14", System.currentTimeMillis());

				/**
				 * [tXMLMap_14 end ] stop
				 */

				/**
				 * [tRESTResponse_12 end ] start
				 */

				currentComponent = "tRESTResponse_12";

				ok_Hash.put("tRESTResponse_12", true);
				end_Hash.put("tRESTResponse_12", System.currentTimeMillis());

				/**
				 * [tRESTResponse_12 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_13 finally ] start
				 */

				currentComponent = "tFixedFlowInput_13";

				/**
				 * [tFixedFlowInput_13 finally ] stop
				 */

				/**
				 * [tXMLMap_14 finally ] start
				 */

				currentComponent = "tXMLMap_14";

				/**
				 * [tXMLMap_14 finally ] stop
				 */

				/**
				 * [tRESTResponse_12 finally ] start
				 */

				currentComponent = "tRESTResponse_12";

				/**
				 * [tRESTResponse_12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_13_SUBPROCESS_STATE", 1);
	}

	public static class e401Struct implements
			routines.system.IPersistableRow<e401Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(e401Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String status_code;

		public String getStatus_code() {
			return this.status_code;
		}

		public String status_message;

		public String getStatus_message() {
			return this.status_message;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.status_code = readString(dis);

					this.status_message = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status_code, dos);

				// String

				writeString(this.status_message, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status_code=" + status_code);
			sb.append(",status_message=" + status_message);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();
				e401Struct e401 = new e401Struct();

				/**
				 * [tRESTResponse_10 begin ] start
				 */

				ok_Hash.put("tRESTResponse_10", false);
				start_Hash.put("tRESTResponse_10", System.currentTimeMillis());

				currentComponent = "tRESTResponse_10";

				int tos_count_tRESTResponse_10 = 0;

				class BytesLimit65535_tRESTResponse_10 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTResponse_10().limitLog4jByte();

				/**
				 * [tRESTResponse_10 begin ] stop
				 */

				/**
				 * [tXMLMap_12 begin ] start
				 */

				ok_Hash.put("tXMLMap_12", false);
				start_Hash.put("tXMLMap_12", System.currentTimeMillis());

				currentComponent = "tXMLMap_12";

				int tos_count_tXMLMap_12 = 0;

				class BytesLimit65535_tXMLMap_12 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_12().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_12 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_12__Struct {
				}
				Var__tXMLMap_12__Struct Var__tXMLMap_12 = new Var__tXMLMap_12__Struct();
				// ###############################
				// # Outputs initialization
				e401Struct e401_tmp = new e401Struct();
				e401Struct e401_save = null;
				// ###############################
				int nb_line_tXMLMap_12 = 0;

				XML_API_tXMLMap_12 xml_api_tXMLMap_12 = new XML_API_tXMLMap_12();

				class GenerateDocument_e401 {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					String currentValue = null;

					public GenerateDocument_e401() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						generateOk();
						return this.doc;
					}

					// do some work after document has been generated
					private void generateOk() {
						routines.system.NestXMLTool.replaceDefaultNameSpace(
								this.doc.getRootElement(), null);
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin,
							row16Struct row16, Var__tXMLMap_12__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = org.dom4j.DocumentHelper
									.createElement("root");
							doc.add(root);
							subTreeRootParent = root;
							org.dom4j.Element root_0 = null;
							root_0 = root.addElement("STATUS");
							valueMap.put("root_0", "0");
							if (valueMap.get("root_0") != null) {
								routines.system.NestXMLTool.setText(root_0,
										FormatterUtils.format("0", null));
							}
							org.dom4j.Element root_1 = null;
							root_1 = root.addElement("FILE_ID");
							valueMap.put("root_1", row16.file_id);
							if (valueMap.get("root_1") != null) {
								routines.system.NestXMLTool.setText(root_1,
										FormatterUtils.format(row16.file_id,
												null));
							}
							org.dom4j.Element root_2 = null;
							root_2 = root.addElement("RETURN_CODE");
							valueMap.put("root_2", row16.status_code);
							if (valueMap.get("root_2") != null) {
								routines.system.NestXMLTool.setText(root_2,
										FormatterUtils.format(
												row16.status_code, null));
							}
							org.dom4j.Element root_3 = null;
							root_3 = root.addElement("RETURN_MSG");
							valueMap.put("root_3", row16.status_message);
							if (valueMap.get("root_3") != null) {
								routines.system.NestXMLTool.setText(root_3,
										FormatterUtils.format(
												row16.status_message, null));
							}
							org.dom4j.Element root_4 = null;
							root_4 = root.addElement("CONTENT");
							valueMap.put("root_4", "file_id : " + row16.file_id);
							if (valueMap.get("root_4") != null) {
								routines.system.NestXMLTool.setText(
										root_4,
										FormatterUtils.format("file_id : "
												+ row16.file_id, null));
							}
							org.dom4j.Element root_5 = null;
							root_5 = root.addElement("MID_NO");
							valueMap.put("root_5", context.MID_NO);
							if (valueMap.get("root_5") != null) {
								routines.system.NestXMLTool.setText(root_5,
										FormatterUtils.format(context.MID_NO,
												null));
							}
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
					}
				}

				/**
				 * [tXMLMap_12 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_11 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_11", false);
				start_Hash
						.put("tFixedFlowInput_11", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_11";

				int tos_count_tFixedFlowInput_11 = 0;

				class BytesLimit65535_tFixedFlowInput_11 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_11().limitLog4jByte();

				for (int i_tFixedFlowInput_11 = 0; i_tFixedFlowInput_11 < 1; i_tFixedFlowInput_11++) {

					row16.status_code = "401";

					row16.status_message = "Authenication fail";

					row16.file_id = ((String) globalMap
							.get("retrieve1.file_id"));

					/**
					 * [tFixedFlowInput_11 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_11 main ] start
					 */

					currentComponent = "tFixedFlowInput_11";

					tos_count_tFixedFlowInput_11++;

					/**
					 * [tFixedFlowInput_11 main ] stop
					 */

					/**
					 * [tXMLMap_12 main ] start
					 */

					currentComponent = "tXMLMap_12";

					boolean rejectedInnerJoin_tXMLMap_12 = false;
					boolean rejectedDocInnerJoin_tXMLMap_12 = false;
					boolean mainRowRejected_tXMLMap_12 = false;
					boolean isMatchDocRowtXMLMap_12 = false;

					GenerateDocument_e401 gen_Doc_e401_tXMLMap_12 = new GenerateDocument_e401();
					e401_tmp.body = null;

					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tXMLMap_12__Struct Var = Var__tXMLMap_12;
						// ###############################
						// # Output tables

						e401 = null;

						// # Output table : 'e401'

						gen_Doc_e401_tXMLMap_12.generateElements(
								rejectedDocInnerJoin_tXMLMap_12, row16, Var);

						if (e401_tmp.body == null) {
							e401_tmp.body = new routines.system.Document();
							e401_tmp.body.setDocument(gen_Doc_e401_tXMLMap_12
									.getDocument());
						}

						e401 = e401_tmp;
						e401_save = e401_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tXMLMap_12 = false;

					tos_count_tXMLMap_12++;

					/**
					 * [tXMLMap_12 main ] stop
					 */
					// Start of branch "e401"
					if (e401 != null) {

						/**
						 * [tRESTResponse_10 main ] start
						 */

						currentComponent = "tRESTResponse_10";

						java.io.OutputStream outputStream_tRESTResponse_10 = (java.io.OutputStream) globalMap
								.get("restResponseStream");
						boolean responseAlreadySent_tRESTResponse_10 = globalMap
								.containsKey("restResponse");

						if (null == outputStream_tRESTResponse_10
								&& responseAlreadySent_tRESTResponse_10) {
							throw new RuntimeException(
									"Rest response already sent.");
						} else if (!globalMap.containsKey("restRequest")) {
							throw new RuntimeException(
									"Not received rest request yet.");
						} else {
							Integer restProviderStatusCode_tRESTResponse_10 = 401;

							Object restProviderResponse_tRESTResponse_10 = null;
							if (null != e401.body) {
								restProviderResponse_tRESTResponse_10 = e401.body
										.getDocument();
							}

							java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_10 = new java.util.TreeMap<String, String>(
									String.CASE_INSENSITIVE_ORDER);

							java.util.Map<String, Object> restRequest_tRESTResponse_10 = (java.util.Map<String, Object>) globalMap
									.get("restRequest");
							org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_10 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_10
									.get("MESSAGE_CONTEXT");

							if (null == outputStream_tRESTResponse_10) {
								java.util.Map<String, Object> restResponse_tRESTResponse_10 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_10.put("BODY",
										restProviderResponse_tRESTResponse_10);
								restResponse_tRESTResponse_10
										.put("STATUS",
												restProviderStatusCode_tRESTResponse_10);
								restResponse_tRESTResponse_10
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_10);
								restResponse_tRESTResponse_10.put(
										"drop.json.root.element",
										Boolean.valueOf(true));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_10);

							} else {

								javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_10 = null;
								if (!responseAlreadySent_tRESTResponse_10) {
									org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
													true);

									messageContext_tRESTResponse_10
											.put(org.apache.cxf.message.Message.RESPONSE_CODE,
													restProviderStatusCode_tRESTResponse_10);
									javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_10 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
									for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_10
											.entrySet()) {
										headersMultivaluedMap_tRESTResponse_10
												.putSingle(multivaluedHeader
														.getKey(),
														multivaluedHeader
																.getValue());
									}
									messageContext_tRESTResponse_10
											.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
													headersMultivaluedMap_tRESTResponse_10);

									// String
									// responseContentType_tRESTResponse_10 =
									// (String)
									// messageContext_tRESTResponse_10.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									String responseContentType_tRESTResponse_10 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									if (null == responseContentType_tRESTResponse_10) {
										// this should not be needed, just in
										// case. set it to the first value in
										// the sorted list returned from
										// HttpHeaders
										responseMediaType_tRESTResponse_10 = messageContext_tRESTResponse_10
												.getHttpHeaders()
												.getAcceptableMediaTypes()
												.get(0);
									} else {
										responseMediaType_tRESTResponse_10 = org.apache.cxf.jaxrs.utils.JAXRSUtils
												.toMediaType(responseContentType_tRESTResponse_10);
									}
									globalMap.put("restResponseMediaType",
											responseMediaType_tRESTResponse_10);

									String responseMediaSubType_tRESTResponse_10 = responseMediaType_tRESTResponse_10
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_10
											.equals("xml")
											|| responseMediaSubType_tRESTResponse_10
													.endsWith("+xml")) {
										outputStream_tRESTResponse_10
												.write("<wrapper>".getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"</wrapper>");
									}
									if (responseMediaSubType_tRESTResponse_10
											.equals("json")
											|| responseMediaSubType_tRESTResponse_10
													.endsWith("+json")) {
										outputStream_tRESTResponse_10.write("["
												.getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"]");
									}

									globalMap.put("restResponse", true);
								} else {
									responseMediaType_tRESTResponse_10 = (javax.ws.rs.core.MediaType) globalMap
											.get("restResponseMediaType");
								}

								if (null != restProviderResponse_tRESTResponse_10) {
									String responseMediaSubType_tRESTResponse_10 = responseMediaType_tRESTResponse_10
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_10
											.equals("json")
											|| responseMediaSubType_tRESTResponse_10
													.endsWith("+json")) {
										if (globalMap
												.containsKey("restResponseJsonStarted")) {
											outputStream_tRESTResponse_10
													.write(",".getBytes());
										} else {
											globalMap.put(
													"restResponseJsonStarted",
													true);
										}
									}

									Class<? extends Object> responseBodyClass_tRESTResponse_10 = restProviderResponse_tRESTResponse_10
											.getClass();
									javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_10 = messageContext_tRESTResponse_10
											.getProviders();
									javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_10 = messageBodyProviders_tRESTResponse_10
											.getMessageBodyWriter(
													responseBodyClass_tRESTResponse_10,
													responseBodyClass_tRESTResponse_10,
													null,
													responseMediaType_tRESTResponse_10);
									messageBodyWriter_tRESTResponse_10
											.writeTo(
													restProviderResponse_tRESTResponse_10,
													responseBodyClass_tRESTResponse_10,
													responseBodyClass_tRESTResponse_10,
													new java.lang.annotation.Annotation[] {},
													responseMediaType_tRESTResponse_10,
													null,
													outputStream_tRESTResponse_10);
								}
								// initial variant
								// outputStream_tRESTResponse_10.write(String.valueOf(restProviderResponse_tRESTResponse_10).getBytes());
								outputStream_tRESTResponse_10.flush();
							}
						}

						tos_count_tRESTResponse_10++;

						/**
						 * [tRESTResponse_10 main ] stop
						 */

					} // End of branch "e401"

					/**
					 * [tFixedFlowInput_11 end ] start
					 */

					currentComponent = "tFixedFlowInput_11";

				}
				globalMap.put("tFixedFlowInput_11_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_11", true);
				end_Hash.put("tFixedFlowInput_11", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_11 end ] stop
				 */

				/**
				 * [tXMLMap_12 end ] start
				 */

				currentComponent = "tXMLMap_12";

				ok_Hash.put("tXMLMap_12", true);
				end_Hash.put("tXMLMap_12", System.currentTimeMillis());

				/**
				 * [tXMLMap_12 end ] stop
				 */

				/**
				 * [tRESTResponse_10 end ] start
				 */

				currentComponent = "tRESTResponse_10";

				ok_Hash.put("tRESTResponse_10", true);
				end_Hash.put("tRESTResponse_10", System.currentTimeMillis());

				/**
				 * [tRESTResponse_10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_11 finally ] start
				 */

				currentComponent = "tFixedFlowInput_11";

				/**
				 * [tFixedFlowInput_11 finally ] stop
				 */

				/**
				 * [tXMLMap_12 finally ] start
				 */

				currentComponent = "tXMLMap_12";

				/**
				 * [tXMLMap_12 finally ] stop
				 */

				/**
				 * [tRESTResponse_10 finally ] start
				 */

				currentComponent = "tRESTResponse_10";

				/**
				 * [tRESTResponse_10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_11_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String sso;

		public String getSso() {
			return this.sso;
		}

		public String verify_pccuid;

		public String getVerify_pccuid() {
			return this.verify_pccuid;
		}

		public Boolean verified;

		public Boolean getVerified() {
			return this.verified;
		}

		public String aud;

		public String getAud() {
			return this.aud;
		}

		public String azp;

		public String getAzp() {
			return this.azp;
		}

		public Boolean valid;

		public Boolean getValid() {
			return this.valid;
		}

		public Boolean admin;

		public Boolean getAdmin() {
			return this.admin;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.sso = readString(dis);

					this.verify_pccuid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.verified = null;
					} else {
						this.verified = dis.readBoolean();
					}

					this.aud = readString(dis);

					this.azp = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valid = null;
					} else {
						this.valid = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.admin = null;
					} else {
						this.admin = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sso, dos);

				// String

				writeString(this.verify_pccuid, dos);

				// Boolean

				if (this.verified == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.verified);
				}

				// String

				writeString(this.aud, dos);

				// String

				writeString(this.azp, dos);

				// Boolean

				if (this.valid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.valid);
				}

				// Boolean

				if (this.admin == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.admin);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sso=" + sso);
			sb.append(",verify_pccuid=" + verify_pccuid);
			sb.append(",verified=" + String.valueOf(verified));
			sb.append(",aud=" + aud);
			sb.append(",azp=" + azp);
			sb.append(",valid=" + String.valueOf(valid));
			sb.append(",admin=" + String.valueOf(admin));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRunJob_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();

				/**
				 * [tFlowToIterate_7 begin ] start
				 */

				ok_Hash.put("tFlowToIterate_7", false);
				start_Hash.put("tFlowToIterate_7", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_7";

				int tos_count_tFlowToIterate_7 = 0;

				class BytesLimit65535_tFlowToIterate_7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowToIterate_7().limitLog4jByte();

				int nb_line_tFlowToIterate_7 = 0;
				int counter_tFlowToIterate_7 = 0;

				/**
				 * [tFlowToIterate_7 begin ] stop
				 */

				/**
				 * [tRunJob_3 begin ] start
				 */

				ok_Hash.put("tRunJob_3", false);
				start_Hash.put("tRunJob_3", System.currentTimeMillis());

				currentComponent = "tRunJob_3";

				int tos_count_tRunJob_3 = 0;

				class BytesLimit65535_tRunJob_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRunJob_3().limitLog4jByte();

				/**
				 * [tRunJob_3 begin ] stop
				 */

				/**
				 * [tRunJob_3 main ] start
				 */

				currentComponent = "tRunJob_3";

				java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();

				paraList_tRunJob_3.add("--father_pid=" + pid);

				paraList_tRunJob_3.add("--root_pid=" + rootPid);

				paraList_tRunJob_3.add("--father_node=tRunJob_3");

				paraList_tRunJob_3.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_3.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_3.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_3 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_3 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_3".equals(tRunJobName_tRunJob_3)
						&& childResumePath_tRunJob_3 != null) {
					paraList_tRunJob_3
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_3");

				java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_3 = null;

				obj_tRunJob_3 = ((String) globalMap
						.get("expring1.Authorization"));
				paraList_tRunJob_3.add("--context_param Authorization="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));

				parentContextMap_tRunJob_3.put("Authorization", obj_tRunJob_3);

				esb_mfs_srv.api_jwt_verify_0_1.api_jwt_verify childJob_tRunJob_3 = new esb_mfs_srv.api_jwt_verify_0_1.api_jwt_verify();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_3) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
							.entrySet()) {
						dataSources_tRunJob_3.put(
								talendDataSourceEntry_tRunJob_3.getKey(),
								talendDataSourceEntry_tRunJob_3.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
				}

				childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;

				String[][] childReturn_tRunJob_3 = childJob_tRunJob_3
						.runJob((String[]) paraList_tRunJob_3
								.toArray(new String[paraList_tRunJob_3.size()]));

				errorCode = childJob_tRunJob_3.getErrorCode();

				if (childJob_tRunJob_3.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_3
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getErrorCode());
				}
				if (childJob_tRunJob_3.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_3.getExceptionStackTrace());
				}

				if (childJob_tRunJob_3.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_3.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				for (String[] item_tRunJob_3 : childReturn_tRunJob_3) {
					if (childJob_tRunJob_3.hastBufferOutputComponent() || true) {

						if (0 < item_tRunJob_3.length) {

							row14.sso = item_tRunJob_3[0];

						} else {
							row14.sso = null;
						}

						if (1 < item_tRunJob_3.length) {

							row14.verify_pccuid = item_tRunJob_3[1];

						} else {
							row14.verify_pccuid = null;
						}

						if (2 < item_tRunJob_3.length) {

							row14.verified = ParserUtils
									.parseTo_Boolean(item_tRunJob_3[2]);

						} else {
							row14.verified = null;
						}

						if (3 < item_tRunJob_3.length) {

							row14.aud = item_tRunJob_3[3];

						} else {
							row14.aud = null;
						}

						if (4 < item_tRunJob_3.length) {

							row14.azp = item_tRunJob_3[4];

						} else {
							row14.azp = null;
						}

						if (5 < item_tRunJob_3.length) {

							row14.valid = ParserUtils
									.parseTo_Boolean(item_tRunJob_3[5]);

						} else {
							row14.valid = null;
						}

						if (6 < item_tRunJob_3.length) {

							row14.admin = ParserUtils
									.parseTo_Boolean(item_tRunJob_3[6]);

						} else {
							row14.admin = null;
						}

					}

					tos_count_tRunJob_3++;

					/**
					 * [tRunJob_3 main ] stop
					 */

					/**
					 * [tFlowToIterate_7 main ] start
					 */

					currentComponent = "tFlowToIterate_7";

					globalMap.put("row14.sso", row14.sso);

					globalMap.put("row14.verify_pccuid", row14.verify_pccuid);

					globalMap.put("row14.verified", row14.verified);

					globalMap.put("row14.aud", row14.aud);

					globalMap.put("row14.azp", row14.azp);

					globalMap.put("row14.valid", row14.valid);

					globalMap.put("row14.admin", row14.admin);

					nb_line_tFlowToIterate_7++;
					counter_tFlowToIterate_7++;
					globalMap.put("tFlowToIterate_7_CURRENT_ITERATION",
							counter_tFlowToIterate_7);

					tos_count_tFlowToIterate_7++;

					/**
					 * [tFlowToIterate_7 main ] stop
					 */

				} // C_01

				/**
				 * [tRunJob_3 end ] start
				 */

				currentComponent = "tRunJob_3";

				ok_Hash.put("tRunJob_3", true);
				end_Hash.put("tRunJob_3", System.currentTimeMillis());

				/**
				 * [tRunJob_3 end ] stop
				 */

				/**
				 * [tFlowToIterate_7 end ] start
				 */

				currentComponent = "tFlowToIterate_7";

				globalMap.put("tFlowToIterate_7_NB_LINE",
						nb_line_tFlowToIterate_7);

				ok_Hash.put("tFlowToIterate_7", true);
				end_Hash.put("tFlowToIterate_7", System.currentTimeMillis());

				if (context.debugging
						|| ((Boolean) globalMap.get("row14.verified"))) {

					tJavaFlex_3Process(globalMap);
				}

				if (!context.debugging
						&& !((Boolean) globalMap.get("row14.verified"))) {

					tFixedFlowInput_12Process(globalMap);
				}

				/**
				 * [tFlowToIterate_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_3 finally ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 finally ] stop
				 */

				/**
				 * [tFlowToIterate_7 finally ] start
				 */

				currentComponent = "tFlowToIterate_7";

				/**
				 * [tFlowToIterate_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}

	public static class rndcon3Struct implements
			routines.system.IPersistableRow<rndcon3Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public Integer RANDOM_NUM;

		public Integer getRANDOM_NUM() {
			return this.RANDOM_NUM;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.RANDOM_NUM = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.RANDOM_NUM, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("RANDOM_NUM=" + String.valueOf(RANDOM_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(rndcon3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaFlex_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaFlex_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				rndcon3Struct rndcon3 = new rndcon3Struct();

				/**
				 * [tFlowToIterate_9 begin ] start
				 */

				int NB_ITERATE_tJDBCConnection_3 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_9", false);
				start_Hash.put("tFlowToIterate_9", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_9";

				int tos_count_tFlowToIterate_9 = 0;

				class BytesLimit65535_tFlowToIterate_9 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowToIterate_9().limitLog4jByte();

				int nb_line_tFlowToIterate_9 = 0;
				int counter_tFlowToIterate_9 = 0;

				/**
				 * [tFlowToIterate_9 begin ] stop
				 */

				/**
				 * [tJavaFlex_3 begin ] start
				 */

				ok_Hash.put("tJavaFlex_3", false);
				start_Hash.put("tJavaFlex_3", System.currentTimeMillis());

				currentComponent = "tJavaFlex_3";

				int tos_count_tJavaFlex_3 = 0;

				class BytesLimit65535_tJavaFlex_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaFlex_3().limitLog4jByte();

				/**
				 * [tJavaFlex_3 begin ] stop
				 */

				/**
				 * [tJavaFlex_3 main ] start
				 */

				currentComponent = "tJavaFlex_3";

				// here is the main part of the component,
				// a piece of code executed in the row
				rndcon3.RANDOM_NUM = ThreadLocalRandom.current().nextInt(0,
						context.MAX_CONNECTION) + 1;
				// log

				tos_count_tJavaFlex_3++;

				/**
				 * [tJavaFlex_3 main ] stop
				 */

				/**
				 * [tFlowToIterate_9 main ] start
				 */

				currentComponent = "tFlowToIterate_9";

				globalMap.put("rndcon3.RANDOM_NUM", rndcon3.RANDOM_NUM);

				nb_line_tFlowToIterate_9++;
				counter_tFlowToIterate_9++;
				globalMap.put("tFlowToIterate_9_CURRENT_ITERATION",
						counter_tFlowToIterate_9);

				tos_count_tFlowToIterate_9++;

				/**
				 * [tFlowToIterate_9 main ] stop
				 */
				NB_ITERATE_tJDBCConnection_3++;

				/**
				 * [tJDBCConnection_3 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_3", false);
				start_Hash.put("tJDBCConnection_3", System.currentTimeMillis());

				currentComponent = "tJDBCConnection_3";

				int tos_count_tJDBCConnection_3 = 0;

				class BytesLimit65535_tJDBCConnection_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJDBCConnection_3().limitLog4jByte();

				String url_tJDBCConnection_3 = context.JDBC_URL
						+ "?tcpKeepAlive=true&ApplicationName="
						+ context.MID_NO + "-" + context.APPNAME_PREFIX + "_"
						+ ((Integer) globalMap.get("rndcon3.RANDOM_NUM"));

				String dbUser_tJDBCConnection_3 = context.USERNAME;

				final String decryptedPassword_tJDBCConnection_3 = context.PASSWORD;
				String dbPwd_tJDBCConnection_3 = decryptedPassword_tJDBCConnection_3;

				java.sql.Connection conn_tJDBCConnection_3 = null;

				String sharedConnectionName_tJDBCConnection_3 = context.APPNAME_PREFIX
						+ "_" + ((Integer) globalMap.get("rndcon3.RANDOM_NUM"));
				conn_tJDBCConnection_3 = SharedDBConnection.getDBConnection(
						context.DRIVER_CLASS, url_tJDBCConnection_3,
						dbUser_tJDBCConnection_3, dbPwd_tJDBCConnection_3,
						sharedConnectionName_tJDBCConnection_3);
				if (null != conn_tJDBCConnection_3) {

					conn_tJDBCConnection_3.setAutoCommit(true);
				}

				globalMap.put("conn_tJDBCConnection_3", conn_tJDBCConnection_3);
				globalMap.put("url_tJDBCConnection_3", url_tJDBCConnection_3);
				// globalMap.put("user_tJDBCConnection_3",
				// dbUser_tJDBCConnection_3);
				// globalMap.put("pass_tJDBCConnection_3",
				// dbPwd_tJDBCConnection_3);

				/**
				 * [tJDBCConnection_3 begin ] stop
				 */

				/**
				 * [tJDBCConnection_3 main ] start
				 */

				currentComponent = "tJDBCConnection_3";

				tos_count_tJDBCConnection_3++;

				/**
				 * [tJDBCConnection_3 main ] stop
				 */

				/**
				 * [tJDBCConnection_3 end ] start
				 */

				currentComponent = "tJDBCConnection_3";

				ok_Hash.put("tJDBCConnection_3", true);
				end_Hash.put("tJDBCConnection_3", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_3 end ] stop
				 */

				/**
				 * [tJavaFlex_3 end ] start
				 */

				currentComponent = "tJavaFlex_3";

				ok_Hash.put("tJavaFlex_3", true);
				end_Hash.put("tJavaFlex_3", System.currentTimeMillis());

				/**
				 * [tJavaFlex_3 end ] stop
				 */

				/**
				 * [tFlowToIterate_9 end ] start
				 */

				currentComponent = "tFlowToIterate_9";

				globalMap.put("tFlowToIterate_9_NB_LINE",
						nb_line_tFlowToIterate_9);

				ok_Hash.put("tFlowToIterate_9", true);
				end_Hash.put("tFlowToIterate_9", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_9 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJavaFlex_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaFlex_3 finally ] start
				 */

				currentComponent = "tJavaFlex_3";

				/**
				 * [tJavaFlex_3 finally ] stop
				 */

				/**
				 * [tFlowToIterate_9 finally ] start
				 */

				currentComponent = "tFlowToIterate_9";

				/**
				 * [tFlowToIterate_9 finally ] stop
				 */

				/**
				 * [tJDBCConnection_3 finally ] start
				 */

				currentComponent = "tJDBCConnection_3";

				/**
				 * [tJDBCConnection_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaFlex_3_SUBPROCESS_STATE", 1);
	}

	public static class row41Struct implements
			routines.system.IPersistableRow<row41Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		public String grant_system;

		public String getGrant_system() {
			return this.grant_system;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.file_id = readString(dis);

					this.grant_system = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.file_id, dos);

				// String

				writeString(this.grant_system, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("file_id=" + file_id);
			sb.append(",grant_system=" + grant_system);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row41Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row41Struct row41 = new row41Struct();

				/**
				 * [tFlowToIterate_20 begin ] start
				 */

				ok_Hash.put("tFlowToIterate_20", false);
				start_Hash.put("tFlowToIterate_20", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_20";

				int tos_count_tFlowToIterate_20 = 0;

				class BytesLimit65535_tFlowToIterate_20 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowToIterate_20().limitLog4jByte();

				int nb_line_tFlowToIterate_20 = 0;
				int counter_tFlowToIterate_20 = 0;

				/**
				 * [tFlowToIterate_20 begin ] stop
				 */

				/**
				 * [tJDBCInput_4 begin ] start
				 */

				ok_Hash.put("tJDBCInput_4", false);
				start_Hash.put("tJDBCInput_4", System.currentTimeMillis());

				currentComponent = "tJDBCInput_4";

				int tos_count_tJDBCInput_4 = 0;

				class BytesLimit65535_tJDBCInput_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJDBCInput_4().limitLog4jByte();

				int nb_line_tJDBCInput_4 = 0;
				java.sql.Connection conn_tJDBCInput_4 = null;
				conn_tJDBCInput_4 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_3");

				java.sql.Statement stmt_tJDBCInput_4 = conn_tJDBCInput_4
						.createStatement();

				String dbquery_tJDBCInput_4 = "SELECT file_id, grant_system\nFROM "
						+ context.mapping_table_name
						+ "  \nWHERE file_id = '"
						+ ((String) globalMap.get("expiring1.file_id"))
						+ "' \nAND valid is true\nLIMIT 1";

				globalMap.put("tJDBCInput_4_QUERY", dbquery_tJDBCInput_4);

				java.sql.ResultSet rs_tJDBCInput_4 = null;
				try {
					rs_tJDBCInput_4 = stmt_tJDBCInput_4
							.executeQuery(dbquery_tJDBCInput_4);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_4 = rs_tJDBCInput_4
							.getMetaData();
					int colQtyInRs_tJDBCInput_4 = rsmd_tJDBCInput_4
							.getColumnCount();

					String tmpContent_tJDBCInput_4 = null;

					while (rs_tJDBCInput_4.next()) {
						nb_line_tJDBCInput_4++;

						if (colQtyInRs_tJDBCInput_4 < 1) {
							row41.file_id = null;
						} else {

							row41.file_id = routines.system.JDBCUtil.getString(
									rs_tJDBCInput_4, 1, false);
						}
						if (colQtyInRs_tJDBCInput_4 < 2) {
							row41.grant_system = null;
						} else {

							row41.grant_system = routines.system.JDBCUtil
									.getString(rs_tJDBCInput_4, 2, false);
						}

						/**
						 * [tJDBCInput_4 begin ] stop
						 */

						/**
						 * [tJDBCInput_4 main ] start
						 */

						currentComponent = "tJDBCInput_4";

						tos_count_tJDBCInput_4++;

						/**
						 * [tJDBCInput_4 main ] stop
						 */

						/**
						 * [tFlowToIterate_20 main ] start
						 */

						currentComponent = "tFlowToIterate_20";

						globalMap.put("row41.file_id", row41.file_id);

						globalMap.put("row41.grant_system", row41.grant_system);

						nb_line_tFlowToIterate_20++;
						counter_tFlowToIterate_20++;
						globalMap.put("tFlowToIterate_20_CURRENT_ITERATION",
								counter_tFlowToIterate_20);

						tos_count_tFlowToIterate_20++;

						/**
						 * [tFlowToIterate_20 main ] stop
						 */

						/**
						 * [tJDBCInput_4 end ] start
						 */

						currentComponent = "tJDBCInput_4";

					}
				} finally {
					if (rs_tJDBCInput_4 != null) {
						rs_tJDBCInput_4.close();
					}
					stmt_tJDBCInput_4.close();

				}
				globalMap.put("tJDBCInput_4_NB_LINE", nb_line_tJDBCInput_4);

				ok_Hash.put("tJDBCInput_4", true);
				end_Hash.put("tJDBCInput_4", System.currentTimeMillis());

				/**
				 * [tJDBCInput_4 end ] stop
				 */

				/**
				 * [tFlowToIterate_20 end ] start
				 */

				currentComponent = "tFlowToIterate_20";

				globalMap.put("tFlowToIterate_20_NB_LINE",
						nb_line_tFlowToIterate_20);

				ok_Hash.put("tFlowToIterate_20", true);
				end_Hash.put("tFlowToIterate_20", System.currentTimeMillis());

				if (((Integer) globalMap.get("tFlowToIterate_20_NB_LINE")) > 0
						&& ((String) globalMap.get("row14.azp"))
								.contains((String) globalMap
										.get("row41.grant_system"))) {

					tFixedFlowInput_4Process(globalMap);
				}

				if (((Integer) globalMap.get("tFlowToIterate_20_NB_LINE")) > 0
						&& !((String) globalMap.get("row14.azp"))
								.contains((String) globalMap
										.get("row41.grant_system"))) {

					tFixedFlowInput_27Process(globalMap);
				}

				if (((Integer) globalMap.get("tFlowToIterate_20_NB_LINE")) <= 0) {

					tFixedFlowInput_10Process(globalMap);
				}

				/**
				 * [tFlowToIterate_20 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_4 finally ] start
				 */

				currentComponent = "tJDBCInput_4";

				/**
				 * [tJDBCInput_4 finally ] stop
				 */

				/**
				 * [tFlowToIterate_20 finally ] start
				 */

				currentComponent = "tFlowToIterate_20";

				/**
				 * [tFlowToIterate_20 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		public String original_uri;

		public String getOriginal_uri() {
			return this.original_uri;
		}

		public String grant_system;

		public String getGrant_system() {
			return this.grant_system;
		}

		public Boolean valid;

		public Boolean getValid() {
			return this.valid;
		}

		public String md5sum;

		public String getMd5sum() {
			return this.md5sum;
		}

		public Integer content_length;

		public Integer getContent_length() {
			return this.content_length;
		}

		public String content_disposition;

		public String getContent_disposition() {
			return this.content_disposition;
		}

		public String content_type;

		public String getContent_type() {
			return this.content_type;
		}

		public String ref_file_id;

		public String getRef_file_id() {
			return this.ref_file_id;
		}

		public java.util.Date create_time;

		public java.util.Date getCreate_time() {
			return this.create_time;
		}

		public java.util.Date update_time;

		public java.util.Date getUpdate_time() {
			return this.update_time;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.file_id == null) ? 0 : this.file_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.file_id == null) {
				if (other.file_id != null)
					return false;

			} else if (!this.file_id.equals(other.file_id))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.file_id = this.file_id;
			other.original_uri = this.original_uri;
			other.grant_system = this.grant_system;
			other.valid = this.valid;
			other.md5sum = this.md5sum;
			other.content_length = this.content_length;
			other.content_disposition = this.content_disposition;
			other.content_type = this.content_type;
			other.ref_file_id = this.ref_file_id;
			other.create_time = this.create_time;
			other.update_time = this.update_time;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.file_id = this.file_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.file_id = readString(dis);

					this.original_uri = readString(dis);

					this.grant_system = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valid = null;
					} else {
						this.valid = dis.readBoolean();
					}

					this.md5sum = readString(dis);

					this.content_length = readInteger(dis);

					this.content_disposition = readString(dis);

					this.content_type = readString(dis);

					this.ref_file_id = readString(dis);

					this.create_time = readDate(dis);

					this.update_time = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.file_id, dos);

				// String

				writeString(this.original_uri, dos);

				// String

				writeString(this.grant_system, dos);

				// Boolean

				if (this.valid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.valid);
				}

				// String

				writeString(this.md5sum, dos);

				// Integer

				writeInteger(this.content_length, dos);

				// String

				writeString(this.content_disposition, dos);

				// String

				writeString(this.content_type, dos);

				// String

				writeString(this.ref_file_id, dos);

				// java.util.Date

				writeDate(this.create_time, dos);

				// java.util.Date

				writeDate(this.update_time, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("file_id=" + file_id);
			sb.append(",original_uri=" + original_uri);
			sb.append(",grant_system=" + grant_system);
			sb.append(",valid=" + String.valueOf(valid));
			sb.append(",md5sum=" + md5sum);
			sb.append(",content_length=" + String.valueOf(content_length));
			sb.append(",content_disposition=" + content_disposition);
			sb.append(",content_type=" + content_type);
			sb.append(",ref_file_id=" + ref_file_id);
			sb.append(",create_time=" + String.valueOf(create_time));
			sb.append(",update_time=" + String.valueOf(update_time));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.file_id, other.file_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tJDBCOutput_2 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_2", false);
				start_Hash.put("tJDBCOutput_2", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_2";

				int tos_count_tJDBCOutput_2 = 0;

				class BytesLimit65535_tJDBCOutput_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJDBCOutput_2().limitLog4jByte();

				int updateKeyCount_tJDBCOutput_2 = 1;
				if (updateKeyCount_tJDBCOutput_2 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}

				int nb_line_tJDBCOutput_2 = 0;
				int nb_line_update_tJDBCOutput_2 = 0;
				int nb_line_inserted_tJDBCOutput_2 = 0;
				int nb_line_deleted_tJDBCOutput_2 = 0;
				int nb_line_rejected_tJDBCOutput_2 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_2 = 0;

				int deletedCount_tJDBCOutput_2 = 0;
				int updatedCount_tJDBCOutput_2 = 0;
				int insertedCount_tJDBCOutput_2 = 0;
				int rejectedCount_tJDBCOutput_2 = 0;

				boolean whetherReject_tJDBCOutput_2 = false;

				java.sql.Connection connection_tJDBCOutput_2 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_3");

				String update_tJDBCOutput_2 = "UPDATE "
						+ context.mapping_table_name
						+ " SET valid = ?,update_time = ? WHERE file_id = ?";
				java.sql.PreparedStatement pstmt_tJDBCOutput_2 = connection_tJDBCOutput_2
						.prepareStatement(update_tJDBCOutput_2);

				/**
				 * [tJDBCOutput_2 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_4 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_4", false);
				start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_4";

				int tos_count_tFixedFlowInput_4 = 0;

				class BytesLimit65535_tFixedFlowInput_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_4().limitLog4jByte();

				for (int i_tFixedFlowInput_4 = 0; i_tFixedFlowInput_4 < 1; i_tFixedFlowInput_4++) {

					row6.file_id = ((String) globalMap.get("expiring1.file_id"));

					row6.original_uri = "";

					row6.grant_system = "";

					row6.valid = false;

					row6.md5sum = "";

					row6.content_length = 0;

					row6.content_disposition = "";

					row6.content_type = "";

					row6.ref_file_id = "";

					row6.create_time = new Date();

					row6.update_time = new Date();

					/**
					 * [tFixedFlowInput_4 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_4 main ] start
					 */

					currentComponent = "tFixedFlowInput_4";

					tos_count_tFixedFlowInput_4++;

					/**
					 * [tFixedFlowInput_4 main ] stop
					 */

					/**
					 * [tJDBCOutput_2 main ] start
					 */

					currentComponent = "tJDBCOutput_2";

					whetherReject_tJDBCOutput_2 = false;
					if (row6.valid == null) {
						pstmt_tJDBCOutput_2.setNull(1, java.sql.Types.BOOLEAN);
					} else {
						pstmt_tJDBCOutput_2.setBoolean(1, row6.valid);
					}

					if (row6.update_time != null) {
						pstmt_tJDBCOutput_2.setTimestamp(
								2,
								new java.sql.Timestamp(row6.update_time
										.getTime()));
					} else {
						pstmt_tJDBCOutput_2.setNull(2, java.sql.Types.DATE);
					}

					if (row6.file_id == null) {
						pstmt_tJDBCOutput_2.setNull(3, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_2.setString(3, row6.file_id);
					}

					try {
						updatedCount_tJDBCOutput_2 = updatedCount_tJDBCOutput_2
								+ pstmt_tJDBCOutput_2.executeUpdate();
						nb_line_tJDBCOutput_2++;
					} catch (java.lang.Exception e) {
						whetherReject_tJDBCOutput_2 = true;
						throw (e);
					}
					if (!whetherReject_tJDBCOutput_2) {
					}

					tos_count_tJDBCOutput_2++;

					/**
					 * [tJDBCOutput_2 main ] stop
					 */

					/**
					 * [tFixedFlowInput_4 end ] start
					 */

					currentComponent = "tFixedFlowInput_4";

				}
				globalMap.put("tFixedFlowInput_4_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_4", true);
				end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_4 end ] stop
				 */

				/**
				 * [tJDBCOutput_2 end ] start
				 */

				currentComponent = "tJDBCOutput_2";

				if (pstmt_tJDBCOutput_2 != null) {

					pstmt_tJDBCOutput_2.close();

				}

				nb_line_deleted_tJDBCOutput_2 = nb_line_deleted_tJDBCOutput_2
						+ deletedCount_tJDBCOutput_2;
				nb_line_update_tJDBCOutput_2 = nb_line_update_tJDBCOutput_2
						+ updatedCount_tJDBCOutput_2;
				nb_line_inserted_tJDBCOutput_2 = nb_line_inserted_tJDBCOutput_2
						+ insertedCount_tJDBCOutput_2;
				nb_line_rejected_tJDBCOutput_2 = nb_line_rejected_tJDBCOutput_2
						+ rejectedCount_tJDBCOutput_2;

				globalMap.put("tJDBCOutput_2_NB_LINE", nb_line_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_2);
				globalMap.put("tJDBCOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_2);

				ok_Hash.put("tJDBCOutput_2", true);
				end_Hash.put("tJDBCOutput_2", System.currentTimeMillis());

				if (((Integer) globalMap.get("tJDBCOutput_2_NB_LINE_UPDATED")) > 0) {

					tFixedFlowInput_8Process(globalMap);
				}

				/**
				 * [tJDBCOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_4 finally ] start
				 */

				currentComponent = "tFixedFlowInput_4";

				/**
				 * [tFixedFlowInput_4 finally ] stop
				 */

				/**
				 * [tJDBCOutput_2 finally ] start
				 */

				currentComponent = "tJDBCOutput_2";

				/**
				 * [tJDBCOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 1);
	}

	public static class ok_resp3Struct implements
			routines.system.IPersistableRow<ok_resp3Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ok_resp3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String status_code;

		public String getStatus_code() {
			return this.status_code;
		}

		public String messages;

		public String getMessages() {
			return this.messages;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.status_code = readString(dis);

					this.messages = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status_code, dos);

				// String

				writeString(this.messages, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status_code=" + status_code);
			sb.append(",messages=" + messages);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();
				ok_resp3Struct ok_resp3 = new ok_resp3Struct();

				/**
				 * [tRESTResponse_8 begin ] start
				 */

				ok_Hash.put("tRESTResponse_8", false);
				start_Hash.put("tRESTResponse_8", System.currentTimeMillis());

				currentComponent = "tRESTResponse_8";

				int tos_count_tRESTResponse_8 = 0;

				class BytesLimit65535_tRESTResponse_8 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTResponse_8().limitLog4jByte();

				/**
				 * [tRESTResponse_8 begin ] stop
				 */

				/**
				 * [tXMLMap_10 begin ] start
				 */

				ok_Hash.put("tXMLMap_10", false);
				start_Hash.put("tXMLMap_10", System.currentTimeMillis());

				currentComponent = "tXMLMap_10";

				int tos_count_tXMLMap_10 = 0;

				class BytesLimit65535_tXMLMap_10 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_10().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_10 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_10__Struct {
				}
				Var__tXMLMap_10__Struct Var__tXMLMap_10 = new Var__tXMLMap_10__Struct();
				// ###############################
				// # Outputs initialization
				ok_resp3Struct ok_resp3_tmp = new ok_resp3Struct();
				ok_resp3Struct ok_resp3_save = null;
				// ###############################
				int nb_line_tXMLMap_10 = 0;

				XML_API_tXMLMap_10 xml_api_tXMLMap_10 = new XML_API_tXMLMap_10();

				class GenerateDocument_ok_resp3 {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					String currentValue = null;

					public GenerateDocument_ok_resp3() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						generateOk();
						return this.doc;
					}

					// do some work after document has been generated
					private void generateOk() {
						routines.system.NestXMLTool.replaceDefaultNameSpace(
								this.doc.getRootElement(), null);
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin, row9Struct row9,
							Var__tXMLMap_10__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = org.dom4j.DocumentHelper
									.createElement("root");
							doc.add(root);
							subTreeRootParent = root;
							org.dom4j.Element root_0 = null;
							root_0 = root.addElement("STATUS");
							valueMap.put("root_0", "1");
							if (valueMap.get("root_0") != null) {
								routines.system.NestXMLTool.setText(root_0,
										FormatterUtils.format("1", null));
							}
							org.dom4j.Element root_1 = null;
							root_1 = root.addElement("FILE_ID");
							valueMap.put("root_1", row9.file_id);
							if (valueMap.get("root_1") != null) {
								routines.system.NestXMLTool.setText(root_1,
										FormatterUtils.format(row9.file_id,
												null));
							}
							org.dom4j.Element root_2 = null;
							root_2 = root.addElement("RETURN_CODE");
							valueMap.put("root_2", row9.status_code);
							if (valueMap.get("root_2") != null) {
								routines.system.NestXMLTool.setText(root_2,
										FormatterUtils.format(row9.status_code,
												null));
							}
							org.dom4j.Element root_3 = null;
							root_3 = root.addElement("RETURN_MSG");
							valueMap.put("root_3", row9.messages);
							if (valueMap.get("root_3") != null) {
								routines.system.NestXMLTool.setText(root_3,
										FormatterUtils.format(row9.messages,
												null));
							}
							org.dom4j.Element root_4 = null;
							root_4 = root.addElement("CONTENT");
							valueMap.put("root_4", "");
							if (valueMap.get("root_4") != null) {
								routines.system.NestXMLTool.setText(root_4,
										FormatterUtils.format("", null));
							}
							org.dom4j.Element root_5 = null;
							root_5 = root.addElement("MID_NO");
							valueMap.put("root_5", context.MID_NO);
							if (valueMap.get("root_5") != null) {
								routines.system.NestXMLTool.setText(root_5,
										FormatterUtils.format(context.MID_NO,
												null));
							}
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
					}
				}

				/**
				 * [tXMLMap_10 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_8 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_8", false);
				start_Hash.put("tFixedFlowInput_8", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_8";

				int tos_count_tFixedFlowInput_8 = 0;

				class BytesLimit65535_tFixedFlowInput_8 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_8().limitLog4jByte();

				for (int i_tFixedFlowInput_8 = 0; i_tFixedFlowInput_8 < 1; i_tFixedFlowInput_8++) {

					row9.status_code = "200";

					row9.messages = "File mapping expired";

					row9.file_id = ((String) globalMap.get("expiring1.file_id"));

					/**
					 * [tFixedFlowInput_8 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_8 main ] start
					 */

					currentComponent = "tFixedFlowInput_8";

					tos_count_tFixedFlowInput_8++;

					/**
					 * [tFixedFlowInput_8 main ] stop
					 */

					/**
					 * [tXMLMap_10 main ] start
					 */

					currentComponent = "tXMLMap_10";

					boolean rejectedInnerJoin_tXMLMap_10 = false;
					boolean rejectedDocInnerJoin_tXMLMap_10 = false;
					boolean mainRowRejected_tXMLMap_10 = false;
					boolean isMatchDocRowtXMLMap_10 = false;

					GenerateDocument_ok_resp3 gen_Doc_ok_resp3_tXMLMap_10 = new GenerateDocument_ok_resp3();
					ok_resp3_tmp.body = null;

					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tXMLMap_10__Struct Var = Var__tXMLMap_10;
						// ###############################
						// # Output tables

						ok_resp3 = null;

						// # Output table : 'ok_resp3'

						gen_Doc_ok_resp3_tXMLMap_10.generateElements(
								rejectedDocInnerJoin_tXMLMap_10, row9, Var);

						if (ok_resp3_tmp.body == null) {
							ok_resp3_tmp.body = new routines.system.Document();
							ok_resp3_tmp.body
									.setDocument(gen_Doc_ok_resp3_tXMLMap_10
											.getDocument());
						}

						ok_resp3 = ok_resp3_tmp;
						ok_resp3_save = ok_resp3_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tXMLMap_10 = false;

					tos_count_tXMLMap_10++;

					/**
					 * [tXMLMap_10 main ] stop
					 */
					// Start of branch "ok_resp3"
					if (ok_resp3 != null) {

						/**
						 * [tRESTResponse_8 main ] start
						 */

						currentComponent = "tRESTResponse_8";

						java.io.OutputStream outputStream_tRESTResponse_8 = (java.io.OutputStream) globalMap
								.get("restResponseStream");
						boolean responseAlreadySent_tRESTResponse_8 = globalMap
								.containsKey("restResponse");

						if (null == outputStream_tRESTResponse_8
								&& responseAlreadySent_tRESTResponse_8) {
							throw new RuntimeException(
									"Rest response already sent.");
						} else if (!globalMap.containsKey("restRequest")) {
							throw new RuntimeException(
									"Not received rest request yet.");
						} else {
							Integer restProviderStatusCode_tRESTResponse_8 = 201;

							Object restProviderResponse_tRESTResponse_8 = null;
							if (null != ok_resp3.body) {
								restProviderResponse_tRESTResponse_8 = ok_resp3.body
										.getDocument();
							}

							java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_8 = new java.util.TreeMap<String, String>(
									String.CASE_INSENSITIVE_ORDER);

							java.util.Map<String, Object> restRequest_tRESTResponse_8 = (java.util.Map<String, Object>) globalMap
									.get("restRequest");
							org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_8 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_8
									.get("MESSAGE_CONTEXT");

							if (null == outputStream_tRESTResponse_8) {
								java.util.Map<String, Object> restResponse_tRESTResponse_8 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_8.put("BODY",
										restProviderResponse_tRESTResponse_8);
								restResponse_tRESTResponse_8.put("STATUS",
										restProviderStatusCode_tRESTResponse_8);
								restResponse_tRESTResponse_8
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_8);
								restResponse_tRESTResponse_8.put(
										"drop.json.root.element",
										Boolean.valueOf(true));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_8);

							} else {

								javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_8 = null;
								if (!responseAlreadySent_tRESTResponse_8) {
									org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
													true);

									messageContext_tRESTResponse_8
											.put(org.apache.cxf.message.Message.RESPONSE_CODE,
													restProviderStatusCode_tRESTResponse_8);
									javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_8 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
									for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_8
											.entrySet()) {
										headersMultivaluedMap_tRESTResponse_8
												.putSingle(multivaluedHeader
														.getKey(),
														multivaluedHeader
																.getValue());
									}
									messageContext_tRESTResponse_8
											.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
													headersMultivaluedMap_tRESTResponse_8);

									// String
									// responseContentType_tRESTResponse_8 =
									// (String)
									// messageContext_tRESTResponse_8.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									String responseContentType_tRESTResponse_8 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									if (null == responseContentType_tRESTResponse_8) {
										// this should not be needed, just in
										// case. set it to the first value in
										// the sorted list returned from
										// HttpHeaders
										responseMediaType_tRESTResponse_8 = messageContext_tRESTResponse_8
												.getHttpHeaders()
												.getAcceptableMediaTypes()
												.get(0);
									} else {
										responseMediaType_tRESTResponse_8 = org.apache.cxf.jaxrs.utils.JAXRSUtils
												.toMediaType(responseContentType_tRESTResponse_8);
									}
									globalMap.put("restResponseMediaType",
											responseMediaType_tRESTResponse_8);

									String responseMediaSubType_tRESTResponse_8 = responseMediaType_tRESTResponse_8
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_8
											.equals("xml")
											|| responseMediaSubType_tRESTResponse_8
													.endsWith("+xml")) {
										outputStream_tRESTResponse_8
												.write("<wrapper>".getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"</wrapper>");
									}
									if (responseMediaSubType_tRESTResponse_8
											.equals("json")
											|| responseMediaSubType_tRESTResponse_8
													.endsWith("+json")) {
										outputStream_tRESTResponse_8.write("["
												.getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"]");
									}

									globalMap.put("restResponse", true);
								} else {
									responseMediaType_tRESTResponse_8 = (javax.ws.rs.core.MediaType) globalMap
											.get("restResponseMediaType");
								}

								if (null != restProviderResponse_tRESTResponse_8) {
									String responseMediaSubType_tRESTResponse_8 = responseMediaType_tRESTResponse_8
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_8
											.equals("json")
											|| responseMediaSubType_tRESTResponse_8
													.endsWith("+json")) {
										if (globalMap
												.containsKey("restResponseJsonStarted")) {
											outputStream_tRESTResponse_8
													.write(",".getBytes());
										} else {
											globalMap.put(
													"restResponseJsonStarted",
													true);
										}
									}

									Class<? extends Object> responseBodyClass_tRESTResponse_8 = restProviderResponse_tRESTResponse_8
											.getClass();
									javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_8 = messageContext_tRESTResponse_8
											.getProviders();
									javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_8 = messageBodyProviders_tRESTResponse_8
											.getMessageBodyWriter(
													responseBodyClass_tRESTResponse_8,
													responseBodyClass_tRESTResponse_8,
													null,
													responseMediaType_tRESTResponse_8);
									messageBodyWriter_tRESTResponse_8
											.writeTo(
													restProviderResponse_tRESTResponse_8,
													responseBodyClass_tRESTResponse_8,
													responseBodyClass_tRESTResponse_8,
													new java.lang.annotation.Annotation[] {},
													responseMediaType_tRESTResponse_8,
													null,
													outputStream_tRESTResponse_8);
								}
								// initial variant
								// outputStream_tRESTResponse_8.write(String.valueOf(restProviderResponse_tRESTResponse_8).getBytes());
								outputStream_tRESTResponse_8.flush();
							}
						}

						tos_count_tRESTResponse_8++;

						/**
						 * [tRESTResponse_8 main ] stop
						 */

					} // End of branch "ok_resp3"

					/**
					 * [tFixedFlowInput_8 end ] start
					 */

					currentComponent = "tFixedFlowInput_8";

				}
				globalMap.put("tFixedFlowInput_8_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_8", true);
				end_Hash.put("tFixedFlowInput_8", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_8 end ] stop
				 */

				/**
				 * [tXMLMap_10 end ] start
				 */

				currentComponent = "tXMLMap_10";

				ok_Hash.put("tXMLMap_10", true);
				end_Hash.put("tXMLMap_10", System.currentTimeMillis());

				/**
				 * [tXMLMap_10 end ] stop
				 */

				/**
				 * [tRESTResponse_8 end ] start
				 */

				currentComponent = "tRESTResponse_8";

				ok_Hash.put("tRESTResponse_8", true);
				end_Hash.put("tRESTResponse_8", System.currentTimeMillis());

				/**
				 * [tRESTResponse_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_8 finally ] start
				 */

				currentComponent = "tFixedFlowInput_8";

				/**
				 * [tFixedFlowInput_8 finally ] stop
				 */

				/**
				 * [tXMLMap_10 finally ] start
				 */

				currentComponent = "tXMLMap_10";

				/**
				 * [tXMLMap_10 finally ] stop
				 */

				/**
				 * [tRESTResponse_8 finally ] start
				 */

				currentComponent = "tRESTResponse_8";

				/**
				 * [tRESTResponse_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_8_SUBPROCESS_STATE", 1);
	}

	public static class no500_3Struct implements
			routines.system.IPersistableRow<no500_3Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(no500_3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String status_code;

		public String getStatus_code() {
			return this.status_code;
		}

		public String status_message;

		public String getStatus_message() {
			return this.status_message;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.status_code = readString(dis);

					this.status_message = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status_code, dos);

				// String

				writeString(this.status_message, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status_code=" + status_code);
			sb.append(",status_message=" + status_message);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();
				no500_3Struct no500_3 = new no500_3Struct();

				/**
				 * [tRESTResponse_7 begin ] start
				 */

				ok_Hash.put("tRESTResponse_7", false);
				start_Hash.put("tRESTResponse_7", System.currentTimeMillis());

				currentComponent = "tRESTResponse_7";

				int tos_count_tRESTResponse_7 = 0;

				class BytesLimit65535_tRESTResponse_7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTResponse_7().limitLog4jByte();

				/**
				 * [tRESTResponse_7 begin ] stop
				 */

				/**
				 * [tXMLMap_9 begin ] start
				 */

				ok_Hash.put("tXMLMap_9", false);
				start_Hash.put("tXMLMap_9", System.currentTimeMillis());

				currentComponent = "tXMLMap_9";

				int tos_count_tXMLMap_9 = 0;

				class BytesLimit65535_tXMLMap_9 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_9().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_9 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_9__Struct {
				}
				Var__tXMLMap_9__Struct Var__tXMLMap_9 = new Var__tXMLMap_9__Struct();
				// ###############################
				// # Outputs initialization
				no500_3Struct no500_3_tmp = new no500_3Struct();
				no500_3Struct no500_3_save = null;
				// ###############################
				int nb_line_tXMLMap_9 = 0;

				XML_API_tXMLMap_9 xml_api_tXMLMap_9 = new XML_API_tXMLMap_9();

				class GenerateDocument_no500_3 {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					String currentValue = null;

					public GenerateDocument_no500_3() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						generateOk();
						return this.doc;
					}

					// do some work after document has been generated
					private void generateOk() {
						routines.system.NestXMLTool.replaceDefaultNameSpace(
								this.doc.getRootElement(), null);
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin, row8Struct row8,
							Var__tXMLMap_9__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = org.dom4j.DocumentHelper
									.createElement("root");
							doc.add(root);
							subTreeRootParent = root;
							org.dom4j.Element root_0 = null;
							root_0 = root.addElement("STATUS");
							valueMap.put("root_0", "0");
							if (valueMap.get("root_0") != null) {
								routines.system.NestXMLTool.setText(root_0,
										FormatterUtils.format("0", null));
							}
							org.dom4j.Element root_1 = null;
							root_1 = root.addElement("FILE_ID");
							valueMap.put("root_1", row8.file_id);
							if (valueMap.get("root_1") != null) {
								routines.system.NestXMLTool.setText(root_1,
										FormatterUtils.format(row8.file_id,
												null));
							}
							org.dom4j.Element root_2 = null;
							root_2 = root.addElement("RETURN_CODE");
							valueMap.put("root_2", row8.status_code);
							if (valueMap.get("root_2") != null) {
								routines.system.NestXMLTool.setText(root_2,
										FormatterUtils.format(row8.status_code,
												null));
							}
							org.dom4j.Element root_3 = null;
							root_3 = root.addElement("RETURN_MSG");
							valueMap.put("root_3", row8.status_message);
							if (valueMap.get("root_3") != null) {
								routines.system.NestXMLTool.setText(root_3,
										FormatterUtils.format(
												row8.status_message, null));
							}
							org.dom4j.Element root_4 = null;
							root_4 = root.addElement("CONTENT");
							valueMap.put("root_4", "file_id : " + row8.file_id);
							if (valueMap.get("root_4") != null) {
								routines.system.NestXMLTool.setText(
										root_4,
										FormatterUtils.format("file_id : "
												+ row8.file_id, null));
							}
							org.dom4j.Element root_5 = null;
							root_5 = root.addElement("MID_NO");
							valueMap.put("root_5", context.MID_NO);
							if (valueMap.get("root_5") != null) {
								routines.system.NestXMLTool.setText(root_5,
										FormatterUtils.format(context.MID_NO,
												null));
							}
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
					}
				}

				/**
				 * [tXMLMap_9 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_7 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_7", false);
				start_Hash.put("tFixedFlowInput_7", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_7";

				int tos_count_tFixedFlowInput_7 = 0;

				class BytesLimit65535_tFixedFlowInput_7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_7().limitLog4jByte();

				for (int i_tFixedFlowInput_7 = 0; i_tFixedFlowInput_7 < 1; i_tFixedFlowInput_7++) {

					row8.status_code = "500";

					row8.status_message = "File mapping expiring failed";

					row8.file_id = ((String) globalMap.get("expiring1.file_id"));

					/**
					 * [tFixedFlowInput_7 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_7 main ] start
					 */

					currentComponent = "tFixedFlowInput_7";

					tos_count_tFixedFlowInput_7++;

					/**
					 * [tFixedFlowInput_7 main ] stop
					 */

					/**
					 * [tXMLMap_9 main ] start
					 */

					currentComponent = "tXMLMap_9";

					boolean rejectedInnerJoin_tXMLMap_9 = false;
					boolean rejectedDocInnerJoin_tXMLMap_9 = false;
					boolean mainRowRejected_tXMLMap_9 = false;
					boolean isMatchDocRowtXMLMap_9 = false;

					GenerateDocument_no500_3 gen_Doc_no500_3_tXMLMap_9 = new GenerateDocument_no500_3();
					no500_3_tmp.body = null;

					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tXMLMap_9__Struct Var = Var__tXMLMap_9;
						// ###############################
						// # Output tables

						no500_3 = null;

						// # Output table : 'no500_3'

						gen_Doc_no500_3_tXMLMap_9.generateElements(
								rejectedDocInnerJoin_tXMLMap_9, row8, Var);

						if (no500_3_tmp.body == null) {
							no500_3_tmp.body = new routines.system.Document();
							no500_3_tmp.body
									.setDocument(gen_Doc_no500_3_tXMLMap_9
											.getDocument());
						}

						no500_3 = no500_3_tmp;
						no500_3_save = no500_3_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tXMLMap_9 = false;

					tos_count_tXMLMap_9++;

					/**
					 * [tXMLMap_9 main ] stop
					 */
					// Start of branch "no500_3"
					if (no500_3 != null) {

						/**
						 * [tRESTResponse_7 main ] start
						 */

						currentComponent = "tRESTResponse_7";

						java.io.OutputStream outputStream_tRESTResponse_7 = (java.io.OutputStream) globalMap
								.get("restResponseStream");
						boolean responseAlreadySent_tRESTResponse_7 = globalMap
								.containsKey("restResponse");

						if (null == outputStream_tRESTResponse_7
								&& responseAlreadySent_tRESTResponse_7) {
							throw new RuntimeException(
									"Rest response already sent.");
						} else if (!globalMap.containsKey("restRequest")) {
							throw new RuntimeException(
									"Not received rest request yet.");
						} else {
							Integer restProviderStatusCode_tRESTResponse_7 = 500;

							Object restProviderResponse_tRESTResponse_7 = null;
							if (null != no500_3.body) {
								restProviderResponse_tRESTResponse_7 = no500_3.body
										.getDocument();
							}

							java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_7 = new java.util.TreeMap<String, String>(
									String.CASE_INSENSITIVE_ORDER);

							java.util.Map<String, Object> restRequest_tRESTResponse_7 = (java.util.Map<String, Object>) globalMap
									.get("restRequest");
							org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_7 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_7
									.get("MESSAGE_CONTEXT");

							if (null == outputStream_tRESTResponse_7) {
								java.util.Map<String, Object> restResponse_tRESTResponse_7 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_7.put("BODY",
										restProviderResponse_tRESTResponse_7);
								restResponse_tRESTResponse_7.put("STATUS",
										restProviderStatusCode_tRESTResponse_7);
								restResponse_tRESTResponse_7
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_7);
								restResponse_tRESTResponse_7.put(
										"drop.json.root.element",
										Boolean.valueOf(true));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_7);

							} else {

								javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_7 = null;
								if (!responseAlreadySent_tRESTResponse_7) {
									org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
													true);

									messageContext_tRESTResponse_7
											.put(org.apache.cxf.message.Message.RESPONSE_CODE,
													restProviderStatusCode_tRESTResponse_7);
									javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_7 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
									for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_7
											.entrySet()) {
										headersMultivaluedMap_tRESTResponse_7
												.putSingle(multivaluedHeader
														.getKey(),
														multivaluedHeader
																.getValue());
									}
									messageContext_tRESTResponse_7
											.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
													headersMultivaluedMap_tRESTResponse_7);

									// String
									// responseContentType_tRESTResponse_7 =
									// (String)
									// messageContext_tRESTResponse_7.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									String responseContentType_tRESTResponse_7 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									if (null == responseContentType_tRESTResponse_7) {
										// this should not be needed, just in
										// case. set it to the first value in
										// the sorted list returned from
										// HttpHeaders
										responseMediaType_tRESTResponse_7 = messageContext_tRESTResponse_7
												.getHttpHeaders()
												.getAcceptableMediaTypes()
												.get(0);
									} else {
										responseMediaType_tRESTResponse_7 = org.apache.cxf.jaxrs.utils.JAXRSUtils
												.toMediaType(responseContentType_tRESTResponse_7);
									}
									globalMap.put("restResponseMediaType",
											responseMediaType_tRESTResponse_7);

									String responseMediaSubType_tRESTResponse_7 = responseMediaType_tRESTResponse_7
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_7
											.equals("xml")
											|| responseMediaSubType_tRESTResponse_7
													.endsWith("+xml")) {
										outputStream_tRESTResponse_7
												.write("<wrapper>".getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"</wrapper>");
									}
									if (responseMediaSubType_tRESTResponse_7
											.equals("json")
											|| responseMediaSubType_tRESTResponse_7
													.endsWith("+json")) {
										outputStream_tRESTResponse_7.write("["
												.getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"]");
									}

									globalMap.put("restResponse", true);
								} else {
									responseMediaType_tRESTResponse_7 = (javax.ws.rs.core.MediaType) globalMap
											.get("restResponseMediaType");
								}

								if (null != restProviderResponse_tRESTResponse_7) {
									String responseMediaSubType_tRESTResponse_7 = responseMediaType_tRESTResponse_7
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_7
											.equals("json")
											|| responseMediaSubType_tRESTResponse_7
													.endsWith("+json")) {
										if (globalMap
												.containsKey("restResponseJsonStarted")) {
											outputStream_tRESTResponse_7
													.write(",".getBytes());
										} else {
											globalMap.put(
													"restResponseJsonStarted",
													true);
										}
									}

									Class<? extends Object> responseBodyClass_tRESTResponse_7 = restProviderResponse_tRESTResponse_7
											.getClass();
									javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_7 = messageContext_tRESTResponse_7
											.getProviders();
									javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_7 = messageBodyProviders_tRESTResponse_7
											.getMessageBodyWriter(
													responseBodyClass_tRESTResponse_7,
													responseBodyClass_tRESTResponse_7,
													null,
													responseMediaType_tRESTResponse_7);
									messageBodyWriter_tRESTResponse_7
											.writeTo(
													restProviderResponse_tRESTResponse_7,
													responseBodyClass_tRESTResponse_7,
													responseBodyClass_tRESTResponse_7,
													new java.lang.annotation.Annotation[] {},
													responseMediaType_tRESTResponse_7,
													null,
													outputStream_tRESTResponse_7);
								}
								// initial variant
								// outputStream_tRESTResponse_7.write(String.valueOf(restProviderResponse_tRESTResponse_7).getBytes());
								outputStream_tRESTResponse_7.flush();
							}
						}

						tos_count_tRESTResponse_7++;

						/**
						 * [tRESTResponse_7 main ] stop
						 */

					} // End of branch "no500_3"

					/**
					 * [tFixedFlowInput_7 end ] start
					 */

					currentComponent = "tFixedFlowInput_7";

				}
				globalMap.put("tFixedFlowInput_7_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_7", true);
				end_Hash.put("tFixedFlowInput_7", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_7 end ] stop
				 */

				/**
				 * [tXMLMap_9 end ] start
				 */

				currentComponent = "tXMLMap_9";

				ok_Hash.put("tXMLMap_9", true);
				end_Hash.put("tXMLMap_9", System.currentTimeMillis());

				/**
				 * [tXMLMap_9 end ] stop
				 */

				/**
				 * [tRESTResponse_7 end ] start
				 */

				currentComponent = "tRESTResponse_7";

				ok_Hash.put("tRESTResponse_7", true);
				end_Hash.put("tRESTResponse_7", System.currentTimeMillis());

				/**
				 * [tRESTResponse_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_7 finally ] start
				 */

				currentComponent = "tFixedFlowInput_7";

				/**
				 * [tFixedFlowInput_7 finally ] stop
				 */

				/**
				 * [tXMLMap_9 finally ] start
				 */

				currentComponent = "tXMLMap_9";

				/**
				 * [tXMLMap_9 finally ] stop
				 */

				/**
				 * [tRESTResponse_7 finally ] start
				 */

				currentComponent = "tRESTResponse_7";

				/**
				 * [tRESTResponse_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_7_SUBPROCESS_STATE", 1);
	}

	public static class e401_3aStruct implements
			routines.system.IPersistableRow<e401_3aStruct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(e401_3aStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row42Struct implements
			routines.system.IPersistableRow<row42Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String status_code;

		public String getStatus_code() {
			return this.status_code;
		}

		public String status_message;

		public String getStatus_message() {
			return this.status_message;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.status_code = readString(dis);

					this.status_message = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status_code, dos);

				// String

				writeString(this.status_message, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status_code=" + status_code);
			sb.append(",status_message=" + status_message);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row42Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_27Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_27_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row42Struct row42 = new row42Struct();
				e401_3aStruct e401_3a = new e401_3aStruct();

				/**
				 * [tRESTResponse_23 begin ] start
				 */

				ok_Hash.put("tRESTResponse_23", false);
				start_Hash.put("tRESTResponse_23", System.currentTimeMillis());

				currentComponent = "tRESTResponse_23";

				int tos_count_tRESTResponse_23 = 0;

				class BytesLimit65535_tRESTResponse_23 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTResponse_23().limitLog4jByte();

				/**
				 * [tRESTResponse_23 begin ] stop
				 */

				/**
				 * [tXMLMap_27 begin ] start
				 */

				ok_Hash.put("tXMLMap_27", false);
				start_Hash.put("tXMLMap_27", System.currentTimeMillis());

				currentComponent = "tXMLMap_27";

				int tos_count_tXMLMap_27 = 0;

				class BytesLimit65535_tXMLMap_27 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_27().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_27 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_27__Struct {
				}
				Var__tXMLMap_27__Struct Var__tXMLMap_27 = new Var__tXMLMap_27__Struct();
				// ###############################
				// # Outputs initialization
				e401_3aStruct e401_3a_tmp = new e401_3aStruct();
				e401_3aStruct e401_3a_save = null;
				// ###############################
				int nb_line_tXMLMap_27 = 0;

				XML_API_tXMLMap_27 xml_api_tXMLMap_27 = new XML_API_tXMLMap_27();

				class GenerateDocument_e401_3a {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					String currentValue = null;

					public GenerateDocument_e401_3a() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						generateOk();
						return this.doc;
					}

					// do some work after document has been generated
					private void generateOk() {
						routines.system.NestXMLTool.replaceDefaultNameSpace(
								this.doc.getRootElement(), null);
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin,
							row42Struct row42, Var__tXMLMap_27__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = org.dom4j.DocumentHelper
									.createElement("root");
							doc.add(root);
							subTreeRootParent = root;
							org.dom4j.Element root_0 = null;
							root_0 = root.addElement("STATUS");
							valueMap.put("root_0", "0");
							if (valueMap.get("root_0") != null) {
								routines.system.NestXMLTool.setText(root_0,
										FormatterUtils.format("0", null));
							}
							org.dom4j.Element root_1 = null;
							root_1 = root.addElement("FILE_ID");
							valueMap.put("root_1", row42.file_id);
							if (valueMap.get("root_1") != null) {
								routines.system.NestXMLTool.setText(root_1,
										FormatterUtils.format(row42.file_id,
												null));
							}
							org.dom4j.Element root_2 = null;
							root_2 = root.addElement("RETURN_CODE");
							valueMap.put("root_2", row42.status_code);
							if (valueMap.get("root_2") != null) {
								routines.system.NestXMLTool.setText(root_2,
										FormatterUtils.format(
												row42.status_code, null));
							}
							org.dom4j.Element root_3 = null;
							root_3 = root.addElement("RETURN_MSG");
							valueMap.put("root_3", row42.status_message);
							if (valueMap.get("root_3") != null) {
								routines.system.NestXMLTool.setText(root_3,
										FormatterUtils.format(
												row42.status_message, null));
							}
							org.dom4j.Element root_4 = null;
							root_4 = root.addElement("CONTENT");
							valueMap.put("root_4", "file_id : " + row42.file_id);
							if (valueMap.get("root_4") != null) {
								routines.system.NestXMLTool.setText(
										root_4,
										FormatterUtils.format("file_id : "
												+ row42.file_id, null));
							}
							org.dom4j.Element root_5 = null;
							root_5 = root.addElement("MID_NO");
							valueMap.put("root_5", context.MID_NO);
							if (valueMap.get("root_5") != null) {
								routines.system.NestXMLTool.setText(root_5,
										FormatterUtils.format(context.MID_NO,
												null));
							}
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
					}
				}

				/**
				 * [tXMLMap_27 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_27 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_27", false);
				start_Hash
						.put("tFixedFlowInput_27", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_27";

				int tos_count_tFixedFlowInput_27 = 0;

				class BytesLimit65535_tFixedFlowInput_27 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_27().limitLog4jByte();

				for (int i_tFixedFlowInput_27 = 0; i_tFixedFlowInput_27 < 1; i_tFixedFlowInput_27++) {

					row42.status_code = "401";

					row42.status_message = "Authority fail";

					row42.file_id = ((String) globalMap
							.get("expiring1.file_id"));

					/**
					 * [tFixedFlowInput_27 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_27 main ] start
					 */

					currentComponent = "tFixedFlowInput_27";

					tos_count_tFixedFlowInput_27++;

					/**
					 * [tFixedFlowInput_27 main ] stop
					 */

					/**
					 * [tXMLMap_27 main ] start
					 */

					currentComponent = "tXMLMap_27";

					boolean rejectedInnerJoin_tXMLMap_27 = false;
					boolean rejectedDocInnerJoin_tXMLMap_27 = false;
					boolean mainRowRejected_tXMLMap_27 = false;
					boolean isMatchDocRowtXMLMap_27 = false;

					GenerateDocument_e401_3a gen_Doc_e401_3a_tXMLMap_27 = new GenerateDocument_e401_3a();
					e401_3a_tmp.body = null;

					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tXMLMap_27__Struct Var = Var__tXMLMap_27;
						// ###############################
						// # Output tables

						e401_3a = null;

						// # Output table : 'e401_3a'

						gen_Doc_e401_3a_tXMLMap_27.generateElements(
								rejectedDocInnerJoin_tXMLMap_27, row42, Var);

						if (e401_3a_tmp.body == null) {
							e401_3a_tmp.body = new routines.system.Document();
							e401_3a_tmp.body
									.setDocument(gen_Doc_e401_3a_tXMLMap_27
											.getDocument());
						}

						e401_3a = e401_3a_tmp;
						e401_3a_save = e401_3a_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tXMLMap_27 = false;

					tos_count_tXMLMap_27++;

					/**
					 * [tXMLMap_27 main ] stop
					 */
					// Start of branch "e401_3a"
					if (e401_3a != null) {

						/**
						 * [tRESTResponse_23 main ] start
						 */

						currentComponent = "tRESTResponse_23";

						java.io.OutputStream outputStream_tRESTResponse_23 = (java.io.OutputStream) globalMap
								.get("restResponseStream");
						boolean responseAlreadySent_tRESTResponse_23 = globalMap
								.containsKey("restResponse");

						if (null == outputStream_tRESTResponse_23
								&& responseAlreadySent_tRESTResponse_23) {
							throw new RuntimeException(
									"Rest response already sent.");
						} else if (!globalMap.containsKey("restRequest")) {
							throw new RuntimeException(
									"Not received rest request yet.");
						} else {
							Integer restProviderStatusCode_tRESTResponse_23 = 401;

							Object restProviderResponse_tRESTResponse_23 = null;
							if (null != e401_3a.body) {
								restProviderResponse_tRESTResponse_23 = e401_3a.body
										.getDocument();
							}

							java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_23 = new java.util.TreeMap<String, String>(
									String.CASE_INSENSITIVE_ORDER);

							java.util.Map<String, Object> restRequest_tRESTResponse_23 = (java.util.Map<String, Object>) globalMap
									.get("restRequest");
							org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_23 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_23
									.get("MESSAGE_CONTEXT");

							if (null == outputStream_tRESTResponse_23) {
								java.util.Map<String, Object> restResponse_tRESTResponse_23 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_23.put("BODY",
										restProviderResponse_tRESTResponse_23);
								restResponse_tRESTResponse_23
										.put("STATUS",
												restProviderStatusCode_tRESTResponse_23);
								restResponse_tRESTResponse_23
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_23);
								restResponse_tRESTResponse_23.put(
										"drop.json.root.element",
										Boolean.valueOf(true));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_23);

							} else {

								javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_23 = null;
								if (!responseAlreadySent_tRESTResponse_23) {
									org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
													true);

									messageContext_tRESTResponse_23
											.put(org.apache.cxf.message.Message.RESPONSE_CODE,
													restProviderStatusCode_tRESTResponse_23);
									javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_23 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
									for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_23
											.entrySet()) {
										headersMultivaluedMap_tRESTResponse_23
												.putSingle(multivaluedHeader
														.getKey(),
														multivaluedHeader
																.getValue());
									}
									messageContext_tRESTResponse_23
											.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
													headersMultivaluedMap_tRESTResponse_23);

									// String
									// responseContentType_tRESTResponse_23 =
									// (String)
									// messageContext_tRESTResponse_23.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									String responseContentType_tRESTResponse_23 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									if (null == responseContentType_tRESTResponse_23) {
										// this should not be needed, just in
										// case. set it to the first value in
										// the sorted list returned from
										// HttpHeaders
										responseMediaType_tRESTResponse_23 = messageContext_tRESTResponse_23
												.getHttpHeaders()
												.getAcceptableMediaTypes()
												.get(0);
									} else {
										responseMediaType_tRESTResponse_23 = org.apache.cxf.jaxrs.utils.JAXRSUtils
												.toMediaType(responseContentType_tRESTResponse_23);
									}
									globalMap.put("restResponseMediaType",
											responseMediaType_tRESTResponse_23);

									String responseMediaSubType_tRESTResponse_23 = responseMediaType_tRESTResponse_23
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_23
											.equals("xml")
											|| responseMediaSubType_tRESTResponse_23
													.endsWith("+xml")) {
										outputStream_tRESTResponse_23
												.write("<wrapper>".getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"</wrapper>");
									}
									if (responseMediaSubType_tRESTResponse_23
											.equals("json")
											|| responseMediaSubType_tRESTResponse_23
													.endsWith("+json")) {
										outputStream_tRESTResponse_23.write("["
												.getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"]");
									}

									globalMap.put("restResponse", true);
								} else {
									responseMediaType_tRESTResponse_23 = (javax.ws.rs.core.MediaType) globalMap
											.get("restResponseMediaType");
								}

								if (null != restProviderResponse_tRESTResponse_23) {
									String responseMediaSubType_tRESTResponse_23 = responseMediaType_tRESTResponse_23
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_23
											.equals("json")
											|| responseMediaSubType_tRESTResponse_23
													.endsWith("+json")) {
										if (globalMap
												.containsKey("restResponseJsonStarted")) {
											outputStream_tRESTResponse_23
													.write(",".getBytes());
										} else {
											globalMap.put(
													"restResponseJsonStarted",
													true);
										}
									}

									Class<? extends Object> responseBodyClass_tRESTResponse_23 = restProviderResponse_tRESTResponse_23
											.getClass();
									javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_23 = messageContext_tRESTResponse_23
											.getProviders();
									javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_23 = messageBodyProviders_tRESTResponse_23
											.getMessageBodyWriter(
													responseBodyClass_tRESTResponse_23,
													responseBodyClass_tRESTResponse_23,
													null,
													responseMediaType_tRESTResponse_23);
									messageBodyWriter_tRESTResponse_23
											.writeTo(
													restProviderResponse_tRESTResponse_23,
													responseBodyClass_tRESTResponse_23,
													responseBodyClass_tRESTResponse_23,
													new java.lang.annotation.Annotation[] {},
													responseMediaType_tRESTResponse_23,
													null,
													outputStream_tRESTResponse_23);
								}
								// initial variant
								// outputStream_tRESTResponse_23.write(String.valueOf(restProviderResponse_tRESTResponse_23).getBytes());
								outputStream_tRESTResponse_23.flush();
							}
						}

						tos_count_tRESTResponse_23++;

						/**
						 * [tRESTResponse_23 main ] stop
						 */

					} // End of branch "e401_3a"

					/**
					 * [tFixedFlowInput_27 end ] start
					 */

					currentComponent = "tFixedFlowInput_27";

				}
				globalMap.put("tFixedFlowInput_27_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_27", true);
				end_Hash.put("tFixedFlowInput_27", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_27 end ] stop
				 */

				/**
				 * [tXMLMap_27 end ] start
				 */

				currentComponent = "tXMLMap_27";

				ok_Hash.put("tXMLMap_27", true);
				end_Hash.put("tXMLMap_27", System.currentTimeMillis());

				/**
				 * [tXMLMap_27 end ] stop
				 */

				/**
				 * [tRESTResponse_23 end ] start
				 */

				currentComponent = "tRESTResponse_23";

				ok_Hash.put("tRESTResponse_23", true);
				end_Hash.put("tRESTResponse_23", System.currentTimeMillis());

				/**
				 * [tRESTResponse_23 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_27 finally ] start
				 */

				currentComponent = "tFixedFlowInput_27";

				/**
				 * [tFixedFlowInput_27 finally ] stop
				 */

				/**
				 * [tXMLMap_27 finally ] start
				 */

				currentComponent = "tXMLMap_27";

				/**
				 * [tXMLMap_27 finally ] stop
				 */

				/**
				 * [tRESTResponse_23 finally ] start
				 */

				currentComponent = "tRESTResponse_23";

				/**
				 * [tRESTResponse_23 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_27_SUBPROCESS_STATE", 1);
	}

	public static class e404_31Struct implements
			routines.system.IPersistableRow<e404_31Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(e404_31Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String status_code;

		public String getStatus_code() {
			return this.status_code;
		}

		public String status_message;

		public String getStatus_message() {
			return this.status_message;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.status_code = readString(dis);

					this.status_message = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status_code, dos);

				// String

				writeString(this.status_message, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status_code=" + status_code);
			sb.append(",status_message=" + status_message);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row15Struct row15 = new row15Struct();
				e404_31Struct e404_31 = new e404_31Struct();

				/**
				 * [tRESTResponse_9 begin ] start
				 */

				ok_Hash.put("tRESTResponse_9", false);
				start_Hash.put("tRESTResponse_9", System.currentTimeMillis());

				currentComponent = "tRESTResponse_9";

				int tos_count_tRESTResponse_9 = 0;

				class BytesLimit65535_tRESTResponse_9 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTResponse_9().limitLog4jByte();

				/**
				 * [tRESTResponse_9 begin ] stop
				 */

				/**
				 * [tXMLMap_11 begin ] start
				 */

				ok_Hash.put("tXMLMap_11", false);
				start_Hash.put("tXMLMap_11", System.currentTimeMillis());

				currentComponent = "tXMLMap_11";

				int tos_count_tXMLMap_11 = 0;

				class BytesLimit65535_tXMLMap_11 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_11().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_11 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_11__Struct {
				}
				Var__tXMLMap_11__Struct Var__tXMLMap_11 = new Var__tXMLMap_11__Struct();
				// ###############################
				// # Outputs initialization
				e404_31Struct e404_31_tmp = new e404_31Struct();
				e404_31Struct e404_31_save = null;
				// ###############################
				int nb_line_tXMLMap_11 = 0;

				XML_API_tXMLMap_11 xml_api_tXMLMap_11 = new XML_API_tXMLMap_11();

				class GenerateDocument_e404_31 {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					String currentValue = null;

					public GenerateDocument_e404_31() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						generateOk();
						return this.doc;
					}

					// do some work after document has been generated
					private void generateOk() {
						routines.system.NestXMLTool.replaceDefaultNameSpace(
								this.doc.getRootElement(), null);
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin,
							row15Struct row15, Var__tXMLMap_11__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = org.dom4j.DocumentHelper
									.createElement("root");
							doc.add(root);
							subTreeRootParent = root;
							org.dom4j.Element root_0 = null;
							root_0 = root.addElement("STATUS");
							valueMap.put("root_0", "0");
							if (valueMap.get("root_0") != null) {
								routines.system.NestXMLTool.setText(root_0,
										FormatterUtils.format("0", null));
							}
							org.dom4j.Element root_1 = null;
							root_1 = root.addElement("FILE_ID");
							valueMap.put("root_1", row15.file_id);
							if (valueMap.get("root_1") != null) {
								routines.system.NestXMLTool.setText(root_1,
										FormatterUtils.format(row15.file_id,
												null));
							}
							org.dom4j.Element root_2 = null;
							root_2 = root.addElement("RETURN_CODE");
							valueMap.put("root_2", row15.status_code);
							if (valueMap.get("root_2") != null) {
								routines.system.NestXMLTool.setText(root_2,
										FormatterUtils.format(
												row15.status_code, null));
							}
							org.dom4j.Element root_3 = null;
							root_3 = root.addElement("RETURN_MSG");
							valueMap.put("root_3", row15.status_message);
							if (valueMap.get("root_3") != null) {
								routines.system.NestXMLTool.setText(root_3,
										FormatterUtils.format(
												row15.status_message, null));
							}
							org.dom4j.Element root_4 = null;
							root_4 = root.addElement("CONTENT");
							valueMap.put("root_4", "file_id : " + row15.file_id);
							if (valueMap.get("root_4") != null) {
								routines.system.NestXMLTool.setText(
										root_4,
										FormatterUtils.format("file_id : "
												+ row15.file_id, null));
							}
							org.dom4j.Element root_5 = null;
							root_5 = root.addElement("MID_NO");
							valueMap.put("root_5", context.MID_NO);
							if (valueMap.get("root_5") != null) {
								routines.system.NestXMLTool.setText(root_5,
										FormatterUtils.format(context.MID_NO,
												null));
							}
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
					}
				}

				/**
				 * [tXMLMap_11 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_10 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_10", false);
				start_Hash
						.put("tFixedFlowInput_10", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_10";

				int tos_count_tFixedFlowInput_10 = 0;

				class BytesLimit65535_tFixedFlowInput_10 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_10().limitLog4jByte();

				for (int i_tFixedFlowInput_10 = 0; i_tFixedFlowInput_10 < 1; i_tFixedFlowInput_10++) {

					row15.status_code = "404";

					row15.status_message = "File mapping not found or not valid";

					row15.file_id = ((String) globalMap
							.get("expiring1.file_id"));

					/**
					 * [tFixedFlowInput_10 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_10 main ] start
					 */

					currentComponent = "tFixedFlowInput_10";

					tos_count_tFixedFlowInput_10++;

					/**
					 * [tFixedFlowInput_10 main ] stop
					 */

					/**
					 * [tXMLMap_11 main ] start
					 */

					currentComponent = "tXMLMap_11";

					boolean rejectedInnerJoin_tXMLMap_11 = false;
					boolean rejectedDocInnerJoin_tXMLMap_11 = false;
					boolean mainRowRejected_tXMLMap_11 = false;
					boolean isMatchDocRowtXMLMap_11 = false;

					GenerateDocument_e404_31 gen_Doc_e404_31_tXMLMap_11 = new GenerateDocument_e404_31();
					e404_31_tmp.body = null;

					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tXMLMap_11__Struct Var = Var__tXMLMap_11;
						// ###############################
						// # Output tables

						e404_31 = null;

						// # Output table : 'e404_31'

						gen_Doc_e404_31_tXMLMap_11.generateElements(
								rejectedDocInnerJoin_tXMLMap_11, row15, Var);

						if (e404_31_tmp.body == null) {
							e404_31_tmp.body = new routines.system.Document();
							e404_31_tmp.body
									.setDocument(gen_Doc_e404_31_tXMLMap_11
											.getDocument());
						}

						e404_31 = e404_31_tmp;
						e404_31_save = e404_31_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tXMLMap_11 = false;

					tos_count_tXMLMap_11++;

					/**
					 * [tXMLMap_11 main ] stop
					 */
					// Start of branch "e404_31"
					if (e404_31 != null) {

						/**
						 * [tRESTResponse_9 main ] start
						 */

						currentComponent = "tRESTResponse_9";

						java.io.OutputStream outputStream_tRESTResponse_9 = (java.io.OutputStream) globalMap
								.get("restResponseStream");
						boolean responseAlreadySent_tRESTResponse_9 = globalMap
								.containsKey("restResponse");

						if (null == outputStream_tRESTResponse_9
								&& responseAlreadySent_tRESTResponse_9) {
							throw new RuntimeException(
									"Rest response already sent.");
						} else if (!globalMap.containsKey("restRequest")) {
							throw new RuntimeException(
									"Not received rest request yet.");
						} else {
							Integer restProviderStatusCode_tRESTResponse_9 = 404;

							Object restProviderResponse_tRESTResponse_9 = null;
							if (null != e404_31.body) {
								restProviderResponse_tRESTResponse_9 = e404_31.body
										.getDocument();
							}

							java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_9 = new java.util.TreeMap<String, String>(
									String.CASE_INSENSITIVE_ORDER);

							java.util.Map<String, Object> restRequest_tRESTResponse_9 = (java.util.Map<String, Object>) globalMap
									.get("restRequest");
							org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_9 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_9
									.get("MESSAGE_CONTEXT");

							if (null == outputStream_tRESTResponse_9) {
								java.util.Map<String, Object> restResponse_tRESTResponse_9 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_9.put("BODY",
										restProviderResponse_tRESTResponse_9);
								restResponse_tRESTResponse_9.put("STATUS",
										restProviderStatusCode_tRESTResponse_9);
								restResponse_tRESTResponse_9
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_9);
								restResponse_tRESTResponse_9.put(
										"drop.json.root.element",
										Boolean.valueOf(true));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_9);

							} else {

								javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_9 = null;
								if (!responseAlreadySent_tRESTResponse_9) {
									org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
													true);

									messageContext_tRESTResponse_9
											.put(org.apache.cxf.message.Message.RESPONSE_CODE,
													restProviderStatusCode_tRESTResponse_9);
									javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_9 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
									for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_9
											.entrySet()) {
										headersMultivaluedMap_tRESTResponse_9
												.putSingle(multivaluedHeader
														.getKey(),
														multivaluedHeader
																.getValue());
									}
									messageContext_tRESTResponse_9
											.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
													headersMultivaluedMap_tRESTResponse_9);

									// String
									// responseContentType_tRESTResponse_9 =
									// (String)
									// messageContext_tRESTResponse_9.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									String responseContentType_tRESTResponse_9 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									if (null == responseContentType_tRESTResponse_9) {
										// this should not be needed, just in
										// case. set it to the first value in
										// the sorted list returned from
										// HttpHeaders
										responseMediaType_tRESTResponse_9 = messageContext_tRESTResponse_9
												.getHttpHeaders()
												.getAcceptableMediaTypes()
												.get(0);
									} else {
										responseMediaType_tRESTResponse_9 = org.apache.cxf.jaxrs.utils.JAXRSUtils
												.toMediaType(responseContentType_tRESTResponse_9);
									}
									globalMap.put("restResponseMediaType",
											responseMediaType_tRESTResponse_9);

									String responseMediaSubType_tRESTResponse_9 = responseMediaType_tRESTResponse_9
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_9
											.equals("xml")
											|| responseMediaSubType_tRESTResponse_9
													.endsWith("+xml")) {
										outputStream_tRESTResponse_9
												.write("<wrapper>".getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"</wrapper>");
									}
									if (responseMediaSubType_tRESTResponse_9
											.equals("json")
											|| responseMediaSubType_tRESTResponse_9
													.endsWith("+json")) {
										outputStream_tRESTResponse_9.write("["
												.getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"]");
									}

									globalMap.put("restResponse", true);
								} else {
									responseMediaType_tRESTResponse_9 = (javax.ws.rs.core.MediaType) globalMap
											.get("restResponseMediaType");
								}

								if (null != restProviderResponse_tRESTResponse_9) {
									String responseMediaSubType_tRESTResponse_9 = responseMediaType_tRESTResponse_9
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_9
											.equals("json")
											|| responseMediaSubType_tRESTResponse_9
													.endsWith("+json")) {
										if (globalMap
												.containsKey("restResponseJsonStarted")) {
											outputStream_tRESTResponse_9
													.write(",".getBytes());
										} else {
											globalMap.put(
													"restResponseJsonStarted",
													true);
										}
									}

									Class<? extends Object> responseBodyClass_tRESTResponse_9 = restProviderResponse_tRESTResponse_9
											.getClass();
									javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_9 = messageContext_tRESTResponse_9
											.getProviders();
									javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_9 = messageBodyProviders_tRESTResponse_9
											.getMessageBodyWriter(
													responseBodyClass_tRESTResponse_9,
													responseBodyClass_tRESTResponse_9,
													null,
													responseMediaType_tRESTResponse_9);
									messageBodyWriter_tRESTResponse_9
											.writeTo(
													restProviderResponse_tRESTResponse_9,
													responseBodyClass_tRESTResponse_9,
													responseBodyClass_tRESTResponse_9,
													new java.lang.annotation.Annotation[] {},
													responseMediaType_tRESTResponse_9,
													null,
													outputStream_tRESTResponse_9);
								}
								// initial variant
								// outputStream_tRESTResponse_9.write(String.valueOf(restProviderResponse_tRESTResponse_9).getBytes());
								outputStream_tRESTResponse_9.flush();
							}
						}

						tos_count_tRESTResponse_9++;

						/**
						 * [tRESTResponse_9 main ] stop
						 */

					} // End of branch "e404_31"

					/**
					 * [tFixedFlowInput_10 end ] start
					 */

					currentComponent = "tFixedFlowInput_10";

				}
				globalMap.put("tFixedFlowInput_10_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_10", true);
				end_Hash.put("tFixedFlowInput_10", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_10 end ] stop
				 */

				/**
				 * [tXMLMap_11 end ] start
				 */

				currentComponent = "tXMLMap_11";

				ok_Hash.put("tXMLMap_11", true);
				end_Hash.put("tXMLMap_11", System.currentTimeMillis());

				/**
				 * [tXMLMap_11 end ] stop
				 */

				/**
				 * [tRESTResponse_9 end ] start
				 */

				currentComponent = "tRESTResponse_9";

				ok_Hash.put("tRESTResponse_9", true);
				end_Hash.put("tRESTResponse_9", System.currentTimeMillis());

				/**
				 * [tRESTResponse_9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_10 finally ] start
				 */

				currentComponent = "tFixedFlowInput_10";

				/**
				 * [tFixedFlowInput_10 finally ] stop
				 */

				/**
				 * [tXMLMap_11 finally ] start
				 */

				currentComponent = "tXMLMap_11";

				/**
				 * [tXMLMap_11 finally ] stop
				 */

				/**
				 * [tRESTResponse_9 finally ] start
				 */

				currentComponent = "tRESTResponse_9";

				/**
				 * [tRESTResponse_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_10_SUBPROCESS_STATE", 1);
	}

	public static class e401_2Struct implements
			routines.system.IPersistableRow<e401_2Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(e401_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String status_code;

		public String getStatus_code() {
			return this.status_code;
		}

		public String status_message;

		public String getStatus_message() {
			return this.status_message;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.status_code = readString(dis);

					this.status_message = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status_code, dos);

				// String

				writeString(this.status_message, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status_code=" + status_code);
			sb.append(",status_message=" + status_message);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row17Struct row17 = new row17Struct();
				e401_2Struct e401_2 = new e401_2Struct();

				/**
				 * [tRESTResponse_11 begin ] start
				 */

				ok_Hash.put("tRESTResponse_11", false);
				start_Hash.put("tRESTResponse_11", System.currentTimeMillis());

				currentComponent = "tRESTResponse_11";

				int tos_count_tRESTResponse_11 = 0;

				class BytesLimit65535_tRESTResponse_11 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTResponse_11().limitLog4jByte();

				/**
				 * [tRESTResponse_11 begin ] stop
				 */

				/**
				 * [tXMLMap_13 begin ] start
				 */

				ok_Hash.put("tXMLMap_13", false);
				start_Hash.put("tXMLMap_13", System.currentTimeMillis());

				currentComponent = "tXMLMap_13";

				int tos_count_tXMLMap_13 = 0;

				class BytesLimit65535_tXMLMap_13 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_13().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_13 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_13__Struct {
				}
				Var__tXMLMap_13__Struct Var__tXMLMap_13 = new Var__tXMLMap_13__Struct();
				// ###############################
				// # Outputs initialization
				e401_2Struct e401_2_tmp = new e401_2Struct();
				e401_2Struct e401_2_save = null;
				// ###############################
				int nb_line_tXMLMap_13 = 0;

				XML_API_tXMLMap_13 xml_api_tXMLMap_13 = new XML_API_tXMLMap_13();

				class GenerateDocument_e401_2 {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					String currentValue = null;

					public GenerateDocument_e401_2() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						generateOk();
						return this.doc;
					}

					// do some work after document has been generated
					private void generateOk() {
						routines.system.NestXMLTool.replaceDefaultNameSpace(
								this.doc.getRootElement(), null);
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin,
							row17Struct row17, Var__tXMLMap_13__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = org.dom4j.DocumentHelper
									.createElement("root");
							doc.add(root);
							subTreeRootParent = root;
							org.dom4j.Element root_0 = null;
							root_0 = root.addElement("STATUS");
							valueMap.put("root_0", "0");
							if (valueMap.get("root_0") != null) {
								routines.system.NestXMLTool.setText(root_0,
										FormatterUtils.format("0", null));
							}
							org.dom4j.Element root_1 = null;
							root_1 = root.addElement("FILE_ID");
							valueMap.put("root_1", row17.file_id);
							if (valueMap.get("root_1") != null) {
								routines.system.NestXMLTool.setText(root_1,
										FormatterUtils.format(row17.file_id,
												null));
							}
							org.dom4j.Element root_2 = null;
							root_2 = root.addElement("RETURN_CODE");
							valueMap.put("root_2", row17.status_code);
							if (valueMap.get("root_2") != null) {
								routines.system.NestXMLTool.setText(root_2,
										FormatterUtils.format(
												row17.status_code, null));
							}
							org.dom4j.Element root_3 = null;
							root_3 = root.addElement("RETURN_MSG");
							valueMap.put("root_3", row17.status_message);
							if (valueMap.get("root_3") != null) {
								routines.system.NestXMLTool.setText(root_3,
										FormatterUtils.format(
												row17.status_message, null));
							}
							org.dom4j.Element root_4 = null;
							root_4 = root.addElement("CONTENT");
							valueMap.put("root_4", "file_id : " + row17.file_id);
							if (valueMap.get("root_4") != null) {
								routines.system.NestXMLTool.setText(
										root_4,
										FormatterUtils.format("file_id : "
												+ row17.file_id, null));
							}
							org.dom4j.Element root_5 = null;
							root_5 = root.addElement("MID_NO");
							valueMap.put("root_5", context.MID_NO);
							if (valueMap.get("root_5") != null) {
								routines.system.NestXMLTool.setText(root_5,
										FormatterUtils.format(context.MID_NO,
												null));
							}
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
					}
				}

				/**
				 * [tXMLMap_13 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_12 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_12", false);
				start_Hash
						.put("tFixedFlowInput_12", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_12";

				int tos_count_tFixedFlowInput_12 = 0;

				class BytesLimit65535_tFixedFlowInput_12 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_12().limitLog4jByte();

				for (int i_tFixedFlowInput_12 = 0; i_tFixedFlowInput_12 < 1; i_tFixedFlowInput_12++) {

					row17.status_code = "401";

					row17.status_message = "Authenication fail";

					row17.file_id = ((String) globalMap
							.get("expiring1.file_id"));

					/**
					 * [tFixedFlowInput_12 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_12 main ] start
					 */

					currentComponent = "tFixedFlowInput_12";

					tos_count_tFixedFlowInput_12++;

					/**
					 * [tFixedFlowInput_12 main ] stop
					 */

					/**
					 * [tXMLMap_13 main ] start
					 */

					currentComponent = "tXMLMap_13";

					boolean rejectedInnerJoin_tXMLMap_13 = false;
					boolean rejectedDocInnerJoin_tXMLMap_13 = false;
					boolean mainRowRejected_tXMLMap_13 = false;
					boolean isMatchDocRowtXMLMap_13 = false;

					GenerateDocument_e401_2 gen_Doc_e401_2_tXMLMap_13 = new GenerateDocument_e401_2();
					e401_2_tmp.body = null;

					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tXMLMap_13__Struct Var = Var__tXMLMap_13;
						// ###############################
						// # Output tables

						e401_2 = null;

						// # Output table : 'e401_2'

						gen_Doc_e401_2_tXMLMap_13.generateElements(
								rejectedDocInnerJoin_tXMLMap_13, row17, Var);

						if (e401_2_tmp.body == null) {
							e401_2_tmp.body = new routines.system.Document();
							e401_2_tmp.body
									.setDocument(gen_Doc_e401_2_tXMLMap_13
											.getDocument());
						}

						e401_2 = e401_2_tmp;
						e401_2_save = e401_2_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tXMLMap_13 = false;

					tos_count_tXMLMap_13++;

					/**
					 * [tXMLMap_13 main ] stop
					 */
					// Start of branch "e401_2"
					if (e401_2 != null) {

						/**
						 * [tRESTResponse_11 main ] start
						 */

						currentComponent = "tRESTResponse_11";

						java.io.OutputStream outputStream_tRESTResponse_11 = (java.io.OutputStream) globalMap
								.get("restResponseStream");
						boolean responseAlreadySent_tRESTResponse_11 = globalMap
								.containsKey("restResponse");

						if (null == outputStream_tRESTResponse_11
								&& responseAlreadySent_tRESTResponse_11) {
							throw new RuntimeException(
									"Rest response already sent.");
						} else if (!globalMap.containsKey("restRequest")) {
							throw new RuntimeException(
									"Not received rest request yet.");
						} else {
							Integer restProviderStatusCode_tRESTResponse_11 = 401;

							Object restProviderResponse_tRESTResponse_11 = null;
							if (null != e401_2.body) {
								restProviderResponse_tRESTResponse_11 = e401_2.body
										.getDocument();
							}

							java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_11 = new java.util.TreeMap<String, String>(
									String.CASE_INSENSITIVE_ORDER);

							java.util.Map<String, Object> restRequest_tRESTResponse_11 = (java.util.Map<String, Object>) globalMap
									.get("restRequest");
							org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_11 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_11
									.get("MESSAGE_CONTEXT");

							if (null == outputStream_tRESTResponse_11) {
								java.util.Map<String, Object> restResponse_tRESTResponse_11 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_11.put("BODY",
										restProviderResponse_tRESTResponse_11);
								restResponse_tRESTResponse_11
										.put("STATUS",
												restProviderStatusCode_tRESTResponse_11);
								restResponse_tRESTResponse_11
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_11);
								restResponse_tRESTResponse_11.put(
										"drop.json.root.element",
										Boolean.valueOf(true));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_11);

							} else {

								javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_11 = null;
								if (!responseAlreadySent_tRESTResponse_11) {
									org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
													true);

									messageContext_tRESTResponse_11
											.put(org.apache.cxf.message.Message.RESPONSE_CODE,
													restProviderStatusCode_tRESTResponse_11);
									javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_11 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
									for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_11
											.entrySet()) {
										headersMultivaluedMap_tRESTResponse_11
												.putSingle(multivaluedHeader
														.getKey(),
														multivaluedHeader
																.getValue());
									}
									messageContext_tRESTResponse_11
											.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
													headersMultivaluedMap_tRESTResponse_11);

									// String
									// responseContentType_tRESTResponse_11 =
									// (String)
									// messageContext_tRESTResponse_11.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									String responseContentType_tRESTResponse_11 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									if (null == responseContentType_tRESTResponse_11) {
										// this should not be needed, just in
										// case. set it to the first value in
										// the sorted list returned from
										// HttpHeaders
										responseMediaType_tRESTResponse_11 = messageContext_tRESTResponse_11
												.getHttpHeaders()
												.getAcceptableMediaTypes()
												.get(0);
									} else {
										responseMediaType_tRESTResponse_11 = org.apache.cxf.jaxrs.utils.JAXRSUtils
												.toMediaType(responseContentType_tRESTResponse_11);
									}
									globalMap.put("restResponseMediaType",
											responseMediaType_tRESTResponse_11);

									String responseMediaSubType_tRESTResponse_11 = responseMediaType_tRESTResponse_11
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_11
											.equals("xml")
											|| responseMediaSubType_tRESTResponse_11
													.endsWith("+xml")) {
										outputStream_tRESTResponse_11
												.write("<wrapper>".getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"</wrapper>");
									}
									if (responseMediaSubType_tRESTResponse_11
											.equals("json")
											|| responseMediaSubType_tRESTResponse_11
													.endsWith("+json")) {
										outputStream_tRESTResponse_11.write("["
												.getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"]");
									}

									globalMap.put("restResponse", true);
								} else {
									responseMediaType_tRESTResponse_11 = (javax.ws.rs.core.MediaType) globalMap
											.get("restResponseMediaType");
								}

								if (null != restProviderResponse_tRESTResponse_11) {
									String responseMediaSubType_tRESTResponse_11 = responseMediaType_tRESTResponse_11
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_11
											.equals("json")
											|| responseMediaSubType_tRESTResponse_11
													.endsWith("+json")) {
										if (globalMap
												.containsKey("restResponseJsonStarted")) {
											outputStream_tRESTResponse_11
													.write(",".getBytes());
										} else {
											globalMap.put(
													"restResponseJsonStarted",
													true);
										}
									}

									Class<? extends Object> responseBodyClass_tRESTResponse_11 = restProviderResponse_tRESTResponse_11
											.getClass();
									javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_11 = messageContext_tRESTResponse_11
											.getProviders();
									javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_11 = messageBodyProviders_tRESTResponse_11
											.getMessageBodyWriter(
													responseBodyClass_tRESTResponse_11,
													responseBodyClass_tRESTResponse_11,
													null,
													responseMediaType_tRESTResponse_11);
									messageBodyWriter_tRESTResponse_11
											.writeTo(
													restProviderResponse_tRESTResponse_11,
													responseBodyClass_tRESTResponse_11,
													responseBodyClass_tRESTResponse_11,
													new java.lang.annotation.Annotation[] {},
													responseMediaType_tRESTResponse_11,
													null,
													outputStream_tRESTResponse_11);
								}
								// initial variant
								// outputStream_tRESTResponse_11.write(String.valueOf(restProviderResponse_tRESTResponse_11).getBytes());
								outputStream_tRESTResponse_11.flush();
							}
						}

						tos_count_tRESTResponse_11++;

						/**
						 * [tRESTResponse_11 main ] stop
						 */

					} // End of branch "e401_2"

					/**
					 * [tFixedFlowInput_12 end ] start
					 */

					currentComponent = "tFixedFlowInput_12";

				}
				globalMap.put("tFixedFlowInput_12_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_12", true);
				end_Hash.put("tFixedFlowInput_12", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_12 end ] stop
				 */

				/**
				 * [tXMLMap_13 end ] start
				 */

				currentComponent = "tXMLMap_13";

				ok_Hash.put("tXMLMap_13", true);
				end_Hash.put("tXMLMap_13", System.currentTimeMillis());

				/**
				 * [tXMLMap_13 end ] stop
				 */

				/**
				 * [tRESTResponse_11 end ] start
				 */

				currentComponent = "tRESTResponse_11";

				ok_Hash.put("tRESTResponse_11", true);
				end_Hash.put("tRESTResponse_11", System.currentTimeMillis());

				/**
				 * [tRESTResponse_11 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_12 finally ] start
				 */

				currentComponent = "tFixedFlowInput_12";

				/**
				 * [tFixedFlowInput_12 finally ] stop
				 */

				/**
				 * [tXMLMap_13 finally ] start
				 */

				currentComponent = "tXMLMap_13";

				/**
				 * [tXMLMap_13 finally ] stop
				 */

				/**
				 * [tRESTResponse_11 finally ] start
				 */

				currentComponent = "tRESTResponse_11";

				/**
				 * [tRESTResponse_11 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_12_SUBPROCESS_STATE", 1);
	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String sso;

		public String getSso() {
			return this.sso;
		}

		public String verify_pccuid;

		public String getVerify_pccuid() {
			return this.verify_pccuid;
		}

		public Boolean verified;

		public Boolean getVerified() {
			return this.verified;
		}

		public String aud;

		public String getAud() {
			return this.aud;
		}

		public String azp;

		public String getAzp() {
			return this.azp;
		}

		public Boolean valid;

		public Boolean getValid() {
			return this.valid;
		}

		public Boolean admin;

		public Boolean getAdmin() {
			return this.admin;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.sso = readString(dis);

					this.verify_pccuid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.verified = null;
					} else {
						this.verified = dis.readBoolean();
					}

					this.aud = readString(dis);

					this.azp = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valid = null;
					} else {
						this.valid = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.admin = null;
					} else {
						this.admin = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sso, dos);

				// String

				writeString(this.verify_pccuid, dos);

				// Boolean

				if (this.verified == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.verified);
				}

				// String

				writeString(this.aud, dos);

				// String

				writeString(this.azp, dos);

				// Boolean

				if (this.valid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.valid);
				}

				// Boolean

				if (this.admin == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.admin);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sso=" + sso);
			sb.append(",verify_pccuid=" + verify_pccuid);
			sb.append(",verified=" + String.valueOf(verified));
			sb.append(",aud=" + aud);
			sb.append(",azp=" + azp);
			sb.append(",valid=" + String.valueOf(valid));
			sb.append(",admin=" + String.valueOf(admin));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRunJob_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row21Struct row21 = new row21Struct();

				/**
				 * [tFlowToIterate_12 begin ] start
				 */

				ok_Hash.put("tFlowToIterate_12", false);
				start_Hash.put("tFlowToIterate_12", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_12";

				int tos_count_tFlowToIterate_12 = 0;

				class BytesLimit65535_tFlowToIterate_12 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowToIterate_12().limitLog4jByte();

				int nb_line_tFlowToIterate_12 = 0;
				int counter_tFlowToIterate_12 = 0;

				/**
				 * [tFlowToIterate_12 begin ] stop
				 */

				/**
				 * [tRunJob_5 begin ] start
				 */

				ok_Hash.put("tRunJob_5", false);
				start_Hash.put("tRunJob_5", System.currentTimeMillis());

				currentComponent = "tRunJob_5";

				int tos_count_tRunJob_5 = 0;

				class BytesLimit65535_tRunJob_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRunJob_5().limitLog4jByte();

				/**
				 * [tRunJob_5 begin ] stop
				 */

				/**
				 * [tRunJob_5 main ] start
				 */

				currentComponent = "tRunJob_5";

				java.util.List<String> paraList_tRunJob_5 = new java.util.ArrayList<String>();

				paraList_tRunJob_5.add("--father_pid=" + pid);

				paraList_tRunJob_5.add("--root_pid=" + rootPid);

				paraList_tRunJob_5.add("--father_node=tRunJob_5");

				paraList_tRunJob_5.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_5.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_5.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_5 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_5 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_5".equals(tRunJobName_tRunJob_5)
						&& childResumePath_tRunJob_5 != null) {
					paraList_tRunJob_5
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_5.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_5");

				java.util.Map<String, Object> parentContextMap_tRunJob_5 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_5 = null;

				obj_tRunJob_5 = ((String) globalMap
						.get("header1.Authorization"));
				paraList_tRunJob_5.add("--context_param Authorization="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));

				parentContextMap_tRunJob_5.put("Authorization", obj_tRunJob_5);

				esb_mfs_srv.api_jwt_verify_0_1.api_jwt_verify childJob_tRunJob_5 = new esb_mfs_srv.api_jwt_verify_0_1.api_jwt_verify();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_5) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_5 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_5 : talendDataSources_tRunJob_5
							.entrySet()) {
						dataSources_tRunJob_5.put(
								talendDataSourceEntry_tRunJob_5.getKey(),
								talendDataSourceEntry_tRunJob_5.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_5.setDataSources(dataSources_tRunJob_5);
				}

				childJob_tRunJob_5.parentContextMap = parentContextMap_tRunJob_5;

				String[][] childReturn_tRunJob_5 = childJob_tRunJob_5
						.runJob((String[]) paraList_tRunJob_5
								.toArray(new String[paraList_tRunJob_5.size()]));

				errorCode = childJob_tRunJob_5.getErrorCode();

				if (childJob_tRunJob_5.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_5_CHILD_RETURN_CODE",
							childJob_tRunJob_5.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_5
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_5_CHILD_RETURN_CODE",
							childJob_tRunJob_5.getErrorCode());
				}
				if (childJob_tRunJob_5.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_5_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_5.getExceptionStackTrace());
				}

				if (childJob_tRunJob_5.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_5.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				for (String[] item_tRunJob_5 : childReturn_tRunJob_5) {
					if (childJob_tRunJob_5.hastBufferOutputComponent() || true) {

						if (0 < item_tRunJob_5.length) {

							row21.sso = item_tRunJob_5[0];

						} else {
							row21.sso = null;
						}

						if (1 < item_tRunJob_5.length) {

							row21.verify_pccuid = item_tRunJob_5[1];

						} else {
							row21.verify_pccuid = null;
						}

						if (2 < item_tRunJob_5.length) {

							row21.verified = ParserUtils
									.parseTo_Boolean(item_tRunJob_5[2]);

						} else {
							row21.verified = null;
						}

						if (3 < item_tRunJob_5.length) {

							row21.aud = item_tRunJob_5[3];

						} else {
							row21.aud = null;
						}

						if (4 < item_tRunJob_5.length) {

							row21.azp = item_tRunJob_5[4];

						} else {
							row21.azp = null;
						}

						if (5 < item_tRunJob_5.length) {

							row21.valid = ParserUtils
									.parseTo_Boolean(item_tRunJob_5[5]);

						} else {
							row21.valid = null;
						}

						if (6 < item_tRunJob_5.length) {

							row21.admin = ParserUtils
									.parseTo_Boolean(item_tRunJob_5[6]);

						} else {
							row21.admin = null;
						}

					}

					tos_count_tRunJob_5++;

					/**
					 * [tRunJob_5 main ] stop
					 */

					/**
					 * [tFlowToIterate_12 main ] start
					 */

					currentComponent = "tFlowToIterate_12";

					globalMap.put("row21.sso", row21.sso);

					globalMap.put("row21.verify_pccuid", row21.verify_pccuid);

					globalMap.put("row21.verified", row21.verified);

					globalMap.put("row21.aud", row21.aud);

					globalMap.put("row21.azp", row21.azp);

					globalMap.put("row21.valid", row21.valid);

					globalMap.put("row21.admin", row21.admin);

					nb_line_tFlowToIterate_12++;
					counter_tFlowToIterate_12++;
					globalMap.put("tFlowToIterate_12_CURRENT_ITERATION",
							counter_tFlowToIterate_12);

					tos_count_tFlowToIterate_12++;

					/**
					 * [tFlowToIterate_12 main ] stop
					 */

				} // C_01

				/**
				 * [tRunJob_5 end ] start
				 */

				currentComponent = "tRunJob_5";

				ok_Hash.put("tRunJob_5", true);
				end_Hash.put("tRunJob_5", System.currentTimeMillis());

				/**
				 * [tRunJob_5 end ] stop
				 */

				/**
				 * [tFlowToIterate_12 end ] start
				 */

				currentComponent = "tFlowToIterate_12";

				globalMap.put("tFlowToIterate_12_NB_LINE",
						nb_line_tFlowToIterate_12);

				ok_Hash.put("tFlowToIterate_12", true);
				end_Hash.put("tFlowToIterate_12", System.currentTimeMillis());

				if (context.debugging
						|| ((Boolean) globalMap.get("row21.verified"))) {

					tJavaFlex_4Process(globalMap);
				}

				if (!context.debugging
						&& !((Boolean) globalMap.get("row21.verified"))) {

					tFixedFlowInput_15Process(globalMap);
				}

				/**
				 * [tFlowToIterate_12 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_5 finally ] start
				 */

				currentComponent = "tRunJob_5";

				/**
				 * [tRunJob_5 finally ] stop
				 */

				/**
				 * [tFlowToIterate_12 finally ] start
				 */

				currentComponent = "tFlowToIterate_12";

				/**
				 * [tFlowToIterate_12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 1);
	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public Integer RANDOM_NUM;

		public Integer getRANDOM_NUM() {
			return this.RANDOM_NUM;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.RANDOM_NUM = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.RANDOM_NUM, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("RANDOM_NUM=" + String.valueOf(RANDOM_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaFlex_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaFlex_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row23Struct row23 = new row23Struct();

				/**
				 * [tFlowToIterate_13 begin ] start
				 */

				int NB_ITERATE_tJDBCConnection_4 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_13", false);
				start_Hash.put("tFlowToIterate_13", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_13";

				int tos_count_tFlowToIterate_13 = 0;

				class BytesLimit65535_tFlowToIterate_13 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowToIterate_13().limitLog4jByte();

				int nb_line_tFlowToIterate_13 = 0;
				int counter_tFlowToIterate_13 = 0;

				/**
				 * [tFlowToIterate_13 begin ] stop
				 */

				/**
				 * [tJavaFlex_4 begin ] start
				 */

				ok_Hash.put("tJavaFlex_4", false);
				start_Hash.put("tJavaFlex_4", System.currentTimeMillis());

				currentComponent = "tJavaFlex_4";

				int tos_count_tJavaFlex_4 = 0;

				class BytesLimit65535_tJavaFlex_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaFlex_4().limitLog4jByte();

				/**
				 * [tJavaFlex_4 begin ] stop
				 */

				/**
				 * [tJavaFlex_4 main ] start
				 */

				currentComponent = "tJavaFlex_4";

				// here is the main part of the component,
				// a piece of code executed in the row
				row23.RANDOM_NUM = ThreadLocalRandom.current().nextInt(0,
						context.MAX_CONNECTION) + 1;
				// log

				tos_count_tJavaFlex_4++;

				/**
				 * [tJavaFlex_4 main ] stop
				 */

				/**
				 * [tFlowToIterate_13 main ] start
				 */

				currentComponent = "tFlowToIterate_13";

				globalMap.put("row23.RANDOM_NUM", row23.RANDOM_NUM);

				nb_line_tFlowToIterate_13++;
				counter_tFlowToIterate_13++;
				globalMap.put("tFlowToIterate_13_CURRENT_ITERATION",
						counter_tFlowToIterate_13);

				tos_count_tFlowToIterate_13++;

				/**
				 * [tFlowToIterate_13 main ] stop
				 */
				NB_ITERATE_tJDBCConnection_4++;

				/**
				 * [tJDBCConnection_4 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_4", false);
				start_Hash.put("tJDBCConnection_4", System.currentTimeMillis());

				currentComponent = "tJDBCConnection_4";

				int tos_count_tJDBCConnection_4 = 0;

				class BytesLimit65535_tJDBCConnection_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJDBCConnection_4().limitLog4jByte();

				String url_tJDBCConnection_4 = context.JDBC_URL
						+ "?tcpKeepAlive=true&ApplicationName="
						+ context.MID_NO + "-" + context.APPNAME_PREFIX + "_"
						+ ((Integer) globalMap.get("row23.RANDOM_NUM"));

				String dbUser_tJDBCConnection_4 = context.USERNAME;

				final String decryptedPassword_tJDBCConnection_4 = context.PASSWORD;
				String dbPwd_tJDBCConnection_4 = decryptedPassword_tJDBCConnection_4;

				java.sql.Connection conn_tJDBCConnection_4 = null;

				String sharedConnectionName_tJDBCConnection_4 = context.APPNAME_PREFIX
						+ "_" + ((Integer) globalMap.get("row23.RANDOM_NUM"));
				conn_tJDBCConnection_4 = SharedDBConnection.getDBConnection(
						context.DRIVER_CLASS, url_tJDBCConnection_4,
						dbUser_tJDBCConnection_4, dbPwd_tJDBCConnection_4,
						sharedConnectionName_tJDBCConnection_4);
				if (null != conn_tJDBCConnection_4) {

					conn_tJDBCConnection_4.setAutoCommit(true);
				}

				globalMap.put("conn_tJDBCConnection_4", conn_tJDBCConnection_4);
				globalMap.put("url_tJDBCConnection_4", url_tJDBCConnection_4);
				// globalMap.put("user_tJDBCConnection_4",
				// dbUser_tJDBCConnection_4);
				// globalMap.put("pass_tJDBCConnection_4",
				// dbPwd_tJDBCConnection_4);

				/**
				 * [tJDBCConnection_4 begin ] stop
				 */

				/**
				 * [tJDBCConnection_4 main ] start
				 */

				currentComponent = "tJDBCConnection_4";

				tos_count_tJDBCConnection_4++;

				/**
				 * [tJDBCConnection_4 main ] stop
				 */

				/**
				 * [tJDBCConnection_4 end ] start
				 */

				currentComponent = "tJDBCConnection_4";

				ok_Hash.put("tJDBCConnection_4", true);
				end_Hash.put("tJDBCConnection_4", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_4 end ] stop
				 */

				/**
				 * [tJavaFlex_4 end ] start
				 */

				currentComponent = "tJavaFlex_4";

				ok_Hash.put("tJavaFlex_4", true);
				end_Hash.put("tJavaFlex_4", System.currentTimeMillis());

				/**
				 * [tJavaFlex_4 end ] stop
				 */

				/**
				 * [tFlowToIterate_13 end ] start
				 */

				currentComponent = "tFlowToIterate_13";

				globalMap.put("tFlowToIterate_13_NB_LINE",
						nb_line_tFlowToIterate_13);

				ok_Hash.put("tFlowToIterate_13", true);
				end_Hash.put("tFlowToIterate_13", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_13 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJavaFlex_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaFlex_4 finally ] start
				 */

				currentComponent = "tJavaFlex_4";

				/**
				 * [tJavaFlex_4 finally ] stop
				 */

				/**
				 * [tFlowToIterate_13 finally ] start
				 */

				currentComponent = "tFlowToIterate_13";

				/**
				 * [tFlowToIterate_13 finally ] stop
				 */

				/**
				 * [tJDBCConnection_4 finally ] start
				 */

				currentComponent = "tJDBCConnection_4";

				/**
				 * [tJDBCConnection_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaFlex_4_SUBPROCESS_STATE", 1);
	}

	public static class row24Struct implements
			routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		public String original_uri;

		public String getOriginal_uri() {
			return this.original_uri;
		}

		public String grant_system;

		public String getGrant_system() {
			return this.grant_system;
		}

		public Boolean valid;

		public Boolean getValid() {
			return this.valid;
		}

		public String md5sum;

		public String getMd5sum() {
			return this.md5sum;
		}

		public Integer content_length;

		public Integer getContent_length() {
			return this.content_length;
		}

		public String content_disposition;

		public String getContent_disposition() {
			return this.content_disposition;
		}

		public String content_type;

		public String getContent_type() {
			return this.content_type;
		}

		public String return_code;

		public String getReturn_code() {
			return this.return_code;
		}

		public String return_msg;

		public String getReturn_msg() {
			return this.return_msg;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.file_id = readString(dis);

					this.original_uri = readString(dis);

					this.grant_system = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valid = null;
					} else {
						this.valid = dis.readBoolean();
					}

					this.md5sum = readString(dis);

					this.content_length = readInteger(dis);

					this.content_disposition = readString(dis);

					this.content_type = readString(dis);

					this.return_code = readString(dis);

					this.return_msg = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.file_id, dos);

				// String

				writeString(this.original_uri, dos);

				// String

				writeString(this.grant_system, dos);

				// Boolean

				if (this.valid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.valid);
				}

				// String

				writeString(this.md5sum, dos);

				// Integer

				writeInteger(this.content_length, dos);

				// String

				writeString(this.content_disposition, dos);

				// String

				writeString(this.content_type, dos);

				// String

				writeString(this.return_code, dos);

				// String

				writeString(this.return_msg, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("file_id=" + file_id);
			sb.append(",original_uri=" + original_uri);
			sb.append(",grant_system=" + grant_system);
			sb.append(",valid=" + String.valueOf(valid));
			sb.append(",md5sum=" + md5sum);
			sb.append(",content_length=" + String.valueOf(content_length));
			sb.append(",content_disposition=" + content_disposition);
			sb.append(",content_type=" + content_type);
			sb.append(",return_code=" + return_code);
			sb.append(",return_msg=" + return_msg);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row24Struct row24 = new row24Struct();

				/**
				 * [tFlowToIterate_14 begin ] start
				 */

				ok_Hash.put("tFlowToIterate_14", false);
				start_Hash.put("tFlowToIterate_14", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_14";

				int tos_count_tFlowToIterate_14 = 0;

				class BytesLimit65535_tFlowToIterate_14 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowToIterate_14().limitLog4jByte();

				int nb_line_tFlowToIterate_14 = 0;
				int counter_tFlowToIterate_14 = 0;

				/**
				 * [tFlowToIterate_14 begin ] stop
				 */

				/**
				 * [tJDBCInput_2 begin ] start
				 */

				ok_Hash.put("tJDBCInput_2", false);
				start_Hash.put("tJDBCInput_2", System.currentTimeMillis());

				currentComponent = "tJDBCInput_2";

				int tos_count_tJDBCInput_2 = 0;

				class BytesLimit65535_tJDBCInput_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJDBCInput_2().limitLog4jByte();

				int nb_line_tJDBCInput_2 = 0;
				java.sql.Connection conn_tJDBCInput_2 = null;
				conn_tJDBCInput_2 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_4");

				java.sql.Statement stmt_tJDBCInput_2 = conn_tJDBCInput_2
						.createStatement();

				String dbquery_tJDBCInput_2 = "SELECT ref_file_id as file_id,original_uri,grant_system,valid,md5sum,\n	content_length,content_disposition,content_type,return_code,return_msg\nFROM "
						+ context.mapping_table_name
						+ "  \nWHERE file_id = '"
						+ ((String) globalMap.get("header1.file_id"))
						+ "' \nAND valid is true\nLIMIT 1";

				globalMap.put("tJDBCInput_2_QUERY", dbquery_tJDBCInput_2);

				java.sql.ResultSet rs_tJDBCInput_2 = null;
				try {
					rs_tJDBCInput_2 = stmt_tJDBCInput_2
							.executeQuery(dbquery_tJDBCInput_2);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_2 = rs_tJDBCInput_2
							.getMetaData();
					int colQtyInRs_tJDBCInput_2 = rsmd_tJDBCInput_2
							.getColumnCount();

					String tmpContent_tJDBCInput_2 = null;

					while (rs_tJDBCInput_2.next()) {
						nb_line_tJDBCInput_2++;

						if (colQtyInRs_tJDBCInput_2 < 1) {
							row24.file_id = null;
						} else {

							row24.file_id = routines.system.JDBCUtil.getString(
									rs_tJDBCInput_2, 1, false);
						}
						if (colQtyInRs_tJDBCInput_2 < 2) {
							row24.original_uri = null;
						} else {

							row24.original_uri = routines.system.JDBCUtil
									.getString(rs_tJDBCInput_2, 2, false);
						}
						if (colQtyInRs_tJDBCInput_2 < 3) {
							row24.grant_system = null;
						} else {

							row24.grant_system = routines.system.JDBCUtil
									.getString(rs_tJDBCInput_2, 3, false);
						}
						if (colQtyInRs_tJDBCInput_2 < 4) {
							row24.valid = null;
						} else {

							if (rs_tJDBCInput_2.getObject(4) != null) {
								row24.valid = rs_tJDBCInput_2.getBoolean(4);
							} else {
								row24.valid = null;
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 5) {
							row24.md5sum = null;
						} else {

							row24.md5sum = routines.system.JDBCUtil.getString(
									rs_tJDBCInput_2, 5, false);
						}
						if (colQtyInRs_tJDBCInput_2 < 6) {
							row24.content_length = null;
						} else {

							if (rs_tJDBCInput_2.getObject(6) != null) {
								row24.content_length = rs_tJDBCInput_2
										.getInt(6);
							} else {
								row24.content_length = null;
							}
						}
						if (colQtyInRs_tJDBCInput_2 < 7) {
							row24.content_disposition = null;
						} else {

							row24.content_disposition = routines.system.JDBCUtil
									.getString(rs_tJDBCInput_2, 7, false);
						}
						if (colQtyInRs_tJDBCInput_2 < 8) {
							row24.content_type = null;
						} else {

							row24.content_type = routines.system.JDBCUtil
									.getString(rs_tJDBCInput_2, 8, false);
						}
						if (colQtyInRs_tJDBCInput_2 < 9) {
							row24.return_code = null;
						} else {

							row24.return_code = routines.system.JDBCUtil
									.getString(rs_tJDBCInput_2, 9, false);
						}
						if (colQtyInRs_tJDBCInput_2 < 10) {
							row24.return_msg = null;
						} else {

							row24.return_msg = routines.system.JDBCUtil
									.getString(rs_tJDBCInput_2, 10, false);
						}

						/**
						 * [tJDBCInput_2 begin ] stop
						 */

						/**
						 * [tJDBCInput_2 main ] start
						 */

						currentComponent = "tJDBCInput_2";

						tos_count_tJDBCInput_2++;

						/**
						 * [tJDBCInput_2 main ] stop
						 */

						/**
						 * [tFlowToIterate_14 main ] start
						 */

						currentComponent = "tFlowToIterate_14";

						globalMap.put("row24.file_id", row24.file_id);

						globalMap.put("row24.original_uri", row24.original_uri);

						globalMap.put("row24.grant_system", row24.grant_system);

						globalMap.put("row24.valid", row24.valid);

						globalMap.put("row24.md5sum", row24.md5sum);

						globalMap.put("row24.content_length",
								row24.content_length);

						globalMap.put("row24.content_disposition",
								row24.content_disposition);

						globalMap.put("row24.content_type", row24.content_type);

						globalMap.put("row24.return_code", row24.return_code);

						globalMap.put("row24.return_msg", row24.return_msg);

						nb_line_tFlowToIterate_14++;
						counter_tFlowToIterate_14++;
						globalMap.put("tFlowToIterate_14_CURRENT_ITERATION",
								counter_tFlowToIterate_14);

						tos_count_tFlowToIterate_14++;

						/**
						 * [tFlowToIterate_14 main ] stop
						 */

						/**
						 * [tJDBCInput_2 end ] start
						 */

						currentComponent = "tJDBCInput_2";

					}
				} finally {
					if (rs_tJDBCInput_2 != null) {
						rs_tJDBCInput_2.close();
					}
					stmt_tJDBCInput_2.close();

				}
				globalMap.put("tJDBCInput_2_NB_LINE", nb_line_tJDBCInput_2);

				ok_Hash.put("tJDBCInput_2", true);
				end_Hash.put("tJDBCInput_2", System.currentTimeMillis());

				/**
				 * [tJDBCInput_2 end ] stop
				 */

				/**
				 * [tFlowToIterate_14 end ] start
				 */

				currentComponent = "tFlowToIterate_14";

				globalMap.put("tFlowToIterate_14_NB_LINE",
						nb_line_tFlowToIterate_14);

				ok_Hash.put("tFlowToIterate_14", true);
				end_Hash.put("tFlowToIterate_14", System.currentTimeMillis());

				if (((Integer) globalMap.get("tFlowToIterate_14_NB_LINE")) > 0
						&& ((String) globalMap.get("row21.azp"))
								.contains((String) globalMap
										.get("row24.grant_system"))) {

					tFixedFlowInput_16Process(globalMap);
				}

				if (((Integer) globalMap.get("tFlowToIterate_14_NB_LINE")) > 0
						&& !((String) globalMap.get("row21.azp"))
								.contains((String) globalMap
										.get("row24.grant_system"))) {

					tFixedFlowInput_17Process(globalMap);
				}

				if (((Integer) globalMap.get("tFlowToIterate_14_NB_LINE")) <= 0) {

					tFixedFlowInput_18Process(globalMap);
				}

				/**
				 * [tFlowToIterate_14 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_2 finally ] start
				 */

				currentComponent = "tJDBCInput_2";

				/**
				 * [tJDBCInput_2 finally ] stop
				 */

				/**
				 * [tFlowToIterate_14 finally ] start
				 */

				currentComponent = "tFlowToIterate_14";

				/**
				 * [tFlowToIterate_14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_2_SUBPROCESS_STATE", 1);
	}

	public static class ok_resp4Struct implements
			routines.system.IPersistableRow<ok_resp4Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ok_resp4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements
			routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String status_code;

		public String getStatus_code() {
			return this.status_code;
		}

		public String messages;

		public String getMessages() {
			return this.messages;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		public String original_uri;

		public String getOriginal_uri() {
			return this.original_uri;
		}

		public Boolean valid;

		public Boolean getValid() {
			return this.valid;
		}

		public String md5sum;

		public String getMd5sum() {
			return this.md5sum;
		}

		public Integer content_length;

		public Integer getContent_length() {
			return this.content_length;
		}

		public String content_disposition;

		public String getContent_disposition() {
			return this.content_disposition;
		}

		public String content_type;

		public String getContent_type() {
			return this.content_type;
		}

		public String return_code;

		public String getReturn_code() {
			return this.return_code;
		}

		public String return_msg;

		public String getReturn_msg() {
			return this.return_msg;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.status_code = readString(dis);

					this.messages = readString(dis);

					this.file_id = readString(dis);

					this.original_uri = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valid = null;
					} else {
						this.valid = dis.readBoolean();
					}

					this.md5sum = readString(dis);

					this.content_length = readInteger(dis);

					this.content_disposition = readString(dis);

					this.content_type = readString(dis);

					this.return_code = readString(dis);

					this.return_msg = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status_code, dos);

				// String

				writeString(this.messages, dos);

				// String

				writeString(this.file_id, dos);

				// String

				writeString(this.original_uri, dos);

				// Boolean

				if (this.valid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.valid);
				}

				// String

				writeString(this.md5sum, dos);

				// Integer

				writeInteger(this.content_length, dos);

				// String

				writeString(this.content_disposition, dos);

				// String

				writeString(this.content_type, dos);

				// String

				writeString(this.return_code, dos);

				// String

				writeString(this.return_msg, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status_code=" + status_code);
			sb.append(",messages=" + messages);
			sb.append(",file_id=" + file_id);
			sb.append(",original_uri=" + original_uri);
			sb.append(",valid=" + String.valueOf(valid));
			sb.append(",md5sum=" + md5sum);
			sb.append(",content_length=" + String.valueOf(content_length));
			sb.append(",content_disposition=" + content_disposition);
			sb.append(",content_type=" + content_type);
			sb.append(",return_code=" + return_code);
			sb.append(",return_msg=" + return_msg);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_16Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row25Struct row25 = new row25Struct();
				ok_resp4Struct ok_resp4 = new ok_resp4Struct();

				/**
				 * [tRESTResponse_15 begin ] start
				 */

				ok_Hash.put("tRESTResponse_15", false);
				start_Hash.put("tRESTResponse_15", System.currentTimeMillis());

				currentComponent = "tRESTResponse_15";

				int tos_count_tRESTResponse_15 = 0;

				class BytesLimit65535_tRESTResponse_15 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTResponse_15().limitLog4jByte();

				/**
				 * [tRESTResponse_15 begin ] stop
				 */

				/**
				 * [tXMLMap_18 begin ] start
				 */

				ok_Hash.put("tXMLMap_18", false);
				start_Hash.put("tXMLMap_18", System.currentTimeMillis());

				currentComponent = "tXMLMap_18";

				int tos_count_tXMLMap_18 = 0;

				class BytesLimit65535_tXMLMap_18 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_18().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_18 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_18__Struct {
				}
				Var__tXMLMap_18__Struct Var__tXMLMap_18 = new Var__tXMLMap_18__Struct();
				// ###############################
				// # Outputs initialization
				ok_resp4Struct ok_resp4_tmp = new ok_resp4Struct();
				ok_resp4Struct ok_resp4_save = null;
				// ###############################
				int nb_line_tXMLMap_18 = 0;

				XML_API_tXMLMap_18 xml_api_tXMLMap_18 = new XML_API_tXMLMap_18();

				class GenerateDocument_ok_resp4 {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					String currentValue = null;

					public GenerateDocument_ok_resp4() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						generateOk();
						return this.doc;
					}

					// do some work after document has been generated
					private void generateOk() {
						routines.system.NestXMLTool.replaceDefaultNameSpace(
								this.doc.getRootElement(), null);
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin,
							row25Struct row25, Var__tXMLMap_18__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = org.dom4j.DocumentHelper
									.createElement("root");
							doc.add(root);
							subTreeRootParent = root;
							org.dom4j.Element root_0 = null;
							root_0 = root.addElement("STATUS");
							valueMap.put("root_0", "1");
							if (valueMap.get("root_0") != null) {
								routines.system.NestXMLTool.setText(root_0,
										FormatterUtils.format("1", null));
							}
							org.dom4j.Element root_1 = null;
							root_1 = root.addElement("FILE_ID");
							valueMap.put("root_1", row25.file_id);
							if (valueMap.get("root_1") != null) {
								routines.system.NestXMLTool.setText(root_1,
										FormatterUtils.format(row25.file_id,
												null));
							}
							org.dom4j.Element root_2 = null;
							root_2 = root.addElement("RETURN_CODE");
							valueMap.put("root_2", row25.status_code);
							if (valueMap.get("root_2") != null) {
								routines.system.NestXMLTool.setText(root_2,
										FormatterUtils.format(
												row25.status_code, null));
							}
							org.dom4j.Element root_3 = null;
							root_3 = root.addElement("RETURN_MSG");
							valueMap.put("root_3", row25.messages);
							if (valueMap.get("root_3") != null) {
								routines.system.NestXMLTool.setText(root_3,
										FormatterUtils.format(row25.messages,
												null));
							}
							org.dom4j.Element root_4 = null;
							root_4 = root.addElement("CONTENT");
							valueMap.put("root_4", "");
							if (valueMap.get("root_4") != null) {
								routines.system.NestXMLTool.setText(root_4,
										FormatterUtils.format("", null));
							}
							org.dom4j.Element root_5 = null;
							root_5 = root.addElement("MID_NO");
							valueMap.put("root_5", context.MID_NO);
							if (valueMap.get("root_5") != null) {
								routines.system.NestXMLTool.setText(root_5,
										FormatterUtils.format(context.MID_NO,
												null));
							}
							org.dom4j.Element root_6 = null;
							root_6 = root.addElement("ORIGINAL_URI");
							valueMap.put("root_6", row25.original_uri);
							if (valueMap.get("root_6") != null) {
								routines.system.NestXMLTool.setText(root_6,
										FormatterUtils.format(
												row25.original_uri, null));
							}
							org.dom4j.Element root_7 = null;
							root_7 = root.addElement("VALID");
							valueMap.put("root_7", row25.valid);
							if (valueMap.get("root_7") != null) {
								routines.system.NestXMLTool.setText(root_7,
										FormatterUtils
												.format(row25.valid, null));
							}
							org.dom4j.Element root_8 = null;
							root_8 = root.addElement("MD5SUM");
							valueMap.put("root_8", row25.md5sum);
							if (valueMap.get("root_8") != null) {
								routines.system.NestXMLTool.setText(root_8,
										FormatterUtils.format(row25.md5sum,
												null));
							}
							org.dom4j.Element root_9 = null;
							root_9 = root.addElement("CONTENT_LENGTH");
							valueMap.put("root_9", row25.content_length);
							if (valueMap.get("root_9") != null) {
								routines.system.NestXMLTool.setText(root_9,
										FormatterUtils.format(
												row25.content_length, null));
							}
							org.dom4j.Element root_10 = null;
							root_10 = root.addElement("CONTENT_DISPOSITION");
							valueMap.put("root_10", row25.content_disposition);
							if (valueMap.get("root_10") != null) {
								routines.system.NestXMLTool
										.setText(
												root_10,
												FormatterUtils
														.format(row25.content_disposition,
																null));
							}
							org.dom4j.Element root_11 = null;
							root_11 = root.addElement("CONTENT_TYPE");
							valueMap.put("root_11", row25.content_type);
							if (valueMap.get("root_11") != null) {
								routines.system.NestXMLTool.setText(root_11,
										FormatterUtils.format(
												row25.content_type, null));
							}
							org.dom4j.Element root_12 = null;
							root_12 = root.addElement("RETURN_CODE");
							valueMap.put("root_12", row25.return_code);
							if (valueMap.get("root_12") != null) {
								routines.system.NestXMLTool.setText(root_12,
										FormatterUtils.format(
												row25.return_code, null));
							}
							org.dom4j.Element root_13 = null;
							root_13 = root.addElement("RETURN_MSG");
							valueMap.put("root_13", row25.return_msg);
							if (valueMap.get("root_13") != null) {
								routines.system.NestXMLTool.setText(root_13,
										FormatterUtils.format(row25.return_msg,
												null));
							}
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
					}
				}

				/**
				 * [tXMLMap_18 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_16 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_16", false);
				start_Hash
						.put("tFixedFlowInput_16", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_16";

				int tos_count_tFixedFlowInput_16 = 0;

				class BytesLimit65535_tFixedFlowInput_16 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_16().limitLog4jByte();

				for (int i_tFixedFlowInput_16 = 0; i_tFixedFlowInput_16 < 1; i_tFixedFlowInput_16++) {

					row25.status_code = "200";

					row25.messages = "File mapping found";

					row25.file_id = ((String) globalMap.get("header1.file_id"));

					row25.original_uri = ((String) globalMap
							.get("row24.original_uri"));

					row25.valid = ((Boolean) globalMap.get("row24.valid"));

					row25.md5sum = ((String) globalMap.get("row24.md5sum"));

					row25.content_length = ((Integer) globalMap
							.get("row24.content_length"));

					row25.content_disposition = ((String) globalMap
							.get("row24.content_disposition"));

					row25.content_type = ((String) globalMap
							.get("row24.content_type"));

					row25.return_code = ((String) globalMap
							.get("row24.return_code"));

					row25.return_msg = ((String) globalMap
							.get("row24.return_msg"));

					/**
					 * [tFixedFlowInput_16 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_16 main ] start
					 */

					currentComponent = "tFixedFlowInput_16";

					tos_count_tFixedFlowInput_16++;

					/**
					 * [tFixedFlowInput_16 main ] stop
					 */

					/**
					 * [tXMLMap_18 main ] start
					 */

					currentComponent = "tXMLMap_18";

					boolean rejectedInnerJoin_tXMLMap_18 = false;
					boolean rejectedDocInnerJoin_tXMLMap_18 = false;
					boolean mainRowRejected_tXMLMap_18 = false;
					boolean isMatchDocRowtXMLMap_18 = false;

					GenerateDocument_ok_resp4 gen_Doc_ok_resp4_tXMLMap_18 = new GenerateDocument_ok_resp4();
					ok_resp4_tmp.body = null;

					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tXMLMap_18__Struct Var = Var__tXMLMap_18;
						// ###############################
						// # Output tables

						ok_resp4 = null;

						// # Output table : 'ok_resp4'

						gen_Doc_ok_resp4_tXMLMap_18.generateElements(
								rejectedDocInnerJoin_tXMLMap_18, row25, Var);

						if (ok_resp4_tmp.body == null) {
							ok_resp4_tmp.body = new routines.system.Document();
							ok_resp4_tmp.body
									.setDocument(gen_Doc_ok_resp4_tXMLMap_18
											.getDocument());
						}

						ok_resp4 = ok_resp4_tmp;
						ok_resp4_save = ok_resp4_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tXMLMap_18 = false;

					tos_count_tXMLMap_18++;

					/**
					 * [tXMLMap_18 main ] stop
					 */
					// Start of branch "ok_resp4"
					if (ok_resp4 != null) {

						/**
						 * [tRESTResponse_15 main ] start
						 */

						currentComponent = "tRESTResponse_15";

						java.io.OutputStream outputStream_tRESTResponse_15 = (java.io.OutputStream) globalMap
								.get("restResponseStream");
						boolean responseAlreadySent_tRESTResponse_15 = globalMap
								.containsKey("restResponse");

						if (null == outputStream_tRESTResponse_15
								&& responseAlreadySent_tRESTResponse_15) {
							throw new RuntimeException(
									"Rest response already sent.");
						} else if (!globalMap.containsKey("restRequest")) {
							throw new RuntimeException(
									"Not received rest request yet.");
						} else {
							Integer restProviderStatusCode_tRESTResponse_15 = 200;

							Object restProviderResponse_tRESTResponse_15 = null;
							if (null != ok_resp4.body) {
								restProviderResponse_tRESTResponse_15 = ok_resp4.body
										.getDocument();
							}

							java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_15 = new java.util.TreeMap<String, String>(
									String.CASE_INSENSITIVE_ORDER);
							restProviderResponseHeaders_tRESTResponse_15.put(
									"i_original_uri", ((String) globalMap
											.get("row24.original_uri")));
							restProviderResponseHeaders_tRESTResponse_15.put(
									"i_valid", ((Boolean) globalMap
											.get("row24.valid")).toString());
							restProviderResponseHeaders_tRESTResponse_15.put(
									"i_content_md5",
									((String) globalMap.get("row24.md5sum")));
							restProviderResponseHeaders_tRESTResponse_15.put(
									"i_content_length", ((Integer) globalMap
											.get("row24.content_length"))
											.toString());
							restProviderResponseHeaders_tRESTResponse_15.put(
									"i_content_disposition",
									((String) globalMap
											.get("row24.content_disposition")));
							restProviderResponseHeaders_tRESTResponse_15.put(
									"i_content_type", ((String) globalMap
											.get("row24.content_type")));
							restProviderResponseHeaders_tRESTResponse_15.put(
									"i_return_code", ((String) globalMap
											.get("row24.return_code")));
							restProviderResponseHeaders_tRESTResponse_15
									.put("i_return_msg", ((String) globalMap
											.get("row24.return_msg")));

							java.util.Map<String, Object> restRequest_tRESTResponse_15 = (java.util.Map<String, Object>) globalMap
									.get("restRequest");
							org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_15 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_15
									.get("MESSAGE_CONTEXT");

							if (null == outputStream_tRESTResponse_15) {
								java.util.Map<String, Object> restResponse_tRESTResponse_15 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_15.put("BODY",
										restProviderResponse_tRESTResponse_15);
								restResponse_tRESTResponse_15
										.put("STATUS",
												restProviderStatusCode_tRESTResponse_15);
								restResponse_tRESTResponse_15
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_15);
								restResponse_tRESTResponse_15.put(
										"drop.json.root.element",
										Boolean.valueOf(true));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_15);

							} else {

								javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_15 = null;
								if (!responseAlreadySent_tRESTResponse_15) {
									org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
													true);

									messageContext_tRESTResponse_15
											.put(org.apache.cxf.message.Message.RESPONSE_CODE,
													restProviderStatusCode_tRESTResponse_15);
									javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_15 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
									for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_15
											.entrySet()) {
										headersMultivaluedMap_tRESTResponse_15
												.putSingle(multivaluedHeader
														.getKey(),
														multivaluedHeader
																.getValue());
									}
									messageContext_tRESTResponse_15
											.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
													headersMultivaluedMap_tRESTResponse_15);

									// String
									// responseContentType_tRESTResponse_15 =
									// (String)
									// messageContext_tRESTResponse_15.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									String responseContentType_tRESTResponse_15 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									if (null == responseContentType_tRESTResponse_15) {
										// this should not be needed, just in
										// case. set it to the first value in
										// the sorted list returned from
										// HttpHeaders
										responseMediaType_tRESTResponse_15 = messageContext_tRESTResponse_15
												.getHttpHeaders()
												.getAcceptableMediaTypes()
												.get(0);
									} else {
										responseMediaType_tRESTResponse_15 = org.apache.cxf.jaxrs.utils.JAXRSUtils
												.toMediaType(responseContentType_tRESTResponse_15);
									}
									globalMap.put("restResponseMediaType",
											responseMediaType_tRESTResponse_15);

									String responseMediaSubType_tRESTResponse_15 = responseMediaType_tRESTResponse_15
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_15
											.equals("xml")
											|| responseMediaSubType_tRESTResponse_15
													.endsWith("+xml")) {
										outputStream_tRESTResponse_15
												.write("<wrapper>".getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"</wrapper>");
									}
									if (responseMediaSubType_tRESTResponse_15
											.equals("json")
											|| responseMediaSubType_tRESTResponse_15
													.endsWith("+json")) {
										outputStream_tRESTResponse_15.write("["
												.getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"]");
									}

									globalMap.put("restResponse", true);
								} else {
									responseMediaType_tRESTResponse_15 = (javax.ws.rs.core.MediaType) globalMap
											.get("restResponseMediaType");
								}

								if (null != restProviderResponse_tRESTResponse_15) {
									String responseMediaSubType_tRESTResponse_15 = responseMediaType_tRESTResponse_15
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_15
											.equals("json")
											|| responseMediaSubType_tRESTResponse_15
													.endsWith("+json")) {
										if (globalMap
												.containsKey("restResponseJsonStarted")) {
											outputStream_tRESTResponse_15
													.write(",".getBytes());
										} else {
											globalMap.put(
													"restResponseJsonStarted",
													true);
										}
									}

									Class<? extends Object> responseBodyClass_tRESTResponse_15 = restProviderResponse_tRESTResponse_15
											.getClass();
									javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_15 = messageContext_tRESTResponse_15
											.getProviders();
									javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_15 = messageBodyProviders_tRESTResponse_15
											.getMessageBodyWriter(
													responseBodyClass_tRESTResponse_15,
													responseBodyClass_tRESTResponse_15,
													null,
													responseMediaType_tRESTResponse_15);
									messageBodyWriter_tRESTResponse_15
											.writeTo(
													restProviderResponse_tRESTResponse_15,
													responseBodyClass_tRESTResponse_15,
													responseBodyClass_tRESTResponse_15,
													new java.lang.annotation.Annotation[] {},
													responseMediaType_tRESTResponse_15,
													null,
													outputStream_tRESTResponse_15);
								}
								// initial variant
								// outputStream_tRESTResponse_15.write(String.valueOf(restProviderResponse_tRESTResponse_15).getBytes());
								outputStream_tRESTResponse_15.flush();
							}
						}

						tos_count_tRESTResponse_15++;

						/**
						 * [tRESTResponse_15 main ] stop
						 */

					} // End of branch "ok_resp4"

					/**
					 * [tFixedFlowInput_16 end ] start
					 */

					currentComponent = "tFixedFlowInput_16";

				}
				globalMap.put("tFixedFlowInput_16_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_16", true);
				end_Hash.put("tFixedFlowInput_16", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_16 end ] stop
				 */

				/**
				 * [tXMLMap_18 end ] start
				 */

				currentComponent = "tXMLMap_18";

				ok_Hash.put("tXMLMap_18", true);
				end_Hash.put("tXMLMap_18", System.currentTimeMillis());

				/**
				 * [tXMLMap_18 end ] stop
				 */

				/**
				 * [tRESTResponse_15 end ] start
				 */

				currentComponent = "tRESTResponse_15";

				ok_Hash.put("tRESTResponse_15", true);
				end_Hash.put("tRESTResponse_15", System.currentTimeMillis());

				/**
				 * [tRESTResponse_15 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_16 finally ] start
				 */

				currentComponent = "tFixedFlowInput_16";

				/**
				 * [tFixedFlowInput_16 finally ] stop
				 */

				/**
				 * [tXMLMap_18 finally ] start
				 */

				currentComponent = "tXMLMap_18";

				/**
				 * [tXMLMap_18 finally ] stop
				 */

				/**
				 * [tRESTResponse_15 finally ] start
				 */

				currentComponent = "tRESTResponse_15";

				/**
				 * [tRESTResponse_15 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_16_SUBPROCESS_STATE", 1);
	}

	public static class e401_4aStruct implements
			routines.system.IPersistableRow<e401_4aStruct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(e401_4aStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row27Struct implements
			routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String status_code;

		public String getStatus_code() {
			return this.status_code;
		}

		public String status_message;

		public String getStatus_message() {
			return this.status_message;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.status_code = readString(dis);

					this.status_message = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status_code, dos);

				// String

				writeString(this.status_message, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status_code=" + status_code);
			sb.append(",status_message=" + status_message);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_17Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row27Struct row27 = new row27Struct();
				e401_4aStruct e401_4a = new e401_4aStruct();

				/**
				 * [tRESTResponse_16 begin ] start
				 */

				ok_Hash.put("tRESTResponse_16", false);
				start_Hash.put("tRESTResponse_16", System.currentTimeMillis());

				currentComponent = "tRESTResponse_16";

				int tos_count_tRESTResponse_16 = 0;

				class BytesLimit65535_tRESTResponse_16 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTResponse_16().limitLog4jByte();

				/**
				 * [tRESTResponse_16 begin ] stop
				 */

				/**
				 * [tXMLMap_19 begin ] start
				 */

				ok_Hash.put("tXMLMap_19", false);
				start_Hash.put("tXMLMap_19", System.currentTimeMillis());

				currentComponent = "tXMLMap_19";

				int tos_count_tXMLMap_19 = 0;

				class BytesLimit65535_tXMLMap_19 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_19().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_19 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_19__Struct {
				}
				Var__tXMLMap_19__Struct Var__tXMLMap_19 = new Var__tXMLMap_19__Struct();
				// ###############################
				// # Outputs initialization
				e401_4aStruct e401_4a_tmp = new e401_4aStruct();
				e401_4aStruct e401_4a_save = null;
				// ###############################
				int nb_line_tXMLMap_19 = 0;

				XML_API_tXMLMap_19 xml_api_tXMLMap_19 = new XML_API_tXMLMap_19();

				class GenerateDocument_e401_4a {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					String currentValue = null;

					public GenerateDocument_e401_4a() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						generateOk();
						return this.doc;
					}

					// do some work after document has been generated
					private void generateOk() {
						routines.system.NestXMLTool.replaceDefaultNameSpace(
								this.doc.getRootElement(), null);
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin,
							row27Struct row27, Var__tXMLMap_19__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = org.dom4j.DocumentHelper
									.createElement("root");
							doc.add(root);
							subTreeRootParent = root;
							org.dom4j.Element root_0 = null;
							root_0 = root.addElement("STATUS");
							valueMap.put("root_0", "0");
							if (valueMap.get("root_0") != null) {
								routines.system.NestXMLTool.setText(root_0,
										FormatterUtils.format("0", null));
							}
							org.dom4j.Element root_1 = null;
							root_1 = root.addElement("FILE_ID");
							valueMap.put("root_1", row27.file_id);
							if (valueMap.get("root_1") != null) {
								routines.system.NestXMLTool.setText(root_1,
										FormatterUtils.format(row27.file_id,
												null));
							}
							org.dom4j.Element root_2 = null;
							root_2 = root.addElement("RETURN_CODE");
							valueMap.put("root_2", row27.status_code);
							if (valueMap.get("root_2") != null) {
								routines.system.NestXMLTool.setText(root_2,
										FormatterUtils.format(
												row27.status_code, null));
							}
							org.dom4j.Element root_3 = null;
							root_3 = root.addElement("RETURN_MSG");
							valueMap.put("root_3", row27.status_message);
							if (valueMap.get("root_3") != null) {
								routines.system.NestXMLTool.setText(root_3,
										FormatterUtils.format(
												row27.status_message, null));
							}
							org.dom4j.Element root_4 = null;
							root_4 = root.addElement("CONTENT");
							valueMap.put("root_4", "file_id : " + row27.file_id);
							if (valueMap.get("root_4") != null) {
								routines.system.NestXMLTool.setText(
										root_4,
										FormatterUtils.format("file_id : "
												+ row27.file_id, null));
							}
							org.dom4j.Element root_5 = null;
							root_5 = root.addElement("MID_NO");
							valueMap.put("root_5", context.MID_NO);
							if (valueMap.get("root_5") != null) {
								routines.system.NestXMLTool.setText(root_5,
										FormatterUtils.format(context.MID_NO,
												null));
							}
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
					}
				}

				/**
				 * [tXMLMap_19 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_17 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_17", false);
				start_Hash
						.put("tFixedFlowInput_17", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_17";

				int tos_count_tFixedFlowInput_17 = 0;

				class BytesLimit65535_tFixedFlowInput_17 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_17().limitLog4jByte();

				for (int i_tFixedFlowInput_17 = 0; i_tFixedFlowInput_17 < 1; i_tFixedFlowInput_17++) {

					row27.status_code = "401";

					row27.status_message = "Authority fail";

					row27.file_id = ((String) globalMap.get("header1.file_id"));

					/**
					 * [tFixedFlowInput_17 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_17 main ] start
					 */

					currentComponent = "tFixedFlowInput_17";

					tos_count_tFixedFlowInput_17++;

					/**
					 * [tFixedFlowInput_17 main ] stop
					 */

					/**
					 * [tXMLMap_19 main ] start
					 */

					currentComponent = "tXMLMap_19";

					boolean rejectedInnerJoin_tXMLMap_19 = false;
					boolean rejectedDocInnerJoin_tXMLMap_19 = false;
					boolean mainRowRejected_tXMLMap_19 = false;
					boolean isMatchDocRowtXMLMap_19 = false;

					GenerateDocument_e401_4a gen_Doc_e401_4a_tXMLMap_19 = new GenerateDocument_e401_4a();
					e401_4a_tmp.body = null;

					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tXMLMap_19__Struct Var = Var__tXMLMap_19;
						// ###############################
						// # Output tables

						e401_4a = null;

						// # Output table : 'e401_4a'

						gen_Doc_e401_4a_tXMLMap_19.generateElements(
								rejectedDocInnerJoin_tXMLMap_19, row27, Var);

						if (e401_4a_tmp.body == null) {
							e401_4a_tmp.body = new routines.system.Document();
							e401_4a_tmp.body
									.setDocument(gen_Doc_e401_4a_tXMLMap_19
											.getDocument());
						}

						e401_4a = e401_4a_tmp;
						e401_4a_save = e401_4a_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tXMLMap_19 = false;

					tos_count_tXMLMap_19++;

					/**
					 * [tXMLMap_19 main ] stop
					 */
					// Start of branch "e401_4a"
					if (e401_4a != null) {

						/**
						 * [tRESTResponse_16 main ] start
						 */

						currentComponent = "tRESTResponse_16";

						java.io.OutputStream outputStream_tRESTResponse_16 = (java.io.OutputStream) globalMap
								.get("restResponseStream");
						boolean responseAlreadySent_tRESTResponse_16 = globalMap
								.containsKey("restResponse");

						if (null == outputStream_tRESTResponse_16
								&& responseAlreadySent_tRESTResponse_16) {
							throw new RuntimeException(
									"Rest response already sent.");
						} else if (!globalMap.containsKey("restRequest")) {
							throw new RuntimeException(
									"Not received rest request yet.");
						} else {
							Integer restProviderStatusCode_tRESTResponse_16 = 401;

							Object restProviderResponse_tRESTResponse_16 = null;
							if (null != e401_4a.body) {
								restProviderResponse_tRESTResponse_16 = e401_4a.body
										.getDocument();
							}

							java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_16 = new java.util.TreeMap<String, String>(
									String.CASE_INSENSITIVE_ORDER);

							java.util.Map<String, Object> restRequest_tRESTResponse_16 = (java.util.Map<String, Object>) globalMap
									.get("restRequest");
							org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_16 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_16
									.get("MESSAGE_CONTEXT");

							if (null == outputStream_tRESTResponse_16) {
								java.util.Map<String, Object> restResponse_tRESTResponse_16 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_16.put("BODY",
										restProviderResponse_tRESTResponse_16);
								restResponse_tRESTResponse_16
										.put("STATUS",
												restProviderStatusCode_tRESTResponse_16);
								restResponse_tRESTResponse_16
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_16);
								restResponse_tRESTResponse_16.put(
										"drop.json.root.element",
										Boolean.valueOf(true));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_16);

							} else {

								javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_16 = null;
								if (!responseAlreadySent_tRESTResponse_16) {
									org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
													true);

									messageContext_tRESTResponse_16
											.put(org.apache.cxf.message.Message.RESPONSE_CODE,
													restProviderStatusCode_tRESTResponse_16);
									javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_16 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
									for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_16
											.entrySet()) {
										headersMultivaluedMap_tRESTResponse_16
												.putSingle(multivaluedHeader
														.getKey(),
														multivaluedHeader
																.getValue());
									}
									messageContext_tRESTResponse_16
											.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
													headersMultivaluedMap_tRESTResponse_16);

									// String
									// responseContentType_tRESTResponse_16 =
									// (String)
									// messageContext_tRESTResponse_16.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									String responseContentType_tRESTResponse_16 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									if (null == responseContentType_tRESTResponse_16) {
										// this should not be needed, just in
										// case. set it to the first value in
										// the sorted list returned from
										// HttpHeaders
										responseMediaType_tRESTResponse_16 = messageContext_tRESTResponse_16
												.getHttpHeaders()
												.getAcceptableMediaTypes()
												.get(0);
									} else {
										responseMediaType_tRESTResponse_16 = org.apache.cxf.jaxrs.utils.JAXRSUtils
												.toMediaType(responseContentType_tRESTResponse_16);
									}
									globalMap.put("restResponseMediaType",
											responseMediaType_tRESTResponse_16);

									String responseMediaSubType_tRESTResponse_16 = responseMediaType_tRESTResponse_16
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_16
											.equals("xml")
											|| responseMediaSubType_tRESTResponse_16
													.endsWith("+xml")) {
										outputStream_tRESTResponse_16
												.write("<wrapper>".getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"</wrapper>");
									}
									if (responseMediaSubType_tRESTResponse_16
											.equals("json")
											|| responseMediaSubType_tRESTResponse_16
													.endsWith("+json")) {
										outputStream_tRESTResponse_16.write("["
												.getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"]");
									}

									globalMap.put("restResponse", true);
								} else {
									responseMediaType_tRESTResponse_16 = (javax.ws.rs.core.MediaType) globalMap
											.get("restResponseMediaType");
								}

								if (null != restProviderResponse_tRESTResponse_16) {
									String responseMediaSubType_tRESTResponse_16 = responseMediaType_tRESTResponse_16
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_16
											.equals("json")
											|| responseMediaSubType_tRESTResponse_16
													.endsWith("+json")) {
										if (globalMap
												.containsKey("restResponseJsonStarted")) {
											outputStream_tRESTResponse_16
													.write(",".getBytes());
										} else {
											globalMap.put(
													"restResponseJsonStarted",
													true);
										}
									}

									Class<? extends Object> responseBodyClass_tRESTResponse_16 = restProviderResponse_tRESTResponse_16
											.getClass();
									javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_16 = messageContext_tRESTResponse_16
											.getProviders();
									javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_16 = messageBodyProviders_tRESTResponse_16
											.getMessageBodyWriter(
													responseBodyClass_tRESTResponse_16,
													responseBodyClass_tRESTResponse_16,
													null,
													responseMediaType_tRESTResponse_16);
									messageBodyWriter_tRESTResponse_16
											.writeTo(
													restProviderResponse_tRESTResponse_16,
													responseBodyClass_tRESTResponse_16,
													responseBodyClass_tRESTResponse_16,
													new java.lang.annotation.Annotation[] {},
													responseMediaType_tRESTResponse_16,
													null,
													outputStream_tRESTResponse_16);
								}
								// initial variant
								// outputStream_tRESTResponse_16.write(String.valueOf(restProviderResponse_tRESTResponse_16).getBytes());
								outputStream_tRESTResponse_16.flush();
							}
						}

						tos_count_tRESTResponse_16++;

						/**
						 * [tRESTResponse_16 main ] stop
						 */

					} // End of branch "e401_4a"

					/**
					 * [tFixedFlowInput_17 end ] start
					 */

					currentComponent = "tFixedFlowInput_17";

				}
				globalMap.put("tFixedFlowInput_17_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_17", true);
				end_Hash.put("tFixedFlowInput_17", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_17 end ] stop
				 */

				/**
				 * [tXMLMap_19 end ] start
				 */

				currentComponent = "tXMLMap_19";

				ok_Hash.put("tXMLMap_19", true);
				end_Hash.put("tXMLMap_19", System.currentTimeMillis());

				/**
				 * [tXMLMap_19 end ] stop
				 */

				/**
				 * [tRESTResponse_16 end ] start
				 */

				currentComponent = "tRESTResponse_16";

				ok_Hash.put("tRESTResponse_16", true);
				end_Hash.put("tRESTResponse_16", System.currentTimeMillis());

				/**
				 * [tRESTResponse_16 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_17 finally ] start
				 */

				currentComponent = "tFixedFlowInput_17";

				/**
				 * [tFixedFlowInput_17 finally ] stop
				 */

				/**
				 * [tXMLMap_19 finally ] start
				 */

				currentComponent = "tXMLMap_19";

				/**
				 * [tXMLMap_19 finally ] stop
				 */

				/**
				 * [tRESTResponse_16 finally ] start
				 */

				currentComponent = "tRESTResponse_16";

				/**
				 * [tRESTResponse_16 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_17_SUBPROCESS_STATE", 1);
	}

	public static class e404_41Struct implements
			routines.system.IPersistableRow<e404_41Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(e404_41Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row28Struct implements
			routines.system.IPersistableRow<row28Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String status_code;

		public String getStatus_code() {
			return this.status_code;
		}

		public String status_message;

		public String getStatus_message() {
			return this.status_message;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.status_code = readString(dis);

					this.status_message = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status_code, dos);

				// String

				writeString(this.status_message, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status_code=" + status_code);
			sb.append(",status_message=" + status_message);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_18Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_18_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row28Struct row28 = new row28Struct();
				e404_41Struct e404_41 = new e404_41Struct();

				/**
				 * [tRESTResponse_17 begin ] start
				 */

				ok_Hash.put("tRESTResponse_17", false);
				start_Hash.put("tRESTResponse_17", System.currentTimeMillis());

				currentComponent = "tRESTResponse_17";

				int tos_count_tRESTResponse_17 = 0;

				class BytesLimit65535_tRESTResponse_17 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTResponse_17().limitLog4jByte();

				/**
				 * [tRESTResponse_17 begin ] stop
				 */

				/**
				 * [tXMLMap_20 begin ] start
				 */

				ok_Hash.put("tXMLMap_20", false);
				start_Hash.put("tXMLMap_20", System.currentTimeMillis());

				currentComponent = "tXMLMap_20";

				int tos_count_tXMLMap_20 = 0;

				class BytesLimit65535_tXMLMap_20 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_20().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_20 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_20__Struct {
				}
				Var__tXMLMap_20__Struct Var__tXMLMap_20 = new Var__tXMLMap_20__Struct();
				// ###############################
				// # Outputs initialization
				e404_41Struct e404_41_tmp = new e404_41Struct();
				e404_41Struct e404_41_save = null;
				// ###############################
				int nb_line_tXMLMap_20 = 0;

				XML_API_tXMLMap_20 xml_api_tXMLMap_20 = new XML_API_tXMLMap_20();

				class GenerateDocument_e404_41 {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					String currentValue = null;

					public GenerateDocument_e404_41() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						generateOk();
						return this.doc;
					}

					// do some work after document has been generated
					private void generateOk() {
						routines.system.NestXMLTool.replaceDefaultNameSpace(
								this.doc.getRootElement(), null);
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin,
							row28Struct row28, Var__tXMLMap_20__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = org.dom4j.DocumentHelper
									.createElement("root");
							doc.add(root);
							subTreeRootParent = root;
							org.dom4j.Element root_0 = null;
							root_0 = root.addElement("STATUS");
							valueMap.put("root_0", "0");
							if (valueMap.get("root_0") != null) {
								routines.system.NestXMLTool.setText(root_0,
										FormatterUtils.format("0", null));
							}
							org.dom4j.Element root_1 = null;
							root_1 = root.addElement("FILE_ID");
							valueMap.put("root_1", row28.file_id);
							if (valueMap.get("root_1") != null) {
								routines.system.NestXMLTool.setText(root_1,
										FormatterUtils.format(row28.file_id,
												null));
							}
							org.dom4j.Element root_2 = null;
							root_2 = root.addElement("RETURN_CODE");
							valueMap.put("root_2", row28.status_code);
							if (valueMap.get("root_2") != null) {
								routines.system.NestXMLTool.setText(root_2,
										FormatterUtils.format(
												row28.status_code, null));
							}
							org.dom4j.Element root_3 = null;
							root_3 = root.addElement("RETURN_MSG");
							valueMap.put("root_3", row28.status_message);
							if (valueMap.get("root_3") != null) {
								routines.system.NestXMLTool.setText(root_3,
										FormatterUtils.format(
												row28.status_message, null));
							}
							org.dom4j.Element root_4 = null;
							root_4 = root.addElement("CONTENT");
							valueMap.put("root_4", "file_id : " + row28.file_id);
							if (valueMap.get("root_4") != null) {
								routines.system.NestXMLTool.setText(
										root_4,
										FormatterUtils.format("file_id : "
												+ row28.file_id, null));
							}
							org.dom4j.Element root_5 = null;
							root_5 = root.addElement("MID_NO");
							valueMap.put("root_5", context.MID_NO);
							if (valueMap.get("root_5") != null) {
								routines.system.NestXMLTool.setText(root_5,
										FormatterUtils.format(context.MID_NO,
												null));
							}
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
					}
				}

				/**
				 * [tXMLMap_20 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_18 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_18", false);
				start_Hash
						.put("tFixedFlowInput_18", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_18";

				int tos_count_tFixedFlowInput_18 = 0;

				class BytesLimit65535_tFixedFlowInput_18 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_18().limitLog4jByte();

				for (int i_tFixedFlowInput_18 = 0; i_tFixedFlowInput_18 < 1; i_tFixedFlowInput_18++) {

					row28.status_code = "404";

					row28.status_message = "File mapping not found or not valid";

					row28.file_id = ((String) globalMap.get("header1.file_id"));

					/**
					 * [tFixedFlowInput_18 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_18 main ] start
					 */

					currentComponent = "tFixedFlowInput_18";

					tos_count_tFixedFlowInput_18++;

					/**
					 * [tFixedFlowInput_18 main ] stop
					 */

					/**
					 * [tXMLMap_20 main ] start
					 */

					currentComponent = "tXMLMap_20";

					boolean rejectedInnerJoin_tXMLMap_20 = false;
					boolean rejectedDocInnerJoin_tXMLMap_20 = false;
					boolean mainRowRejected_tXMLMap_20 = false;
					boolean isMatchDocRowtXMLMap_20 = false;

					GenerateDocument_e404_41 gen_Doc_e404_41_tXMLMap_20 = new GenerateDocument_e404_41();
					e404_41_tmp.body = null;

					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tXMLMap_20__Struct Var = Var__tXMLMap_20;
						// ###############################
						// # Output tables

						e404_41 = null;

						// # Output table : 'e404_41'

						gen_Doc_e404_41_tXMLMap_20.generateElements(
								rejectedDocInnerJoin_tXMLMap_20, row28, Var);

						if (e404_41_tmp.body == null) {
							e404_41_tmp.body = new routines.system.Document();
							e404_41_tmp.body
									.setDocument(gen_Doc_e404_41_tXMLMap_20
											.getDocument());
						}

						e404_41 = e404_41_tmp;
						e404_41_save = e404_41_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tXMLMap_20 = false;

					tos_count_tXMLMap_20++;

					/**
					 * [tXMLMap_20 main ] stop
					 */
					// Start of branch "e404_41"
					if (e404_41 != null) {

						/**
						 * [tRESTResponse_17 main ] start
						 */

						currentComponent = "tRESTResponse_17";

						java.io.OutputStream outputStream_tRESTResponse_17 = (java.io.OutputStream) globalMap
								.get("restResponseStream");
						boolean responseAlreadySent_tRESTResponse_17 = globalMap
								.containsKey("restResponse");

						if (null == outputStream_tRESTResponse_17
								&& responseAlreadySent_tRESTResponse_17) {
							throw new RuntimeException(
									"Rest response already sent.");
						} else if (!globalMap.containsKey("restRequest")) {
							throw new RuntimeException(
									"Not received rest request yet.");
						} else {
							Integer restProviderStatusCode_tRESTResponse_17 = 404;

							Object restProviderResponse_tRESTResponse_17 = null;
							if (null != e404_41.body) {
								restProviderResponse_tRESTResponse_17 = e404_41.body
										.getDocument();
							}

							java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_17 = new java.util.TreeMap<String, String>(
									String.CASE_INSENSITIVE_ORDER);

							java.util.Map<String, Object> restRequest_tRESTResponse_17 = (java.util.Map<String, Object>) globalMap
									.get("restRequest");
							org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_17 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_17
									.get("MESSAGE_CONTEXT");

							if (null == outputStream_tRESTResponse_17) {
								java.util.Map<String, Object> restResponse_tRESTResponse_17 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_17.put("BODY",
										restProviderResponse_tRESTResponse_17);
								restResponse_tRESTResponse_17
										.put("STATUS",
												restProviderStatusCode_tRESTResponse_17);
								restResponse_tRESTResponse_17
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_17);
								restResponse_tRESTResponse_17.put(
										"drop.json.root.element",
										Boolean.valueOf(true));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_17);

							} else {

								javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_17 = null;
								if (!responseAlreadySent_tRESTResponse_17) {
									org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
													true);

									messageContext_tRESTResponse_17
											.put(org.apache.cxf.message.Message.RESPONSE_CODE,
													restProviderStatusCode_tRESTResponse_17);
									javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_17 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
									for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_17
											.entrySet()) {
										headersMultivaluedMap_tRESTResponse_17
												.putSingle(multivaluedHeader
														.getKey(),
														multivaluedHeader
																.getValue());
									}
									messageContext_tRESTResponse_17
											.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
													headersMultivaluedMap_tRESTResponse_17);

									// String
									// responseContentType_tRESTResponse_17 =
									// (String)
									// messageContext_tRESTResponse_17.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									String responseContentType_tRESTResponse_17 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									if (null == responseContentType_tRESTResponse_17) {
										// this should not be needed, just in
										// case. set it to the first value in
										// the sorted list returned from
										// HttpHeaders
										responseMediaType_tRESTResponse_17 = messageContext_tRESTResponse_17
												.getHttpHeaders()
												.getAcceptableMediaTypes()
												.get(0);
									} else {
										responseMediaType_tRESTResponse_17 = org.apache.cxf.jaxrs.utils.JAXRSUtils
												.toMediaType(responseContentType_tRESTResponse_17);
									}
									globalMap.put("restResponseMediaType",
											responseMediaType_tRESTResponse_17);

									String responseMediaSubType_tRESTResponse_17 = responseMediaType_tRESTResponse_17
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_17
											.equals("xml")
											|| responseMediaSubType_tRESTResponse_17
													.endsWith("+xml")) {
										outputStream_tRESTResponse_17
												.write("<wrapper>".getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"</wrapper>");
									}
									if (responseMediaSubType_tRESTResponse_17
											.equals("json")
											|| responseMediaSubType_tRESTResponse_17
													.endsWith("+json")) {
										outputStream_tRESTResponse_17.write("["
												.getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"]");
									}

									globalMap.put("restResponse", true);
								} else {
									responseMediaType_tRESTResponse_17 = (javax.ws.rs.core.MediaType) globalMap
											.get("restResponseMediaType");
								}

								if (null != restProviderResponse_tRESTResponse_17) {
									String responseMediaSubType_tRESTResponse_17 = responseMediaType_tRESTResponse_17
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_17
											.equals("json")
											|| responseMediaSubType_tRESTResponse_17
													.endsWith("+json")) {
										if (globalMap
												.containsKey("restResponseJsonStarted")) {
											outputStream_tRESTResponse_17
													.write(",".getBytes());
										} else {
											globalMap.put(
													"restResponseJsonStarted",
													true);
										}
									}

									Class<? extends Object> responseBodyClass_tRESTResponse_17 = restProviderResponse_tRESTResponse_17
											.getClass();
									javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_17 = messageContext_tRESTResponse_17
											.getProviders();
									javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_17 = messageBodyProviders_tRESTResponse_17
											.getMessageBodyWriter(
													responseBodyClass_tRESTResponse_17,
													responseBodyClass_tRESTResponse_17,
													null,
													responseMediaType_tRESTResponse_17);
									messageBodyWriter_tRESTResponse_17
											.writeTo(
													restProviderResponse_tRESTResponse_17,
													responseBodyClass_tRESTResponse_17,
													responseBodyClass_tRESTResponse_17,
													new java.lang.annotation.Annotation[] {},
													responseMediaType_tRESTResponse_17,
													null,
													outputStream_tRESTResponse_17);
								}
								// initial variant
								// outputStream_tRESTResponse_17.write(String.valueOf(restProviderResponse_tRESTResponse_17).getBytes());
								outputStream_tRESTResponse_17.flush();
							}
						}

						tos_count_tRESTResponse_17++;

						/**
						 * [tRESTResponse_17 main ] stop
						 */

					} // End of branch "e404_41"

					/**
					 * [tFixedFlowInput_18 end ] start
					 */

					currentComponent = "tFixedFlowInput_18";

				}
				globalMap.put("tFixedFlowInput_18_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_18", true);
				end_Hash.put("tFixedFlowInput_18", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_18 end ] stop
				 */

				/**
				 * [tXMLMap_20 end ] start
				 */

				currentComponent = "tXMLMap_20";

				ok_Hash.put("tXMLMap_20", true);
				end_Hash.put("tXMLMap_20", System.currentTimeMillis());

				/**
				 * [tXMLMap_20 end ] stop
				 */

				/**
				 * [tRESTResponse_17 end ] start
				 */

				currentComponent = "tRESTResponse_17";

				ok_Hash.put("tRESTResponse_17", true);
				end_Hash.put("tRESTResponse_17", System.currentTimeMillis());

				/**
				 * [tRESTResponse_17 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_18 finally ] start
				 */

				currentComponent = "tFixedFlowInput_18";

				/**
				 * [tFixedFlowInput_18 finally ] stop
				 */

				/**
				 * [tXMLMap_20 finally ] start
				 */

				currentComponent = "tXMLMap_20";

				/**
				 * [tXMLMap_20 finally ] stop
				 */

				/**
				 * [tRESTResponse_17 finally ] start
				 */

				currentComponent = "tRESTResponse_17";

				/**
				 * [tRESTResponse_17 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_18_SUBPROCESS_STATE", 1);
	}

	public static class e401_4Struct implements
			routines.system.IPersistableRow<e401_4Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(e401_4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements
			routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String status_code;

		public String getStatus_code() {
			return this.status_code;
		}

		public String status_message;

		public String getStatus_message() {
			return this.status_message;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.status_code = readString(dis);

					this.status_message = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status_code, dos);

				// String

				writeString(this.status_message, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status_code=" + status_code);
			sb.append(",status_message=" + status_message);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_15Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row22Struct row22 = new row22Struct();
				e401_4Struct e401_4 = new e401_4Struct();

				/**
				 * [tRESTResponse_14 begin ] start
				 */

				ok_Hash.put("tRESTResponse_14", false);
				start_Hash.put("tRESTResponse_14", System.currentTimeMillis());

				currentComponent = "tRESTResponse_14";

				int tos_count_tRESTResponse_14 = 0;

				class BytesLimit65535_tRESTResponse_14 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTResponse_14().limitLog4jByte();

				/**
				 * [tRESTResponse_14 begin ] stop
				 */

				/**
				 * [tXMLMap_17 begin ] start
				 */

				ok_Hash.put("tXMLMap_17", false);
				start_Hash.put("tXMLMap_17", System.currentTimeMillis());

				currentComponent = "tXMLMap_17";

				int tos_count_tXMLMap_17 = 0;

				class BytesLimit65535_tXMLMap_17 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_17().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_17 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_17__Struct {
				}
				Var__tXMLMap_17__Struct Var__tXMLMap_17 = new Var__tXMLMap_17__Struct();
				// ###############################
				// # Outputs initialization
				e401_4Struct e401_4_tmp = new e401_4Struct();
				e401_4Struct e401_4_save = null;
				// ###############################
				int nb_line_tXMLMap_17 = 0;

				XML_API_tXMLMap_17 xml_api_tXMLMap_17 = new XML_API_tXMLMap_17();

				class GenerateDocument_e401_4 {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					String currentValue = null;

					public GenerateDocument_e401_4() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						generateOk();
						return this.doc;
					}

					// do some work after document has been generated
					private void generateOk() {
						routines.system.NestXMLTool.replaceDefaultNameSpace(
								this.doc.getRootElement(), null);
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin,
							row22Struct row22, Var__tXMLMap_17__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = org.dom4j.DocumentHelper
									.createElement("root");
							doc.add(root);
							subTreeRootParent = root;
							org.dom4j.Element root_0 = null;
							root_0 = root.addElement("STATUS");
							valueMap.put("root_0", "0");
							if (valueMap.get("root_0") != null) {
								routines.system.NestXMLTool.setText(root_0,
										FormatterUtils.format("0", null));
							}
							org.dom4j.Element root_1 = null;
							root_1 = root.addElement("FILE_ID");
							valueMap.put("root_1", row22.file_id);
							if (valueMap.get("root_1") != null) {
								routines.system.NestXMLTool.setText(root_1,
										FormatterUtils.format(row22.file_id,
												null));
							}
							org.dom4j.Element root_2 = null;
							root_2 = root.addElement("RETURN_CODE");
							valueMap.put("root_2", row22.status_code);
							if (valueMap.get("root_2") != null) {
								routines.system.NestXMLTool.setText(root_2,
										FormatterUtils.format(
												row22.status_code, null));
							}
							org.dom4j.Element root_3 = null;
							root_3 = root.addElement("RETURN_MSG");
							valueMap.put("root_3", row22.status_message);
							if (valueMap.get("root_3") != null) {
								routines.system.NestXMLTool.setText(root_3,
										FormatterUtils.format(
												row22.status_message, null));
							}
							org.dom4j.Element root_4 = null;
							root_4 = root.addElement("CONTENT");
							valueMap.put("root_4", "file_id : " + row22.file_id);
							if (valueMap.get("root_4") != null) {
								routines.system.NestXMLTool.setText(
										root_4,
										FormatterUtils.format("file_id : "
												+ row22.file_id, null));
							}
							org.dom4j.Element root_5 = null;
							root_5 = root.addElement("MID_NO");
							valueMap.put("root_5", context.MID_NO);
							if (valueMap.get("root_5") != null) {
								routines.system.NestXMLTool.setText(root_5,
										FormatterUtils.format(context.MID_NO,
												null));
							}
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
					}
				}

				/**
				 * [tXMLMap_17 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_15 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_15", false);
				start_Hash
						.put("tFixedFlowInput_15", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_15";

				int tos_count_tFixedFlowInput_15 = 0;

				class BytesLimit65535_tFixedFlowInput_15 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_15().limitLog4jByte();

				for (int i_tFixedFlowInput_15 = 0; i_tFixedFlowInput_15 < 1; i_tFixedFlowInput_15++) {

					row22.status_code = "401";

					row22.status_message = "Authenication fail";

					row22.file_id = ((String) globalMap.get("header1.file_id"));

					/**
					 * [tFixedFlowInput_15 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_15 main ] start
					 */

					currentComponent = "tFixedFlowInput_15";

					tos_count_tFixedFlowInput_15++;

					/**
					 * [tFixedFlowInput_15 main ] stop
					 */

					/**
					 * [tXMLMap_17 main ] start
					 */

					currentComponent = "tXMLMap_17";

					boolean rejectedInnerJoin_tXMLMap_17 = false;
					boolean rejectedDocInnerJoin_tXMLMap_17 = false;
					boolean mainRowRejected_tXMLMap_17 = false;
					boolean isMatchDocRowtXMLMap_17 = false;

					GenerateDocument_e401_4 gen_Doc_e401_4_tXMLMap_17 = new GenerateDocument_e401_4();
					e401_4_tmp.body = null;

					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tXMLMap_17__Struct Var = Var__tXMLMap_17;
						// ###############################
						// # Output tables

						e401_4 = null;

						// # Output table : 'e401_4'

						gen_Doc_e401_4_tXMLMap_17.generateElements(
								rejectedDocInnerJoin_tXMLMap_17, row22, Var);

						if (e401_4_tmp.body == null) {
							e401_4_tmp.body = new routines.system.Document();
							e401_4_tmp.body
									.setDocument(gen_Doc_e401_4_tXMLMap_17
											.getDocument());
						}

						e401_4 = e401_4_tmp;
						e401_4_save = e401_4_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tXMLMap_17 = false;

					tos_count_tXMLMap_17++;

					/**
					 * [tXMLMap_17 main ] stop
					 */
					// Start of branch "e401_4"
					if (e401_4 != null) {

						/**
						 * [tRESTResponse_14 main ] start
						 */

						currentComponent = "tRESTResponse_14";

						java.io.OutputStream outputStream_tRESTResponse_14 = (java.io.OutputStream) globalMap
								.get("restResponseStream");
						boolean responseAlreadySent_tRESTResponse_14 = globalMap
								.containsKey("restResponse");

						if (null == outputStream_tRESTResponse_14
								&& responseAlreadySent_tRESTResponse_14) {
							throw new RuntimeException(
									"Rest response already sent.");
						} else if (!globalMap.containsKey("restRequest")) {
							throw new RuntimeException(
									"Not received rest request yet.");
						} else {
							Integer restProviderStatusCode_tRESTResponse_14 = 401;

							Object restProviderResponse_tRESTResponse_14 = null;
							if (null != e401_4.body) {
								restProviderResponse_tRESTResponse_14 = e401_4.body
										.getDocument();
							}

							java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_14 = new java.util.TreeMap<String, String>(
									String.CASE_INSENSITIVE_ORDER);

							java.util.Map<String, Object> restRequest_tRESTResponse_14 = (java.util.Map<String, Object>) globalMap
									.get("restRequest");
							org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_14 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_14
									.get("MESSAGE_CONTEXT");

							if (null == outputStream_tRESTResponse_14) {
								java.util.Map<String, Object> restResponse_tRESTResponse_14 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_14.put("BODY",
										restProviderResponse_tRESTResponse_14);
								restResponse_tRESTResponse_14
										.put("STATUS",
												restProviderStatusCode_tRESTResponse_14);
								restResponse_tRESTResponse_14
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_14);
								restResponse_tRESTResponse_14.put(
										"drop.json.root.element",
										Boolean.valueOf(true));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_14);

							} else {

								javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_14 = null;
								if (!responseAlreadySent_tRESTResponse_14) {
									org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
													true);

									messageContext_tRESTResponse_14
											.put(org.apache.cxf.message.Message.RESPONSE_CODE,
													restProviderStatusCode_tRESTResponse_14);
									javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_14 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
									for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_14
											.entrySet()) {
										headersMultivaluedMap_tRESTResponse_14
												.putSingle(multivaluedHeader
														.getKey(),
														multivaluedHeader
																.getValue());
									}
									messageContext_tRESTResponse_14
											.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
													headersMultivaluedMap_tRESTResponse_14);

									// String
									// responseContentType_tRESTResponse_14 =
									// (String)
									// messageContext_tRESTResponse_14.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									String responseContentType_tRESTResponse_14 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									if (null == responseContentType_tRESTResponse_14) {
										// this should not be needed, just in
										// case. set it to the first value in
										// the sorted list returned from
										// HttpHeaders
										responseMediaType_tRESTResponse_14 = messageContext_tRESTResponse_14
												.getHttpHeaders()
												.getAcceptableMediaTypes()
												.get(0);
									} else {
										responseMediaType_tRESTResponse_14 = org.apache.cxf.jaxrs.utils.JAXRSUtils
												.toMediaType(responseContentType_tRESTResponse_14);
									}
									globalMap.put("restResponseMediaType",
											responseMediaType_tRESTResponse_14);

									String responseMediaSubType_tRESTResponse_14 = responseMediaType_tRESTResponse_14
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_14
											.equals("xml")
											|| responseMediaSubType_tRESTResponse_14
													.endsWith("+xml")) {
										outputStream_tRESTResponse_14
												.write("<wrapper>".getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"</wrapper>");
									}
									if (responseMediaSubType_tRESTResponse_14
											.equals("json")
											|| responseMediaSubType_tRESTResponse_14
													.endsWith("+json")) {
										outputStream_tRESTResponse_14.write("["
												.getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"]");
									}

									globalMap.put("restResponse", true);
								} else {
									responseMediaType_tRESTResponse_14 = (javax.ws.rs.core.MediaType) globalMap
											.get("restResponseMediaType");
								}

								if (null != restProviderResponse_tRESTResponse_14) {
									String responseMediaSubType_tRESTResponse_14 = responseMediaType_tRESTResponse_14
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_14
											.equals("json")
											|| responseMediaSubType_tRESTResponse_14
													.endsWith("+json")) {
										if (globalMap
												.containsKey("restResponseJsonStarted")) {
											outputStream_tRESTResponse_14
													.write(",".getBytes());
										} else {
											globalMap.put(
													"restResponseJsonStarted",
													true);
										}
									}

									Class<? extends Object> responseBodyClass_tRESTResponse_14 = restProviderResponse_tRESTResponse_14
											.getClass();
									javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_14 = messageContext_tRESTResponse_14
											.getProviders();
									javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_14 = messageBodyProviders_tRESTResponse_14
											.getMessageBodyWriter(
													responseBodyClass_tRESTResponse_14,
													responseBodyClass_tRESTResponse_14,
													null,
													responseMediaType_tRESTResponse_14);
									messageBodyWriter_tRESTResponse_14
											.writeTo(
													restProviderResponse_tRESTResponse_14,
													responseBodyClass_tRESTResponse_14,
													responseBodyClass_tRESTResponse_14,
													new java.lang.annotation.Annotation[] {},
													responseMediaType_tRESTResponse_14,
													null,
													outputStream_tRESTResponse_14);
								}
								// initial variant
								// outputStream_tRESTResponse_14.write(String.valueOf(restProviderResponse_tRESTResponse_14).getBytes());
								outputStream_tRESTResponse_14.flush();
							}
						}

						tos_count_tRESTResponse_14++;

						/**
						 * [tRESTResponse_14 main ] stop
						 */

					} // End of branch "e401_4"

					/**
					 * [tFixedFlowInput_15 end ] start
					 */

					currentComponent = "tFixedFlowInput_15";

				}
				globalMap.put("tFixedFlowInput_15_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_15", true);
				end_Hash.put("tFixedFlowInput_15", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_15 end ] stop
				 */

				/**
				 * [tXMLMap_17 end ] start
				 */

				currentComponent = "tXMLMap_17";

				ok_Hash.put("tXMLMap_17", true);
				end_Hash.put("tXMLMap_17", System.currentTimeMillis());

				/**
				 * [tXMLMap_17 end ] stop
				 */

				/**
				 * [tRESTResponse_14 end ] start
				 */

				currentComponent = "tRESTResponse_14";

				ok_Hash.put("tRESTResponse_14", true);
				end_Hash.put("tRESTResponse_14", System.currentTimeMillis());

				/**
				 * [tRESTResponse_14 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_15 finally ] start
				 */

				currentComponent = "tFixedFlowInput_15";

				/**
				 * [tFixedFlowInput_15 finally ] stop
				 */

				/**
				 * [tXMLMap_17 finally ] start
				 */

				currentComponent = "tXMLMap_17";

				/**
				 * [tXMLMap_17 finally ] stop
				 */

				/**
				 * [tRESTResponse_14 finally ] start
				 */

				currentComponent = "tRESTResponse_14";

				/**
				 * [tRESTResponse_14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_15_SUBPROCESS_STATE", 1);
	}

	public static class row29Struct implements
			routines.system.IPersistableRow<row29Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String sso;

		public String getSso() {
			return this.sso;
		}

		public String verify_pccuid;

		public String getVerify_pccuid() {
			return this.verify_pccuid;
		}

		public Boolean verified;

		public Boolean getVerified() {
			return this.verified;
		}

		public String aud;

		public String getAud() {
			return this.aud;
		}

		public String azp;

		public String getAzp() {
			return this.azp;
		}

		public Boolean valid;

		public Boolean getValid() {
			return this.valid;
		}

		public Boolean admin;

		public Boolean getAdmin() {
			return this.admin;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.sso = readString(dis);

					this.verify_pccuid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.verified = null;
					} else {
						this.verified = dis.readBoolean();
					}

					this.aud = readString(dis);

					this.azp = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valid = null;
					} else {
						this.valid = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.admin = null;
					} else {
						this.admin = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sso, dos);

				// String

				writeString(this.verify_pccuid, dos);

				// Boolean

				if (this.verified == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.verified);
				}

				// String

				writeString(this.aud, dos);

				// String

				writeString(this.azp, dos);

				// Boolean

				if (this.valid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.valid);
				}

				// Boolean

				if (this.admin == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.admin);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sso=" + sso);
			sb.append(",verify_pccuid=" + verify_pccuid);
			sb.append(",verified=" + String.valueOf(verified));
			sb.append(",aud=" + aud);
			sb.append(",azp=" + azp);
			sb.append(",valid=" + String.valueOf(valid));
			sb.append(",admin=" + String.valueOf(admin));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRunJob_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row29Struct row29 = new row29Struct();

				/**
				 * [tFlowToIterate_17 begin ] start
				 */

				ok_Hash.put("tFlowToIterate_17", false);
				start_Hash.put("tFlowToIterate_17", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_17";

				int tos_count_tFlowToIterate_17 = 0;

				class BytesLimit65535_tFlowToIterate_17 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowToIterate_17().limitLog4jByte();

				int nb_line_tFlowToIterate_17 = 0;
				int counter_tFlowToIterate_17 = 0;

				/**
				 * [tFlowToIterate_17 begin ] stop
				 */

				/**
				 * [tRunJob_6 begin ] start
				 */

				ok_Hash.put("tRunJob_6", false);
				start_Hash.put("tRunJob_6", System.currentTimeMillis());

				currentComponent = "tRunJob_6";

				int tos_count_tRunJob_6 = 0;

				class BytesLimit65535_tRunJob_6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRunJob_6().limitLog4jByte();

				/**
				 * [tRunJob_6 begin ] stop
				 */

				/**
				 * [tRunJob_6 main ] start
				 */

				currentComponent = "tRunJob_6";

				java.util.List<String> paraList_tRunJob_6 = new java.util.ArrayList<String>();

				paraList_tRunJob_6.add("--father_pid=" + pid);

				paraList_tRunJob_6.add("--root_pid=" + rootPid);

				paraList_tRunJob_6.add("--father_node=tRunJob_6");

				paraList_tRunJob_6.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_6.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_6.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_6 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_6 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_6".equals(tRunJobName_tRunJob_6)
						&& childResumePath_tRunJob_6 != null) {
					paraList_tRunJob_6
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_6.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_6");

				java.util.Map<String, Object> parentContextMap_tRunJob_6 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_6 = null;

				obj_tRunJob_6 = ((String) globalMap
						.get("binary1.Authorization"));
				paraList_tRunJob_6.add("--context_param Authorization="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_6));

				parentContextMap_tRunJob_6.put("Authorization", obj_tRunJob_6);

				esb_mfs_srv.api_jwt_verify_0_1.api_jwt_verify childJob_tRunJob_6 = new esb_mfs_srv.api_jwt_verify_0_1.api_jwt_verify();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_6 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_6) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_6 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_6 : talendDataSources_tRunJob_6
							.entrySet()) {
						dataSources_tRunJob_6.put(
								talendDataSourceEntry_tRunJob_6.getKey(),
								talendDataSourceEntry_tRunJob_6.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_6.setDataSources(dataSources_tRunJob_6);
				}

				childJob_tRunJob_6.parentContextMap = parentContextMap_tRunJob_6;

				String[][] childReturn_tRunJob_6 = childJob_tRunJob_6
						.runJob((String[]) paraList_tRunJob_6
								.toArray(new String[paraList_tRunJob_6.size()]));

				errorCode = childJob_tRunJob_6.getErrorCode();

				if (childJob_tRunJob_6.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_6_CHILD_RETURN_CODE",
							childJob_tRunJob_6.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_6
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_6_CHILD_RETURN_CODE",
							childJob_tRunJob_6.getErrorCode());
				}
				if (childJob_tRunJob_6.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_6_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_6.getExceptionStackTrace());
				}

				if (childJob_tRunJob_6.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_6.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				for (String[] item_tRunJob_6 : childReturn_tRunJob_6) {
					if (childJob_tRunJob_6.hastBufferOutputComponent() || true) {

						if (0 < item_tRunJob_6.length) {

							row29.sso = item_tRunJob_6[0];

						} else {
							row29.sso = null;
						}

						if (1 < item_tRunJob_6.length) {

							row29.verify_pccuid = item_tRunJob_6[1];

						} else {
							row29.verify_pccuid = null;
						}

						if (2 < item_tRunJob_6.length) {

							row29.verified = ParserUtils
									.parseTo_Boolean(item_tRunJob_6[2]);

						} else {
							row29.verified = null;
						}

						if (3 < item_tRunJob_6.length) {

							row29.aud = item_tRunJob_6[3];

						} else {
							row29.aud = null;
						}

						if (4 < item_tRunJob_6.length) {

							row29.azp = item_tRunJob_6[4];

						} else {
							row29.azp = null;
						}

						if (5 < item_tRunJob_6.length) {

							row29.valid = ParserUtils
									.parseTo_Boolean(item_tRunJob_6[5]);

						} else {
							row29.valid = null;
						}

						if (6 < item_tRunJob_6.length) {

							row29.admin = ParserUtils
									.parseTo_Boolean(item_tRunJob_6[6]);

						} else {
							row29.admin = null;
						}

					}

					tos_count_tRunJob_6++;

					/**
					 * [tRunJob_6 main ] stop
					 */

					/**
					 * [tFlowToIterate_17 main ] start
					 */

					currentComponent = "tFlowToIterate_17";

					globalMap.put("row29.sso", row29.sso);

					globalMap.put("row29.verify_pccuid", row29.verify_pccuid);

					globalMap.put("row29.verified", row29.verified);

					globalMap.put("row29.aud", row29.aud);

					globalMap.put("row29.azp", row29.azp);

					globalMap.put("row29.valid", row29.valid);

					globalMap.put("row29.admin", row29.admin);

					nb_line_tFlowToIterate_17++;
					counter_tFlowToIterate_17++;
					globalMap.put("tFlowToIterate_17_CURRENT_ITERATION",
							counter_tFlowToIterate_17);

					tos_count_tFlowToIterate_17++;

					/**
					 * [tFlowToIterate_17 main ] stop
					 */

				} // C_01

				/**
				 * [tRunJob_6 end ] start
				 */

				currentComponent = "tRunJob_6";

				ok_Hash.put("tRunJob_6", true);
				end_Hash.put("tRunJob_6", System.currentTimeMillis());

				/**
				 * [tRunJob_6 end ] stop
				 */

				/**
				 * [tFlowToIterate_17 end ] start
				 */

				currentComponent = "tFlowToIterate_17";

				globalMap.put("tFlowToIterate_17_NB_LINE",
						nb_line_tFlowToIterate_17);

				ok_Hash.put("tFlowToIterate_17", true);
				end_Hash.put("tFlowToIterate_17", System.currentTimeMillis());

				if (context.debugging
						|| ((Boolean) globalMap.get("row29.verified"))) {

					tFixedFlowInput_19Process(globalMap);
				}

				if (!context.debugging
						&& !((Boolean) globalMap.get("row29.verified"))) {

					tFixedFlowInput_20Process(globalMap);
				}

				/**
				 * [tFlowToIterate_17 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_6 finally ] start
				 */

				currentComponent = "tRunJob_6";

				/**
				 * [tRunJob_6 finally ] stop
				 */

				/**
				 * [tFlowToIterate_17 finally ] start
				 */

				currentComponent = "tFlowToIterate_17";

				/**
				 * [tFlowToIterate_17 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_6_SUBPROCESS_STATE", 1);
	}

	public static class row40Struct implements
			routines.system.IPersistableRow<row40Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String content_md5;

		public String getContent_md5() {
			return this.content_md5;
		}

		public Integer content_length;

		public Integer getContent_length() {
			return this.content_length;
		}

		public String content_type;

		public String getContent_type() {
			return this.content_type;
		}

		public String content_disposition;

		public String getContent_disposition() {
			return this.content_disposition;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.content_md5 = readString(dis);

					this.content_length = readInteger(dis);

					this.content_type = readString(dis);

					this.content_disposition = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.content_md5, dos);

				// Integer

				writeInteger(this.content_length, dos);

				// String

				writeString(this.content_type, dos);

				// String

				writeString(this.content_disposition, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("content_md5=" + content_md5);
			sb.append(",content_length=" + String.valueOf(content_length));
			sb.append(",content_type=" + content_type);
			sb.append(",content_disposition=" + content_disposition);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row40Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row35Struct implements
			routines.system.IPersistableRow<row35Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public byte[] content;

		public byte[] getContent() {
			return this.content;
		}

		public String filepath;

		public String getFilepath() {
			return this.filepath;
		}

		private byte[] readByteArray(ObjectInputStream dis) throws IOException {
			byte[] byteArrayReturn;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				byteArrayReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.readFully(byteArray);
				byteArrayReturn = byteArray;
			}
			return byteArrayReturn;
		}

		private void writeByteArray(byte[] byteArray, ObjectOutputStream dos)
				throws IOException {
			if (byteArray == null) {
				dos.writeInt(-1);
			} else {
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.content = readByteArray(dis);

					this.filepath = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// byte[]

				writeByteArray(this.content, dos);

				// String

				writeString(this.filepath, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("content=" + String.valueOf(content));
			sb.append(",filepath=" + filepath);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row35Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_19Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_19_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row35Struct row35 = new row35Struct();
				row40Struct row40 = new row40Struct();

				/**
				 * [tFlowToIterate_19 begin ] start
				 */

				ok_Hash.put("tFlowToIterate_19", false);
				start_Hash.put("tFlowToIterate_19", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_19";

				int tos_count_tFlowToIterate_19 = 0;

				class BytesLimit65535_tFlowToIterate_19 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowToIterate_19().limitLog4jByte();

				int nb_line_tFlowToIterate_19 = 0;
				int counter_tFlowToIterate_19 = 0;

				/**
				 * [tFlowToIterate_19 begin ] stop
				 */

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				int tos_count_tJavaRow_2 = 0;

				class BytesLimit65535_tJavaRow_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_2().limitLog4jByte();

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_19 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_19", false);
				start_Hash
						.put("tFixedFlowInput_19", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_19";

				int tos_count_tFixedFlowInput_19 = 0;

				class BytesLimit65535_tFixedFlowInput_19 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_19().limitLog4jByte();

				for (int i_tFixedFlowInput_19 = 0; i_tFixedFlowInput_19 < 1; i_tFixedFlowInput_19++) {

					row35.content = ((byte[]) globalMap.get("binary1.userfile"));

					row35.filepath = context.mount_folder.trim()
							+ "/"
							+ ((String) globalMap.get("binary1.file_id"))
									.split("-")[1].trim();

					/**
					 * [tFixedFlowInput_19 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_19 main ] start
					 */

					currentComponent = "tFixedFlowInput_19";

					tos_count_tFixedFlowInput_19++;

					/**
					 * [tFixedFlowInput_19 main ] stop
					 */

					/**
					 * [tJavaRow_2 main ] start
					 */

					currentComponent = "tJavaRow_2";

					String fullname = row35.filepath
							+ "/"
							+ ((String) globalMap.get("binary1.file_id"))
									.trim();

					File file = new File(fullname);
					file.getParentFile().mkdirs();
					file.createNewFile();

					try (final FileOutputStream fos = new FileOutputStream(
							fullname)) {
						fos.write(row35.content);
						fos.flush();
						fos.close();
					}
					row40.content_md5 = md5hash.getMD5(row35.content);
					row40.content_length = row35.content.length;
					row40.content_type = ((java.util.Map<String, java.util.Map<String, java.util.List<String>>>) globalMap
							.get("tRESTRequest_1_ATTACHMENT_HEADERS"))
							.get("userfile").get("Content-Type").get(0);
					row40.content_disposition = ((java.util.Map<String, java.util.Map<String, java.util.List<String>>>) globalMap
							.get("tRESTRequest_1_ATTACHMENT_HEADERS"))
							.get("userfile").get("Content-Disposition").get(0);

					// globalMap.put("i_content_md5",
					// md5hash.getMD5(row35.content) );
					// globalMap.put("i_content_length", row35.content.length );
					// globalMap.put("i_content_type", ((java.util.Map<String,
					// java.util.Map<String, java.util.List<String>>
					// >)globalMap.get("tRESTRequest_1_ATTACHMENT_HEADERS")).get("userfile").get("Content-Type").get(0)
					// );
					// globalMap.put("i_content_disposition",
					// ((java.util.Map<String, java.util.Map<String,
					// java.util.List<String>>
					// >)globalMap.get("tRESTRequest_1_ATTACHMENT_HEADERS")).get("userfile").get("Content-Disposition").get(0)
					// );

					nb_line_tJavaRow_2++;

					tos_count_tJavaRow_2++;

					/**
					 * [tJavaRow_2 main ] stop
					 */

					/**
					 * [tFlowToIterate_19 main ] start
					 */

					currentComponent = "tFlowToIterate_19";

					globalMap.put("row40.content_md5", row40.content_md5);

					globalMap.put("row40.content_length", row40.content_length);

					globalMap.put("row40.content_type", row40.content_type);

					globalMap.put("row40.content_disposition",
							row40.content_disposition);

					nb_line_tFlowToIterate_19++;
					counter_tFlowToIterate_19++;
					globalMap.put("tFlowToIterate_19_CURRENT_ITERATION",
							counter_tFlowToIterate_19);

					tos_count_tFlowToIterate_19++;

					/**
					 * [tFlowToIterate_19 main ] stop
					 */

					/**
					 * [tFixedFlowInput_19 end ] start
					 */

					currentComponent = "tFixedFlowInput_19";

				}
				globalMap.put("tFixedFlowInput_19_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_19", true);
				end_Hash.put("tFixedFlowInput_19", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_19 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tFlowToIterate_19 end ] start
				 */

				currentComponent = "tFlowToIterate_19";

				globalMap.put("tFlowToIterate_19_NB_LINE",
						nb_line_tFlowToIterate_19);

				ok_Hash.put("tFlowToIterate_19", true);
				end_Hash.put("tFlowToIterate_19", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_19 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tFixedFlowInput_19:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tJavaFlex_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_19 finally ] start
				 */

				currentComponent = "tFixedFlowInput_19";

				/**
				 * [tFixedFlowInput_19 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tFlowToIterate_19 finally ] start
				 */

				currentComponent = "tFlowToIterate_19";

				/**
				 * [tFlowToIterate_19 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_19_SUBPROCESS_STATE", 1);
	}

	public static class row31Struct implements
			routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public Integer RANDOM_NUM;

		public Integer getRANDOM_NUM() {
			return this.RANDOM_NUM;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.RANDOM_NUM = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.RANDOM_NUM, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("RANDOM_NUM=" + String.valueOf(RANDOM_NUM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaFlex_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaFlex_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row31Struct row31 = new row31Struct();

				/**
				 * [tFlowToIterate_18 begin ] start
				 */

				int NB_ITERATE_tJDBCConnection_5 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_18", false);
				start_Hash.put("tFlowToIterate_18", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_18";

				int tos_count_tFlowToIterate_18 = 0;

				class BytesLimit65535_tFlowToIterate_18 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowToIterate_18().limitLog4jByte();

				int nb_line_tFlowToIterate_18 = 0;
				int counter_tFlowToIterate_18 = 0;

				/**
				 * [tFlowToIterate_18 begin ] stop
				 */

				/**
				 * [tJavaFlex_5 begin ] start
				 */

				ok_Hash.put("tJavaFlex_5", false);
				start_Hash.put("tJavaFlex_5", System.currentTimeMillis());

				currentComponent = "tJavaFlex_5";

				int tos_count_tJavaFlex_5 = 0;

				class BytesLimit65535_tJavaFlex_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaFlex_5().limitLog4jByte();

				/**
				 * [tJavaFlex_5 begin ] stop
				 */

				/**
				 * [tJavaFlex_5 main ] start
				 */

				currentComponent = "tJavaFlex_5";

				// here is the main part of the component,
				// a piece of code executed in the row
				row31.RANDOM_NUM = ThreadLocalRandom.current().nextInt(0,
						context.MAX_CONNECTION) + 1;
				// log

				tos_count_tJavaFlex_5++;

				/**
				 * [tJavaFlex_5 main ] stop
				 */

				/**
				 * [tFlowToIterate_18 main ] start
				 */

				currentComponent = "tFlowToIterate_18";

				globalMap.put("row31.RANDOM_NUM", row31.RANDOM_NUM);

				nb_line_tFlowToIterate_18++;
				counter_tFlowToIterate_18++;
				globalMap.put("tFlowToIterate_18_CURRENT_ITERATION",
						counter_tFlowToIterate_18);

				tos_count_tFlowToIterate_18++;

				/**
				 * [tFlowToIterate_18 main ] stop
				 */
				NB_ITERATE_tJDBCConnection_5++;

				/**
				 * [tJDBCConnection_5 begin ] start
				 */

				ok_Hash.put("tJDBCConnection_5", false);
				start_Hash.put("tJDBCConnection_5", System.currentTimeMillis());

				currentComponent = "tJDBCConnection_5";

				int tos_count_tJDBCConnection_5 = 0;

				class BytesLimit65535_tJDBCConnection_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJDBCConnection_5().limitLog4jByte();

				String url_tJDBCConnection_5 = context.JDBC_URL
						+ "?tcpKeepAlive=true&ApplicationName="
						+ context.MID_NO + "-" + context.APPNAME_PREFIX + "_"
						+ ((Integer) globalMap.get("row31.RANDOM_NUM"));

				String dbUser_tJDBCConnection_5 = context.USERNAME;

				final String decryptedPassword_tJDBCConnection_5 = context.PASSWORD;
				String dbPwd_tJDBCConnection_5 = decryptedPassword_tJDBCConnection_5;

				java.sql.Connection conn_tJDBCConnection_5 = null;

				String sharedConnectionName_tJDBCConnection_5 = context.APPNAME_PREFIX
						+ "_" + ((Integer) globalMap.get("row31.RANDOM_NUM"));
				conn_tJDBCConnection_5 = SharedDBConnection.getDBConnection(
						context.DRIVER_CLASS, url_tJDBCConnection_5,
						dbUser_tJDBCConnection_5, dbPwd_tJDBCConnection_5,
						sharedConnectionName_tJDBCConnection_5);
				if (null != conn_tJDBCConnection_5) {

					conn_tJDBCConnection_5.setAutoCommit(true);
				}

				globalMap.put("conn_tJDBCConnection_5", conn_tJDBCConnection_5);
				globalMap.put("url_tJDBCConnection_5", url_tJDBCConnection_5);
				// globalMap.put("user_tJDBCConnection_5",
				// dbUser_tJDBCConnection_5);
				// globalMap.put("pass_tJDBCConnection_5",
				// dbPwd_tJDBCConnection_5);

				/**
				 * [tJDBCConnection_5 begin ] stop
				 */

				/**
				 * [tJDBCConnection_5 main ] start
				 */

				currentComponent = "tJDBCConnection_5";

				tos_count_tJDBCConnection_5++;

				/**
				 * [tJDBCConnection_5 main ] stop
				 */

				/**
				 * [tJDBCConnection_5 end ] start
				 */

				currentComponent = "tJDBCConnection_5";

				ok_Hash.put("tJDBCConnection_5", true);
				end_Hash.put("tJDBCConnection_5", System.currentTimeMillis());

				/**
				 * [tJDBCConnection_5 end ] stop
				 */

				/**
				 * [tJavaFlex_5 end ] start
				 */

				currentComponent = "tJavaFlex_5";

				ok_Hash.put("tJavaFlex_5", true);
				end_Hash.put("tJavaFlex_5", System.currentTimeMillis());

				/**
				 * [tJavaFlex_5 end ] stop
				 */

				/**
				 * [tFlowToIterate_18 end ] start
				 */

				currentComponent = "tFlowToIterate_18";

				globalMap.put("tFlowToIterate_18_NB_LINE",
						nb_line_tFlowToIterate_18);

				ok_Hash.put("tFlowToIterate_18", true);
				end_Hash.put("tFlowToIterate_18", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_18 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJavaFlex_5:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tJDBCInput_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaFlex_5 finally ] start
				 */

				currentComponent = "tJavaFlex_5";

				/**
				 * [tJavaFlex_5 finally ] stop
				 */

				/**
				 * [tFlowToIterate_18 finally ] start
				 */

				currentComponent = "tFlowToIterate_18";

				/**
				 * [tFlowToIterate_18 finally ] stop
				 */

				/**
				 * [tJDBCConnection_5 finally ] start
				 */

				currentComponent = "tJDBCConnection_5";

				/**
				 * [tJDBCConnection_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaFlex_5_SUBPROCESS_STATE", 1);
	}

	public static class row36Struct implements
			routines.system.IPersistableRow<row36Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.file_id == null) ? 0 : this.file_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row36Struct other = (row36Struct) obj;

			if (this.file_id == null) {
				if (other.file_id != null)
					return false;

			} else if (!this.file_id.equals(other.file_id))

				return false;

			return true;
		}

		public void copyDataTo(row36Struct other) {

			other.file_id = this.file_id;

		}

		public void copyKeysDataTo(row36Struct other) {

			other.file_id = this.file_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row36Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.file_id, other.file_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJDBCInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJDBCInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row36Struct row36 = new row36Struct();

				/**
				 * [tFlowToIterate_15 begin ] start
				 */

				ok_Hash.put("tFlowToIterate_15", false);
				start_Hash.put("tFlowToIterate_15", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_15";

				int tos_count_tFlowToIterate_15 = 0;

				class BytesLimit65535_tFlowToIterate_15 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowToIterate_15().limitLog4jByte();

				int nb_line_tFlowToIterate_15 = 0;
				int counter_tFlowToIterate_15 = 0;

				/**
				 * [tFlowToIterate_15 begin ] stop
				 */

				/**
				 * [tJDBCInput_3 begin ] start
				 */

				ok_Hash.put("tJDBCInput_3", false);
				start_Hash.put("tJDBCInput_3", System.currentTimeMillis());

				currentComponent = "tJDBCInput_3";

				int tos_count_tJDBCInput_3 = 0;

				class BytesLimit65535_tJDBCInput_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJDBCInput_3().limitLog4jByte();

				int nb_line_tJDBCInput_3 = 0;
				java.sql.Connection conn_tJDBCInput_3 = null;
				conn_tJDBCInput_3 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_5");

				java.sql.Statement stmt_tJDBCInput_3 = conn_tJDBCInput_3
						.createStatement();

				String dbquery_tJDBCInput_3 = "\nselect file_id \nfrom "
						+ context.mapping_table_name
						+ " \nwhere md5sum = '"
						+ ((String) globalMap.get("row40.content_md5"))
						+ "' \nand content_length = "
						+ ((Integer) globalMap.get("row40.content_length"))
						+ " \nand file_id = ref_file_id \nand valid = true\nlimit 1\n";

				globalMap.put("tJDBCInput_3_QUERY", dbquery_tJDBCInput_3);

				java.sql.ResultSet rs_tJDBCInput_3 = null;
				try {
					rs_tJDBCInput_3 = stmt_tJDBCInput_3
							.executeQuery(dbquery_tJDBCInput_3);
					java.sql.ResultSetMetaData rsmd_tJDBCInput_3 = rs_tJDBCInput_3
							.getMetaData();
					int colQtyInRs_tJDBCInput_3 = rsmd_tJDBCInput_3
							.getColumnCount();

					String tmpContent_tJDBCInput_3 = null;

					while (rs_tJDBCInput_3.next()) {
						nb_line_tJDBCInput_3++;

						if (colQtyInRs_tJDBCInput_3 < 1) {
							row36.file_id = null;
						} else {

							row36.file_id = routines.system.JDBCUtil.getString(
									rs_tJDBCInput_3, 1, false);
						}

						/**
						 * [tJDBCInput_3 begin ] stop
						 */

						/**
						 * [tJDBCInput_3 main ] start
						 */

						currentComponent = "tJDBCInput_3";

						tos_count_tJDBCInput_3++;

						/**
						 * [tJDBCInput_3 main ] stop
						 */

						/**
						 * [tFlowToIterate_15 main ] start
						 */

						currentComponent = "tFlowToIterate_15";

						globalMap.put("row36.file_id", row36.file_id);

						nb_line_tFlowToIterate_15++;
						counter_tFlowToIterate_15++;
						globalMap.put("tFlowToIterate_15_CURRENT_ITERATION",
								counter_tFlowToIterate_15);

						tos_count_tFlowToIterate_15++;

						/**
						 * [tFlowToIterate_15 main ] stop
						 */

						/**
						 * [tJDBCInput_3 end ] start
						 */

						currentComponent = "tJDBCInput_3";

					}
				} finally {
					if (rs_tJDBCInput_3 != null) {
						rs_tJDBCInput_3.close();
					}
					stmt_tJDBCInput_3.close();

				}
				globalMap.put("tJDBCInput_3_NB_LINE", nb_line_tJDBCInput_3);

				ok_Hash.put("tJDBCInput_3", true);
				end_Hash.put("tJDBCInput_3", System.currentTimeMillis());

				/**
				 * [tJDBCInput_3 end ] stop
				 */

				/**
				 * [tFlowToIterate_15 end ] start
				 */

				currentComponent = "tFlowToIterate_15";

				globalMap.put("tFlowToIterate_15_NB_LINE",
						nb_line_tFlowToIterate_15);

				ok_Hash.put("tFlowToIterate_15", true);
				end_Hash.put("tFlowToIterate_15", System.currentTimeMillis());

				if (((Integer) globalMap.get("tFlowToIterate_15_NB_LINE"))
						.equals(0)) {

					tFixedFlowInput_21Process(globalMap);
				}

				if (((Integer) globalMap.get("tFlowToIterate_15_NB_LINE")) > 0) {

					tFixedFlowInput_24Process(globalMap);
				}

				/**
				 * [tFlowToIterate_15 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJDBCInput_3 finally ] start
				 */

				currentComponent = "tJDBCInput_3";

				/**
				 * [tJDBCInput_3 finally ] stop
				 */

				/**
				 * [tFlowToIterate_15 finally ] start
				 */

				currentComponent = "tFlowToIterate_15";

				/**
				 * [tFlowToIterate_15 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJDBCInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row32Struct implements
			routines.system.IPersistableRow<row32Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		public String original_uri;

		public String getOriginal_uri() {
			return this.original_uri;
		}

		public String auth_string;

		public String getAuth_string() {
			return this.auth_string;
		}

		public String grant_system;

		public String getGrant_system() {
			return this.grant_system;
		}

		public Boolean valid;

		public Boolean getValid() {
			return this.valid;
		}

		public String md5sum;

		public String getMd5sum() {
			return this.md5sum;
		}

		public Integer content_length;

		public Integer getContent_length() {
			return this.content_length;
		}

		public String content_disposition;

		public String getContent_disposition() {
			return this.content_disposition;
		}

		public String content_type;

		public String getContent_type() {
			return this.content_type;
		}

		public String ref_file_id;

		public String getRef_file_id() {
			return this.ref_file_id;
		}

		public java.util.Date create_time;

		public java.util.Date getCreate_time() {
			return this.create_time;
		}

		public java.util.Date update_time;

		public java.util.Date getUpdate_time() {
			return this.update_time;
		}

		public String return_code;

		public String getReturn_code() {
			return this.return_code;
		}

		public String return_msg;

		public String getReturn_msg() {
			return this.return_msg;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.file_id == null) ? 0 : this.file_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row32Struct other = (row32Struct) obj;

			if (this.file_id == null) {
				if (other.file_id != null)
					return false;

			} else if (!this.file_id.equals(other.file_id))

				return false;

			return true;
		}

		public void copyDataTo(row32Struct other) {

			other.file_id = this.file_id;
			other.original_uri = this.original_uri;
			other.auth_string = this.auth_string;
			other.grant_system = this.grant_system;
			other.valid = this.valid;
			other.md5sum = this.md5sum;
			other.content_length = this.content_length;
			other.content_disposition = this.content_disposition;
			other.content_type = this.content_type;
			other.ref_file_id = this.ref_file_id;
			other.create_time = this.create_time;
			other.update_time = this.update_time;
			other.return_code = this.return_code;
			other.return_msg = this.return_msg;

		}

		public void copyKeysDataTo(row32Struct other) {

			other.file_id = this.file_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.file_id = readString(dis);

					this.original_uri = readString(dis);

					this.auth_string = readString(dis);

					this.grant_system = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valid = null;
					} else {
						this.valid = dis.readBoolean();
					}

					this.md5sum = readString(dis);

					this.content_length = readInteger(dis);

					this.content_disposition = readString(dis);

					this.content_type = readString(dis);

					this.ref_file_id = readString(dis);

					this.create_time = readDate(dis);

					this.update_time = readDate(dis);

					this.return_code = readString(dis);

					this.return_msg = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.file_id, dos);

				// String

				writeString(this.original_uri, dos);

				// String

				writeString(this.auth_string, dos);

				// String

				writeString(this.grant_system, dos);

				// Boolean

				if (this.valid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.valid);
				}

				// String

				writeString(this.md5sum, dos);

				// Integer

				writeInteger(this.content_length, dos);

				// String

				writeString(this.content_disposition, dos);

				// String

				writeString(this.content_type, dos);

				// String

				writeString(this.ref_file_id, dos);

				// java.util.Date

				writeDate(this.create_time, dos);

				// java.util.Date

				writeDate(this.update_time, dos);

				// String

				writeString(this.return_code, dos);

				// String

				writeString(this.return_msg, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("file_id=" + file_id);
			sb.append(",original_uri=" + original_uri);
			sb.append(",auth_string=" + auth_string);
			sb.append(",grant_system=" + grant_system);
			sb.append(",valid=" + String.valueOf(valid));
			sb.append(",md5sum=" + md5sum);
			sb.append(",content_length=" + String.valueOf(content_length));
			sb.append(",content_disposition=" + content_disposition);
			sb.append(",content_type=" + content_type);
			sb.append(",ref_file_id=" + ref_file_id);
			sb.append(",create_time=" + String.valueOf(create_time));
			sb.append(",update_time=" + String.valueOf(update_time));
			sb.append(",return_code=" + return_code);
			sb.append(",return_msg=" + return_msg);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.file_id, other.file_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_21Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_21_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row32Struct row32 = new row32Struct();

				/**
				 * [tJDBCOutput_3 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_3", false);
				start_Hash.put("tJDBCOutput_3", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_3";

				int tos_count_tJDBCOutput_3 = 0;

				class BytesLimit65535_tJDBCOutput_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJDBCOutput_3().limitLog4jByte();

				int nb_line_tJDBCOutput_3 = 0;
				int nb_line_update_tJDBCOutput_3 = 0;
				int nb_line_inserted_tJDBCOutput_3 = 0;
				int nb_line_deleted_tJDBCOutput_3 = 0;
				int nb_line_rejected_tJDBCOutput_3 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_3 = 0;

				int deletedCount_tJDBCOutput_3 = 0;
				int updatedCount_tJDBCOutput_3 = 0;
				int insertedCount_tJDBCOutput_3 = 0;
				int rejectedCount_tJDBCOutput_3 = 0;

				boolean whetherReject_tJDBCOutput_3 = false;

				java.sql.Connection connection_tJDBCOutput_3 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_5");
				int batchSize_tJDBCOutput_3 = 1000;
				int batchSizeCounter_tJDBCOutput_3 = 0;

				String insert_tJDBCOutput_3 = "INSERT INTO "
						+ context.mapping_table_name
						+ " (file_id,original_uri,auth_string,grant_system,valid,md5sum,content_length,content_disposition,content_type,ref_file_id,create_time,update_time,return_code,return_msg) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_3 = connection_tJDBCOutput_3
						.prepareStatement(insert_tJDBCOutput_3);

				/**
				 * [tJDBCOutput_3 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_21 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_21", false);
				start_Hash
						.put("tFixedFlowInput_21", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_21";

				int tos_count_tFixedFlowInput_21 = 0;

				class BytesLimit65535_tFixedFlowInput_21 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_21().limitLog4jByte();

				for (int i_tFixedFlowInput_21 = 0; i_tFixedFlowInput_21 < 1; i_tFixedFlowInput_21++) {

					row32.file_id = ((String) globalMap.get("binary1.file_id"));

					row32.original_uri = "User upload";

					row32.auth_string = "";

					row32.grant_system = ((String) globalMap
							.get("binary1.grant_system"));

					row32.valid = true;

					row32.md5sum = ((String) globalMap.get("row40.content_md5"));

					row32.content_length = ((Integer) globalMap
							.get("row40.content_length"));

					row32.content_disposition = ((String) globalMap
							.get("row40.content_disposition"));

					row32.content_type = ((String) globalMap
							.get("row40.content_type"));

					row32.ref_file_id = ((String) globalMap
							.get("binary1.file_id"));

					row32.create_time = new Date();

					row32.update_time = new Date();

					row32.return_code = "200";

					row32.return_msg = "";

					/**
					 * [tFixedFlowInput_21 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_21 main ] start
					 */

					currentComponent = "tFixedFlowInput_21";

					tos_count_tFixedFlowInput_21++;

					/**
					 * [tFixedFlowInput_21 main ] stop
					 */

					/**
					 * [tJDBCOutput_3 main ] start
					 */

					currentComponent = "tJDBCOutput_3";

					whetherReject_tJDBCOutput_3 = false;
					if (row32.file_id == null) {
						pstmt_tJDBCOutput_3.setNull(1, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_3.setString(1, row32.file_id);
					}

					if (row32.original_uri == null) {
						pstmt_tJDBCOutput_3.setNull(2, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_3.setString(2, row32.original_uri);
					}

					if (row32.auth_string == null) {
						pstmt_tJDBCOutput_3.setNull(3, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_3.setString(3, row32.auth_string);
					}

					if (row32.grant_system == null) {
						pstmt_tJDBCOutput_3.setNull(4, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_3.setString(4, row32.grant_system);
					}

					if (row32.valid == null) {
						pstmt_tJDBCOutput_3.setNull(5, java.sql.Types.BOOLEAN);
					} else {
						pstmt_tJDBCOutput_3.setBoolean(5, row32.valid);
					}

					if (row32.md5sum == null) {
						pstmt_tJDBCOutput_3.setNull(6, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_3.setString(6, row32.md5sum);
					}

					if (row32.content_length == null) {
						pstmt_tJDBCOutput_3.setNull(7, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_3.setInt(7, row32.content_length);
					}

					if (row32.content_disposition == null) {
						pstmt_tJDBCOutput_3.setNull(8, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_3.setString(8,
								row32.content_disposition);
					}

					if (row32.content_type == null) {
						pstmt_tJDBCOutput_3.setNull(9, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_3.setString(9, row32.content_type);
					}

					if (row32.ref_file_id == null) {
						pstmt_tJDBCOutput_3.setNull(10, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_3.setString(10, row32.ref_file_id);
					}

					if (row32.create_time != null) {
						pstmt_tJDBCOutput_3.setTimestamp(
								11,
								new java.sql.Timestamp(row32.create_time
										.getTime()));
					} else {
						pstmt_tJDBCOutput_3.setNull(11, java.sql.Types.DATE);
					}

					if (row32.update_time != null) {
						pstmt_tJDBCOutput_3.setTimestamp(
								12,
								new java.sql.Timestamp(row32.update_time
										.getTime()));
					} else {
						pstmt_tJDBCOutput_3.setNull(12, java.sql.Types.DATE);
					}

					if (row32.return_code == null) {
						pstmt_tJDBCOutput_3.setNull(13, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_3.setString(13, row32.return_code);
					}

					if (row32.return_msg == null) {
						pstmt_tJDBCOutput_3.setNull(14, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_3.setString(14, row32.return_msg);
					}

					pstmt_tJDBCOutput_3.addBatch();
					batchSizeCounter_tJDBCOutput_3++;
					nb_line_tJDBCOutput_3++;

					if ((batchSize_tJDBCOutput_3 > 0)
							&& (batchSize_tJDBCOutput_3 <= batchSizeCounter_tJDBCOutput_3)) {
						int[] status_tJDBCOutput_3 = null;
						int countSum_tJDBCOutput_3 = 0;
						try {
							batchSizeCounter_tJDBCOutput_3 = 0;
							status_tJDBCOutput_3 = pstmt_tJDBCOutput_3
									.executeBatch();
							for (int countEach_tJDBCOutput_3 : status_tJDBCOutput_3) {
								countSum_tJDBCOutput_3 += (countEach_tJDBCOutput_3 < 0 ? 0
										: countEach_tJDBCOutput_3);
							}
						} catch (java.sql.BatchUpdateException e) {
							throw (e);
						}
						try {
							tmp_batchUpdateCount_tJDBCOutput_3 = pstmt_tJDBCOutput_3
									.getUpdateCount();
						} catch (java.sql.SQLException e) {
							System.err.println(e.getMessage());
						}
						tmp_batchUpdateCount_tJDBCOutput_3 = tmp_batchUpdateCount_tJDBCOutput_3 > countSum_tJDBCOutput_3 ? tmp_batchUpdateCount_tJDBCOutput_3
								: countSum_tJDBCOutput_3;
						insertedCount_tJDBCOutput_3 += tmp_batchUpdateCount_tJDBCOutput_3;
					}

					tos_count_tJDBCOutput_3++;

					/**
					 * [tJDBCOutput_3 main ] stop
					 */

					/**
					 * [tFixedFlowInput_21 end ] start
					 */

					currentComponent = "tFixedFlowInput_21";

				}
				globalMap.put("tFixedFlowInput_21_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_21", true);
				end_Hash.put("tFixedFlowInput_21", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_21 end ] stop
				 */

				/**
				 * [tJDBCOutput_3 end ] start
				 */

				currentComponent = "tJDBCOutput_3";

				int[] status_tJDBCOutput_3 = null;
				int countSum_tJDBCOutput_3 = 0;
				try {
					if (pstmt_tJDBCOutput_3 != null
							&& batchSizeCounter_tJDBCOutput_3 > 0) {

						status_tJDBCOutput_3 = pstmt_tJDBCOutput_3
								.executeBatch();

						for (int countEach_tJDBCOutput_3 : status_tJDBCOutput_3) {
							countSum_tJDBCOutput_3 += (countEach_tJDBCOutput_3 < 0 ? 0
									: countEach_tJDBCOutput_3);
						}
					}
				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				if (pstmt_tJDBCOutput_3 != null
						&& batchSizeCounter_tJDBCOutput_3 > 0) {
					try {
						tmp_batchUpdateCount_tJDBCOutput_3 = pstmt_tJDBCOutput_3
								.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tJDBCOutput_3 = tmp_batchUpdateCount_tJDBCOutput_3 > countSum_tJDBCOutput_3 ? tmp_batchUpdateCount_tJDBCOutput_3
							: countSum_tJDBCOutput_3;

					insertedCount_tJDBCOutput_3 += tmp_batchUpdateCount_tJDBCOutput_3;

				}
				if (pstmt_tJDBCOutput_3 != null) {

					pstmt_tJDBCOutput_3.close();

				}

				nb_line_deleted_tJDBCOutput_3 = nb_line_deleted_tJDBCOutput_3
						+ deletedCount_tJDBCOutput_3;
				nb_line_update_tJDBCOutput_3 = nb_line_update_tJDBCOutput_3
						+ updatedCount_tJDBCOutput_3;
				nb_line_inserted_tJDBCOutput_3 = nb_line_inserted_tJDBCOutput_3
						+ insertedCount_tJDBCOutput_3;
				nb_line_rejected_tJDBCOutput_3 = nb_line_rejected_tJDBCOutput_3
						+ rejectedCount_tJDBCOutput_3;

				globalMap.put("tJDBCOutput_3_NB_LINE", nb_line_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_3);
				globalMap.put("tJDBCOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_3);

				ok_Hash.put("tJDBCOutput_3", true);
				end_Hash.put("tJDBCOutput_3", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tFixedFlowInput_21:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tFixedFlowInput_23Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_21 finally ] start
				 */

				currentComponent = "tFixedFlowInput_21";

				/**
				 * [tFixedFlowInput_21 finally ] stop
				 */

				/**
				 * [tJDBCOutput_3 finally ] start
				 */

				currentComponent = "tJDBCOutput_3";

				/**
				 * [tJDBCOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_21_SUBPROCESS_STATE", 1);
	}

	public static class no500_5Struct implements
			routines.system.IPersistableRow<no500_5Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(no500_5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row33Struct implements
			routines.system.IPersistableRow<row33Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String status_code;

		public String getStatus_code() {
			return this.status_code;
		}

		public String status_message;

		public String getStatus_message() {
			return this.status_message;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.status_code = readString(dis);

					this.status_message = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status_code, dos);

				// String

				writeString(this.status_message, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status_code=" + status_code);
			sb.append(",status_message=" + status_message);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row33Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_22Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_22_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row33Struct row33 = new row33Struct();
				no500_5Struct no500_5 = new no500_5Struct();

				/**
				 * [tRESTResponse_19 begin ] start
				 */

				ok_Hash.put("tRESTResponse_19", false);
				start_Hash.put("tRESTResponse_19", System.currentTimeMillis());

				currentComponent = "tRESTResponse_19";

				int tos_count_tRESTResponse_19 = 0;

				class BytesLimit65535_tRESTResponse_19 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTResponse_19().limitLog4jByte();

				/**
				 * [tRESTResponse_19 begin ] stop
				 */

				/**
				 * [tXMLMap_23 begin ] start
				 */

				ok_Hash.put("tXMLMap_23", false);
				start_Hash.put("tXMLMap_23", System.currentTimeMillis());

				currentComponent = "tXMLMap_23";

				int tos_count_tXMLMap_23 = 0;

				class BytesLimit65535_tXMLMap_23 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_23().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_23 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_23__Struct {
				}
				Var__tXMLMap_23__Struct Var__tXMLMap_23 = new Var__tXMLMap_23__Struct();
				// ###############################
				// # Outputs initialization
				no500_5Struct no500_5_tmp = new no500_5Struct();
				no500_5Struct no500_5_save = null;
				// ###############################
				int nb_line_tXMLMap_23 = 0;

				XML_API_tXMLMap_23 xml_api_tXMLMap_23 = new XML_API_tXMLMap_23();

				class GenerateDocument_no500_5 {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					String currentValue = null;

					public GenerateDocument_no500_5() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						generateOk();
						return this.doc;
					}

					// do some work after document has been generated
					private void generateOk() {
						routines.system.NestXMLTool.replaceDefaultNameSpace(
								this.doc.getRootElement(), null);
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin,
							row33Struct row33, Var__tXMLMap_23__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = org.dom4j.DocumentHelper
									.createElement("root");
							doc.add(root);
							subTreeRootParent = root;
							org.dom4j.Element root_0 = null;
							root_0 = root.addElement("STATUS");
							valueMap.put("root_0", "0");
							if (valueMap.get("root_0") != null) {
								routines.system.NestXMLTool.setText(root_0,
										FormatterUtils.format("0", null));
							}
							org.dom4j.Element root_1 = null;
							root_1 = root.addElement("FILE_ID");
							valueMap.put("root_1", row33.file_id);
							if (valueMap.get("root_1") != null) {
								routines.system.NestXMLTool.setText(root_1,
										FormatterUtils.format(row33.file_id,
												null));
							}
							org.dom4j.Element root_2 = null;
							root_2 = root.addElement("RETURN_CODE");
							valueMap.put("root_2", row33.status_code);
							if (valueMap.get("root_2") != null) {
								routines.system.NestXMLTool.setText(root_2,
										FormatterUtils.format(
												row33.status_code, null));
							}
							org.dom4j.Element root_3 = null;
							root_3 = root.addElement("RETURN_MSG");
							valueMap.put("root_3", row33.status_message);
							if (valueMap.get("root_3") != null) {
								routines.system.NestXMLTool.setText(root_3,
										FormatterUtils.format(
												row33.status_message, null));
							}
							org.dom4j.Element root_4 = null;
							root_4 = root.addElement("CONTENT");
							valueMap.put("root_4", "file_id : " + row33.file_id);
							if (valueMap.get("root_4") != null) {
								routines.system.NestXMLTool.setText(
										root_4,
										FormatterUtils.format("file_id : "
												+ row33.file_id, null));
							}
							org.dom4j.Element root_5 = null;
							root_5 = root.addElement("MID_NO");
							valueMap.put("root_5", context.MID_NO);
							if (valueMap.get("root_5") != null) {
								routines.system.NestXMLTool.setText(root_5,
										FormatterUtils.format(context.MID_NO,
												null));
							}
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
					}
				}

				/**
				 * [tXMLMap_23 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_22 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_22", false);
				start_Hash
						.put("tFixedFlowInput_22", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_22";

				int tos_count_tFixedFlowInput_22 = 0;

				class BytesLimit65535_tFixedFlowInput_22 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_22().limitLog4jByte();

				for (int i_tFixedFlowInput_22 = 0; i_tFixedFlowInput_22 < 1; i_tFixedFlowInput_22++) {

					row33.status_code = "500";

					row33.status_message = "File upload failed";

					row33.file_id = ((String) globalMap.get("binary1.file_id"));

					/**
					 * [tFixedFlowInput_22 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_22 main ] start
					 */

					currentComponent = "tFixedFlowInput_22";

					tos_count_tFixedFlowInput_22++;

					/**
					 * [tFixedFlowInput_22 main ] stop
					 */

					/**
					 * [tXMLMap_23 main ] start
					 */

					currentComponent = "tXMLMap_23";

					boolean rejectedInnerJoin_tXMLMap_23 = false;
					boolean rejectedDocInnerJoin_tXMLMap_23 = false;
					boolean mainRowRejected_tXMLMap_23 = false;
					boolean isMatchDocRowtXMLMap_23 = false;

					GenerateDocument_no500_5 gen_Doc_no500_5_tXMLMap_23 = new GenerateDocument_no500_5();
					no500_5_tmp.body = null;

					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tXMLMap_23__Struct Var = Var__tXMLMap_23;
						// ###############################
						// # Output tables

						no500_5 = null;

						// # Output table : 'no500_5'

						gen_Doc_no500_5_tXMLMap_23.generateElements(
								rejectedDocInnerJoin_tXMLMap_23, row33, Var);

						if (no500_5_tmp.body == null) {
							no500_5_tmp.body = new routines.system.Document();
							no500_5_tmp.body
									.setDocument(gen_Doc_no500_5_tXMLMap_23
											.getDocument());
						}

						no500_5 = no500_5_tmp;
						no500_5_save = no500_5_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tXMLMap_23 = false;

					tos_count_tXMLMap_23++;

					/**
					 * [tXMLMap_23 main ] stop
					 */
					// Start of branch "no500_5"
					if (no500_5 != null) {

						/**
						 * [tRESTResponse_19 main ] start
						 */

						currentComponent = "tRESTResponse_19";

						java.io.OutputStream outputStream_tRESTResponse_19 = (java.io.OutputStream) globalMap
								.get("restResponseStream");
						boolean responseAlreadySent_tRESTResponse_19 = globalMap
								.containsKey("restResponse");

						if (null == outputStream_tRESTResponse_19
								&& responseAlreadySent_tRESTResponse_19) {
							throw new RuntimeException(
									"Rest response already sent.");
						} else if (!globalMap.containsKey("restRequest")) {
							throw new RuntimeException(
									"Not received rest request yet.");
						} else {
							Integer restProviderStatusCode_tRESTResponse_19 = 500;

							Object restProviderResponse_tRESTResponse_19 = null;
							if (null != no500_5.body) {
								restProviderResponse_tRESTResponse_19 = no500_5.body
										.getDocument();
							}

							java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_19 = new java.util.TreeMap<String, String>(
									String.CASE_INSENSITIVE_ORDER);

							java.util.Map<String, Object> restRequest_tRESTResponse_19 = (java.util.Map<String, Object>) globalMap
									.get("restRequest");
							org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_19 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_19
									.get("MESSAGE_CONTEXT");

							if (null == outputStream_tRESTResponse_19) {
								java.util.Map<String, Object> restResponse_tRESTResponse_19 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_19.put("BODY",
										restProviderResponse_tRESTResponse_19);
								restResponse_tRESTResponse_19
										.put("STATUS",
												restProviderStatusCode_tRESTResponse_19);
								restResponse_tRESTResponse_19
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_19);
								restResponse_tRESTResponse_19.put(
										"drop.json.root.element",
										Boolean.valueOf(true));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_19);

							} else {

								javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_19 = null;
								if (!responseAlreadySent_tRESTResponse_19) {
									org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
													true);

									messageContext_tRESTResponse_19
											.put(org.apache.cxf.message.Message.RESPONSE_CODE,
													restProviderStatusCode_tRESTResponse_19);
									javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_19 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
									for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_19
											.entrySet()) {
										headersMultivaluedMap_tRESTResponse_19
												.putSingle(multivaluedHeader
														.getKey(),
														multivaluedHeader
																.getValue());
									}
									messageContext_tRESTResponse_19
											.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
													headersMultivaluedMap_tRESTResponse_19);

									// String
									// responseContentType_tRESTResponse_19 =
									// (String)
									// messageContext_tRESTResponse_19.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									String responseContentType_tRESTResponse_19 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									if (null == responseContentType_tRESTResponse_19) {
										// this should not be needed, just in
										// case. set it to the first value in
										// the sorted list returned from
										// HttpHeaders
										responseMediaType_tRESTResponse_19 = messageContext_tRESTResponse_19
												.getHttpHeaders()
												.getAcceptableMediaTypes()
												.get(0);
									} else {
										responseMediaType_tRESTResponse_19 = org.apache.cxf.jaxrs.utils.JAXRSUtils
												.toMediaType(responseContentType_tRESTResponse_19);
									}
									globalMap.put("restResponseMediaType",
											responseMediaType_tRESTResponse_19);

									String responseMediaSubType_tRESTResponse_19 = responseMediaType_tRESTResponse_19
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_19
											.equals("xml")
											|| responseMediaSubType_tRESTResponse_19
													.endsWith("+xml")) {
										outputStream_tRESTResponse_19
												.write("<wrapper>".getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"</wrapper>");
									}
									if (responseMediaSubType_tRESTResponse_19
											.equals("json")
											|| responseMediaSubType_tRESTResponse_19
													.endsWith("+json")) {
										outputStream_tRESTResponse_19.write("["
												.getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"]");
									}

									globalMap.put("restResponse", true);
								} else {
									responseMediaType_tRESTResponse_19 = (javax.ws.rs.core.MediaType) globalMap
											.get("restResponseMediaType");
								}

								if (null != restProviderResponse_tRESTResponse_19) {
									String responseMediaSubType_tRESTResponse_19 = responseMediaType_tRESTResponse_19
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_19
											.equals("json")
											|| responseMediaSubType_tRESTResponse_19
													.endsWith("+json")) {
										if (globalMap
												.containsKey("restResponseJsonStarted")) {
											outputStream_tRESTResponse_19
													.write(",".getBytes());
										} else {
											globalMap.put(
													"restResponseJsonStarted",
													true);
										}
									}

									Class<? extends Object> responseBodyClass_tRESTResponse_19 = restProviderResponse_tRESTResponse_19
											.getClass();
									javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_19 = messageContext_tRESTResponse_19
											.getProviders();
									javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_19 = messageBodyProviders_tRESTResponse_19
											.getMessageBodyWriter(
													responseBodyClass_tRESTResponse_19,
													responseBodyClass_tRESTResponse_19,
													null,
													responseMediaType_tRESTResponse_19);
									messageBodyWriter_tRESTResponse_19
											.writeTo(
													restProviderResponse_tRESTResponse_19,
													responseBodyClass_tRESTResponse_19,
													responseBodyClass_tRESTResponse_19,
													new java.lang.annotation.Annotation[] {},
													responseMediaType_tRESTResponse_19,
													null,
													outputStream_tRESTResponse_19);
								}
								// initial variant
								// outputStream_tRESTResponse_19.write(String.valueOf(restProviderResponse_tRESTResponse_19).getBytes());
								outputStream_tRESTResponse_19.flush();
							}
						}

						tos_count_tRESTResponse_19++;

						/**
						 * [tRESTResponse_19 main ] stop
						 */

					} // End of branch "no500_5"

					/**
					 * [tFixedFlowInput_22 end ] start
					 */

					currentComponent = "tFixedFlowInput_22";

				}
				globalMap.put("tFixedFlowInput_22_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_22", true);
				end_Hash.put("tFixedFlowInput_22", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_22 end ] stop
				 */

				/**
				 * [tXMLMap_23 end ] start
				 */

				currentComponent = "tXMLMap_23";

				ok_Hash.put("tXMLMap_23", true);
				end_Hash.put("tXMLMap_23", System.currentTimeMillis());

				/**
				 * [tXMLMap_23 end ] stop
				 */

				/**
				 * [tRESTResponse_19 end ] start
				 */

				currentComponent = "tRESTResponse_19";

				ok_Hash.put("tRESTResponse_19", true);
				end_Hash.put("tRESTResponse_19", System.currentTimeMillis());

				/**
				 * [tRESTResponse_19 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_22 finally ] start
				 */

				currentComponent = "tFixedFlowInput_22";

				/**
				 * [tFixedFlowInput_22 finally ] stop
				 */

				/**
				 * [tXMLMap_23 finally ] start
				 */

				currentComponent = "tXMLMap_23";

				/**
				 * [tXMLMap_23 finally ] stop
				 */

				/**
				 * [tRESTResponse_19 finally ] start
				 */

				currentComponent = "tRESTResponse_19";

				/**
				 * [tRESTResponse_19 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_22_SUBPROCESS_STATE", 1);
	}

	public static class ok_resp5Struct implements
			routines.system.IPersistableRow<ok_resp5Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ok_resp5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row34Struct implements
			routines.system.IPersistableRow<row34Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String status_code;

		public String getStatus_code() {
			return this.status_code;
		}

		public String messages;

		public String getMessages() {
			return this.messages;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.status_code = readString(dis);

					this.messages = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status_code, dos);

				// String

				writeString(this.messages, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status_code=" + status_code);
			sb.append(",messages=" + messages);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row34Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_23Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_23_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row34Struct row34 = new row34Struct();
				ok_resp5Struct ok_resp5 = new ok_resp5Struct();

				/**
				 * [tRESTResponse_20 begin ] start
				 */

				ok_Hash.put("tRESTResponse_20", false);
				start_Hash.put("tRESTResponse_20", System.currentTimeMillis());

				currentComponent = "tRESTResponse_20";

				int tos_count_tRESTResponse_20 = 0;

				class BytesLimit65535_tRESTResponse_20 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTResponse_20().limitLog4jByte();

				/**
				 * [tRESTResponse_20 begin ] stop
				 */

				/**
				 * [tXMLMap_24 begin ] start
				 */

				ok_Hash.put("tXMLMap_24", false);
				start_Hash.put("tXMLMap_24", System.currentTimeMillis());

				currentComponent = "tXMLMap_24";

				int tos_count_tXMLMap_24 = 0;

				class BytesLimit65535_tXMLMap_24 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_24().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_24 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_24__Struct {
				}
				Var__tXMLMap_24__Struct Var__tXMLMap_24 = new Var__tXMLMap_24__Struct();
				// ###############################
				// # Outputs initialization
				ok_resp5Struct ok_resp5_tmp = new ok_resp5Struct();
				ok_resp5Struct ok_resp5_save = null;
				// ###############################
				int nb_line_tXMLMap_24 = 0;

				XML_API_tXMLMap_24 xml_api_tXMLMap_24 = new XML_API_tXMLMap_24();

				class GenerateDocument_ok_resp5 {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					String currentValue = null;

					public GenerateDocument_ok_resp5() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						generateOk();
						return this.doc;
					}

					// do some work after document has been generated
					private void generateOk() {
						routines.system.NestXMLTool.replaceDefaultNameSpace(
								this.doc.getRootElement(), null);
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin,
							row34Struct row34, Var__tXMLMap_24__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = org.dom4j.DocumentHelper
									.createElement("root");
							doc.add(root);
							subTreeRootParent = root;
							org.dom4j.Element root_0 = null;
							root_0 = root.addElement("STATUS");
							valueMap.put("root_0", "1");
							if (valueMap.get("root_0") != null) {
								routines.system.NestXMLTool.setText(root_0,
										FormatterUtils.format("1", null));
							}
							org.dom4j.Element root_1 = null;
							root_1 = root.addElement("FILE_ID");
							valueMap.put("root_1", row34.file_id);
							if (valueMap.get("root_1") != null) {
								routines.system.NestXMLTool.setText(root_1,
										FormatterUtils.format(row34.file_id,
												null));
							}
							org.dom4j.Element root_2 = null;
							root_2 = root.addElement("RETURN_CODE");
							valueMap.put("root_2", row34.status_code);
							if (valueMap.get("root_2") != null) {
								routines.system.NestXMLTool.setText(root_2,
										FormatterUtils.format(
												row34.status_code, null));
							}
							org.dom4j.Element root_3 = null;
							root_3 = root.addElement("RETURN_MSG");
							valueMap.put("root_3", row34.messages);
							if (valueMap.get("root_3") != null) {
								routines.system.NestXMLTool.setText(root_3,
										FormatterUtils.format(row34.messages,
												null));
							}
							org.dom4j.Element root_4 = null;
							root_4 = root.addElement("CONTENT");
							valueMap.put(
									"root_4",
									((String) globalMap
											.get("tRESTRequest_1_URI_BASE"))
											+ "/" + row34.file_id);
							if (valueMap.get("root_4") != null) {
								routines.system.NestXMLTool
										.setText(
												root_4,
												FormatterUtils.format(
														((String) globalMap
																.get("tRESTRequest_1_URI_BASE"))
																+ "/"
																+ row34.file_id,
														null));
							}
							org.dom4j.Element root_5 = null;
							root_5 = root.addElement("MID_NO");
							valueMap.put("root_5", context.MID_NO);
							if (valueMap.get("root_5") != null) {
								routines.system.NestXMLTool.setText(root_5,
										FormatterUtils.format(context.MID_NO,
												null));
							}
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
					}
				}

				/**
				 * [tXMLMap_24 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_23 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_23", false);
				start_Hash
						.put("tFixedFlowInput_23", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_23";

				int tos_count_tFixedFlowInput_23 = 0;

				class BytesLimit65535_tFixedFlowInput_23 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_23().limitLog4jByte();

				for (int i_tFixedFlowInput_23 = 0; i_tFixedFlowInput_23 < 1; i_tFixedFlowInput_23++) {

					row34.status_code = "201";

					row34.messages = "file uploaded";

					row34.file_id = ((String) globalMap.get("binary1.file_id"));

					/**
					 * [tFixedFlowInput_23 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_23 main ] start
					 */

					currentComponent = "tFixedFlowInput_23";

					tos_count_tFixedFlowInput_23++;

					/**
					 * [tFixedFlowInput_23 main ] stop
					 */

					/**
					 * [tXMLMap_24 main ] start
					 */

					currentComponent = "tXMLMap_24";

					boolean rejectedInnerJoin_tXMLMap_24 = false;
					boolean rejectedDocInnerJoin_tXMLMap_24 = false;
					boolean mainRowRejected_tXMLMap_24 = false;
					boolean isMatchDocRowtXMLMap_24 = false;

					GenerateDocument_ok_resp5 gen_Doc_ok_resp5_tXMLMap_24 = new GenerateDocument_ok_resp5();
					ok_resp5_tmp.body = null;

					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tXMLMap_24__Struct Var = Var__tXMLMap_24;
						// ###############################
						// # Output tables

						ok_resp5 = null;

						// # Output table : 'ok_resp5'

						gen_Doc_ok_resp5_tXMLMap_24.generateElements(
								rejectedDocInnerJoin_tXMLMap_24, row34, Var);

						if (ok_resp5_tmp.body == null) {
							ok_resp5_tmp.body = new routines.system.Document();
							ok_resp5_tmp.body
									.setDocument(gen_Doc_ok_resp5_tXMLMap_24
											.getDocument());
						}

						ok_resp5 = ok_resp5_tmp;
						ok_resp5_save = ok_resp5_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tXMLMap_24 = false;

					tos_count_tXMLMap_24++;

					/**
					 * [tXMLMap_24 main ] stop
					 */
					// Start of branch "ok_resp5"
					if (ok_resp5 != null) {

						/**
						 * [tRESTResponse_20 main ] start
						 */

						currentComponent = "tRESTResponse_20";

						java.io.OutputStream outputStream_tRESTResponse_20 = (java.io.OutputStream) globalMap
								.get("restResponseStream");
						boolean responseAlreadySent_tRESTResponse_20 = globalMap
								.containsKey("restResponse");

						if (null == outputStream_tRESTResponse_20
								&& responseAlreadySent_tRESTResponse_20) {
							throw new RuntimeException(
									"Rest response already sent.");
						} else if (!globalMap.containsKey("restRequest")) {
							throw new RuntimeException(
									"Not received rest request yet.");
						} else {
							Integer restProviderStatusCode_tRESTResponse_20 = 201;

							Object restProviderResponse_tRESTResponse_20 = null;
							if (null != ok_resp5.body) {
								restProviderResponse_tRESTResponse_20 = ok_resp5.body
										.getDocument();
							}

							java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_20 = new java.util.TreeMap<String, String>(
									String.CASE_INSENSITIVE_ORDER);

							java.util.Map<String, Object> restRequest_tRESTResponse_20 = (java.util.Map<String, Object>) globalMap
									.get("restRequest");
							org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_20 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_20
									.get("MESSAGE_CONTEXT");

							if (null == outputStream_tRESTResponse_20) {
								java.util.Map<String, Object> restResponse_tRESTResponse_20 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_20.put("BODY",
										restProviderResponse_tRESTResponse_20);
								restResponse_tRESTResponse_20
										.put("STATUS",
												restProviderStatusCode_tRESTResponse_20);
								restResponse_tRESTResponse_20
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_20);
								restResponse_tRESTResponse_20.put(
										"drop.json.root.element",
										Boolean.valueOf(true));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_20);

							} else {

								javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_20 = null;
								if (!responseAlreadySent_tRESTResponse_20) {
									org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
													true);

									messageContext_tRESTResponse_20
											.put(org.apache.cxf.message.Message.RESPONSE_CODE,
													restProviderStatusCode_tRESTResponse_20);
									javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_20 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
									for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_20
											.entrySet()) {
										headersMultivaluedMap_tRESTResponse_20
												.putSingle(multivaluedHeader
														.getKey(),
														multivaluedHeader
																.getValue());
									}
									messageContext_tRESTResponse_20
											.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
													headersMultivaluedMap_tRESTResponse_20);

									// String
									// responseContentType_tRESTResponse_20 =
									// (String)
									// messageContext_tRESTResponse_20.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									String responseContentType_tRESTResponse_20 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									if (null == responseContentType_tRESTResponse_20) {
										// this should not be needed, just in
										// case. set it to the first value in
										// the sorted list returned from
										// HttpHeaders
										responseMediaType_tRESTResponse_20 = messageContext_tRESTResponse_20
												.getHttpHeaders()
												.getAcceptableMediaTypes()
												.get(0);
									} else {
										responseMediaType_tRESTResponse_20 = org.apache.cxf.jaxrs.utils.JAXRSUtils
												.toMediaType(responseContentType_tRESTResponse_20);
									}
									globalMap.put("restResponseMediaType",
											responseMediaType_tRESTResponse_20);

									String responseMediaSubType_tRESTResponse_20 = responseMediaType_tRESTResponse_20
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_20
											.equals("xml")
											|| responseMediaSubType_tRESTResponse_20
													.endsWith("+xml")) {
										outputStream_tRESTResponse_20
												.write("<wrapper>".getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"</wrapper>");
									}
									if (responseMediaSubType_tRESTResponse_20
											.equals("json")
											|| responseMediaSubType_tRESTResponse_20
													.endsWith("+json")) {
										outputStream_tRESTResponse_20.write("["
												.getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"]");
									}

									globalMap.put("restResponse", true);
								} else {
									responseMediaType_tRESTResponse_20 = (javax.ws.rs.core.MediaType) globalMap
											.get("restResponseMediaType");
								}

								if (null != restProviderResponse_tRESTResponse_20) {
									String responseMediaSubType_tRESTResponse_20 = responseMediaType_tRESTResponse_20
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_20
											.equals("json")
											|| responseMediaSubType_tRESTResponse_20
													.endsWith("+json")) {
										if (globalMap
												.containsKey("restResponseJsonStarted")) {
											outputStream_tRESTResponse_20
													.write(",".getBytes());
										} else {
											globalMap.put(
													"restResponseJsonStarted",
													true);
										}
									}

									Class<? extends Object> responseBodyClass_tRESTResponse_20 = restProviderResponse_tRESTResponse_20
											.getClass();
									javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_20 = messageContext_tRESTResponse_20
											.getProviders();
									javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_20 = messageBodyProviders_tRESTResponse_20
											.getMessageBodyWriter(
													responseBodyClass_tRESTResponse_20,
													responseBodyClass_tRESTResponse_20,
													null,
													responseMediaType_tRESTResponse_20);
									messageBodyWriter_tRESTResponse_20
											.writeTo(
													restProviderResponse_tRESTResponse_20,
													responseBodyClass_tRESTResponse_20,
													responseBodyClass_tRESTResponse_20,
													new java.lang.annotation.Annotation[] {},
													responseMediaType_tRESTResponse_20,
													null,
													outputStream_tRESTResponse_20);
								}
								// initial variant
								// outputStream_tRESTResponse_20.write(String.valueOf(restProviderResponse_tRESTResponse_20).getBytes());
								outputStream_tRESTResponse_20.flush();
							}
						}

						tos_count_tRESTResponse_20++;

						/**
						 * [tRESTResponse_20 main ] stop
						 */

					} // End of branch "ok_resp5"

					/**
					 * [tFixedFlowInput_23 end ] start
					 */

					currentComponent = "tFixedFlowInput_23";

				}
				globalMap.put("tFixedFlowInput_23_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_23", true);
				end_Hash.put("tFixedFlowInput_23", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_23 end ] stop
				 */

				/**
				 * [tXMLMap_24 end ] start
				 */

				currentComponent = "tXMLMap_24";

				ok_Hash.put("tXMLMap_24", true);
				end_Hash.put("tXMLMap_24", System.currentTimeMillis());

				/**
				 * [tXMLMap_24 end ] stop
				 */

				/**
				 * [tRESTResponse_20 end ] start
				 */

				currentComponent = "tRESTResponse_20";

				ok_Hash.put("tRESTResponse_20", true);
				end_Hash.put("tRESTResponse_20", System.currentTimeMillis());

				/**
				 * [tRESTResponse_20 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_23 finally ] start
				 */

				currentComponent = "tFixedFlowInput_23";

				/**
				 * [tFixedFlowInput_23 finally ] stop
				 */

				/**
				 * [tXMLMap_24 finally ] start
				 */

				currentComponent = "tXMLMap_24";

				/**
				 * [tXMLMap_24 finally ] stop
				 */

				/**
				 * [tRESTResponse_20 finally ] start
				 */

				currentComponent = "tRESTResponse_20";

				/**
				 * [tRESTResponse_20 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_23_SUBPROCESS_STATE", 1);
	}

	public static class row37Struct implements
			routines.system.IPersistableRow<row37Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		public String original_uri;

		public String getOriginal_uri() {
			return this.original_uri;
		}

		public String auth_string;

		public String getAuth_string() {
			return this.auth_string;
		}

		public String grant_system;

		public String getGrant_system() {
			return this.grant_system;
		}

		public Boolean valid;

		public Boolean getValid() {
			return this.valid;
		}

		public String md5sum;

		public String getMd5sum() {
			return this.md5sum;
		}

		public Integer content_length;

		public Integer getContent_length() {
			return this.content_length;
		}

		public String content_disposition;

		public String getContent_disposition() {
			return this.content_disposition;
		}

		public String content_type;

		public String getContent_type() {
			return this.content_type;
		}

		public String ref_file_id;

		public String getRef_file_id() {
			return this.ref_file_id;
		}

		public java.util.Date create_time;

		public java.util.Date getCreate_time() {
			return this.create_time;
		}

		public java.util.Date update_time;

		public java.util.Date getUpdate_time() {
			return this.update_time;
		}

		public String return_code;

		public String getReturn_code() {
			return this.return_code;
		}

		public String return_msg;

		public String getReturn_msg() {
			return this.return_msg;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.file_id == null) ? 0 : this.file_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row37Struct other = (row37Struct) obj;

			if (this.file_id == null) {
				if (other.file_id != null)
					return false;

			} else if (!this.file_id.equals(other.file_id))

				return false;

			return true;
		}

		public void copyDataTo(row37Struct other) {

			other.file_id = this.file_id;
			other.original_uri = this.original_uri;
			other.auth_string = this.auth_string;
			other.grant_system = this.grant_system;
			other.valid = this.valid;
			other.md5sum = this.md5sum;
			other.content_length = this.content_length;
			other.content_disposition = this.content_disposition;
			other.content_type = this.content_type;
			other.ref_file_id = this.ref_file_id;
			other.create_time = this.create_time;
			other.update_time = this.update_time;
			other.return_code = this.return_code;
			other.return_msg = this.return_msg;

		}

		public void copyKeysDataTo(row37Struct other) {

			other.file_id = this.file_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.file_id = readString(dis);

					this.original_uri = readString(dis);

					this.auth_string = readString(dis);

					this.grant_system = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.valid = null;
					} else {
						this.valid = dis.readBoolean();
					}

					this.md5sum = readString(dis);

					this.content_length = readInteger(dis);

					this.content_disposition = readString(dis);

					this.content_type = readString(dis);

					this.ref_file_id = readString(dis);

					this.create_time = readDate(dis);

					this.update_time = readDate(dis);

					this.return_code = readString(dis);

					this.return_msg = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.file_id, dos);

				// String

				writeString(this.original_uri, dos);

				// String

				writeString(this.auth_string, dos);

				// String

				writeString(this.grant_system, dos);

				// Boolean

				if (this.valid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.valid);
				}

				// String

				writeString(this.md5sum, dos);

				// Integer

				writeInteger(this.content_length, dos);

				// String

				writeString(this.content_disposition, dos);

				// String

				writeString(this.content_type, dos);

				// String

				writeString(this.ref_file_id, dos);

				// java.util.Date

				writeDate(this.create_time, dos);

				// java.util.Date

				writeDate(this.update_time, dos);

				// String

				writeString(this.return_code, dos);

				// String

				writeString(this.return_msg, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("file_id=" + file_id);
			sb.append(",original_uri=" + original_uri);
			sb.append(",auth_string=" + auth_string);
			sb.append(",grant_system=" + grant_system);
			sb.append(",valid=" + String.valueOf(valid));
			sb.append(",md5sum=" + md5sum);
			sb.append(",content_length=" + String.valueOf(content_length));
			sb.append(",content_disposition=" + content_disposition);
			sb.append(",content_type=" + content_type);
			sb.append(",ref_file_id=" + ref_file_id);
			sb.append(",create_time=" + String.valueOf(create_time));
			sb.append(",update_time=" + String.valueOf(update_time));
			sb.append(",return_code=" + return_code);
			sb.append(",return_msg=" + return_msg);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row37Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.file_id, other.file_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_24Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_24_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row37Struct row37 = new row37Struct();

				/**
				 * [tJDBCOutput_4 begin ] start
				 */

				ok_Hash.put("tJDBCOutput_4", false);
				start_Hash.put("tJDBCOutput_4", System.currentTimeMillis());

				currentComponent = "tJDBCOutput_4";

				int tos_count_tJDBCOutput_4 = 0;

				class BytesLimit65535_tJDBCOutput_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJDBCOutput_4().limitLog4jByte();

				int nb_line_tJDBCOutput_4 = 0;
				int nb_line_update_tJDBCOutput_4 = 0;
				int nb_line_inserted_tJDBCOutput_4 = 0;
				int nb_line_deleted_tJDBCOutput_4 = 0;
				int nb_line_rejected_tJDBCOutput_4 = 0;

				int tmp_batchUpdateCount_tJDBCOutput_4 = 0;

				int deletedCount_tJDBCOutput_4 = 0;
				int updatedCount_tJDBCOutput_4 = 0;
				int insertedCount_tJDBCOutput_4 = 0;
				int rejectedCount_tJDBCOutput_4 = 0;

				boolean whetherReject_tJDBCOutput_4 = false;

				java.sql.Connection connection_tJDBCOutput_4 = (java.sql.Connection) globalMap
						.get("conn_tJDBCConnection_5");
				int batchSize_tJDBCOutput_4 = 1000;
				int batchSizeCounter_tJDBCOutput_4 = 0;

				String insert_tJDBCOutput_4 = "INSERT INTO "
						+ context.mapping_table_name
						+ " (file_id,original_uri,auth_string,grant_system,valid,md5sum,content_length,content_disposition,content_type,ref_file_id,create_time,update_time,return_code,return_msg) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tJDBCOutput_4 = connection_tJDBCOutput_4
						.prepareStatement(insert_tJDBCOutput_4);

				/**
				 * [tJDBCOutput_4 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_24 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_24", false);
				start_Hash
						.put("tFixedFlowInput_24", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_24";

				int tos_count_tFixedFlowInput_24 = 0;

				class BytesLimit65535_tFixedFlowInput_24 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_24().limitLog4jByte();

				for (int i_tFixedFlowInput_24 = 0; i_tFixedFlowInput_24 < 1; i_tFixedFlowInput_24++) {

					row37.file_id = ((String) globalMap.get("binary1.file_id"));

					row37.original_uri = "User upload";

					row37.auth_string = "";

					row37.grant_system = ((String) globalMap
							.get("binary1.grant_system"));

					row37.valid = true;

					row37.md5sum = ((String) globalMap.get("row40.content_md5"));

					row37.content_length = ((Integer) globalMap
							.get("row40.content_length"));

					row37.content_disposition = ((String) globalMap
							.get("row40.content_disposition"));

					row37.content_type = ((String) globalMap
							.get("row40.content_type"));

					row37.ref_file_id = ((String) globalMap
							.get("row36.file_id"));

					row37.create_time = new Date();

					row37.update_time = new Date();

					row37.return_code = "200";

					row37.return_msg = "";

					/**
					 * [tFixedFlowInput_24 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_24 main ] start
					 */

					currentComponent = "tFixedFlowInput_24";

					tos_count_tFixedFlowInput_24++;

					/**
					 * [tFixedFlowInput_24 main ] stop
					 */

					/**
					 * [tJDBCOutput_4 main ] start
					 */

					currentComponent = "tJDBCOutput_4";

					whetherReject_tJDBCOutput_4 = false;
					if (row37.file_id == null) {
						pstmt_tJDBCOutput_4.setNull(1, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_4.setString(1, row37.file_id);
					}

					if (row37.original_uri == null) {
						pstmt_tJDBCOutput_4.setNull(2, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_4.setString(2, row37.original_uri);
					}

					if (row37.auth_string == null) {
						pstmt_tJDBCOutput_4.setNull(3, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_4.setString(3, row37.auth_string);
					}

					if (row37.grant_system == null) {
						pstmt_tJDBCOutput_4.setNull(4, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_4.setString(4, row37.grant_system);
					}

					if (row37.valid == null) {
						pstmt_tJDBCOutput_4.setNull(5, java.sql.Types.BOOLEAN);
					} else {
						pstmt_tJDBCOutput_4.setBoolean(5, row37.valid);
					}

					if (row37.md5sum == null) {
						pstmt_tJDBCOutput_4.setNull(6, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_4.setString(6, row37.md5sum);
					}

					if (row37.content_length == null) {
						pstmt_tJDBCOutput_4.setNull(7, java.sql.Types.INTEGER);
					} else {
						pstmt_tJDBCOutput_4.setInt(7, row37.content_length);
					}

					if (row37.content_disposition == null) {
						pstmt_tJDBCOutput_4.setNull(8, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_4.setString(8,
								row37.content_disposition);
					}

					if (row37.content_type == null) {
						pstmt_tJDBCOutput_4.setNull(9, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_4.setString(9, row37.content_type);
					}

					if (row37.ref_file_id == null) {
						pstmt_tJDBCOutput_4.setNull(10, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_4.setString(10, row37.ref_file_id);
					}

					if (row37.create_time != null) {
						pstmt_tJDBCOutput_4.setTimestamp(
								11,
								new java.sql.Timestamp(row37.create_time
										.getTime()));
					} else {
						pstmt_tJDBCOutput_4.setNull(11, java.sql.Types.DATE);
					}

					if (row37.update_time != null) {
						pstmt_tJDBCOutput_4.setTimestamp(
								12,
								new java.sql.Timestamp(row37.update_time
										.getTime()));
					} else {
						pstmt_tJDBCOutput_4.setNull(12, java.sql.Types.DATE);
					}

					if (row37.return_code == null) {
						pstmt_tJDBCOutput_4.setNull(13, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_4.setString(13, row37.return_code);
					}

					if (row37.return_msg == null) {
						pstmt_tJDBCOutput_4.setNull(14, java.sql.Types.VARCHAR);
					} else {
						pstmt_tJDBCOutput_4.setString(14, row37.return_msg);
					}

					pstmt_tJDBCOutput_4.addBatch();
					batchSizeCounter_tJDBCOutput_4++;
					nb_line_tJDBCOutput_4++;

					if ((batchSize_tJDBCOutput_4 > 0)
							&& (batchSize_tJDBCOutput_4 <= batchSizeCounter_tJDBCOutput_4)) {
						int[] status_tJDBCOutput_4 = null;
						int countSum_tJDBCOutput_4 = 0;
						try {
							batchSizeCounter_tJDBCOutput_4 = 0;
							status_tJDBCOutput_4 = pstmt_tJDBCOutput_4
									.executeBatch();
							for (int countEach_tJDBCOutput_4 : status_tJDBCOutput_4) {
								countSum_tJDBCOutput_4 += (countEach_tJDBCOutput_4 < 0 ? 0
										: countEach_tJDBCOutput_4);
							}
						} catch (java.sql.BatchUpdateException e) {
							throw (e);
						}
						try {
							tmp_batchUpdateCount_tJDBCOutput_4 = pstmt_tJDBCOutput_4
									.getUpdateCount();
						} catch (java.sql.SQLException e) {
							System.err.println(e.getMessage());
						}
						tmp_batchUpdateCount_tJDBCOutput_4 = tmp_batchUpdateCount_tJDBCOutput_4 > countSum_tJDBCOutput_4 ? tmp_batchUpdateCount_tJDBCOutput_4
								: countSum_tJDBCOutput_4;
						insertedCount_tJDBCOutput_4 += tmp_batchUpdateCount_tJDBCOutput_4;
					}

					tos_count_tJDBCOutput_4++;

					/**
					 * [tJDBCOutput_4 main ] stop
					 */

					/**
					 * [tFixedFlowInput_24 end ] start
					 */

					currentComponent = "tFixedFlowInput_24";

				}
				globalMap.put("tFixedFlowInput_24_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_24", true);
				end_Hash.put("tFixedFlowInput_24", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_24 end ] stop
				 */

				/**
				 * [tJDBCOutput_4 end ] start
				 */

				currentComponent = "tJDBCOutput_4";

				int[] status_tJDBCOutput_4 = null;
				int countSum_tJDBCOutput_4 = 0;
				try {
					if (pstmt_tJDBCOutput_4 != null
							&& batchSizeCounter_tJDBCOutput_4 > 0) {

						status_tJDBCOutput_4 = pstmt_tJDBCOutput_4
								.executeBatch();

						for (int countEach_tJDBCOutput_4 : status_tJDBCOutput_4) {
							countSum_tJDBCOutput_4 += (countEach_tJDBCOutput_4 < 0 ? 0
									: countEach_tJDBCOutput_4);
						}
					}
				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				if (pstmt_tJDBCOutput_4 != null
						&& batchSizeCounter_tJDBCOutput_4 > 0) {
					try {
						tmp_batchUpdateCount_tJDBCOutput_4 = pstmt_tJDBCOutput_4
								.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tJDBCOutput_4 = tmp_batchUpdateCount_tJDBCOutput_4 > countSum_tJDBCOutput_4 ? tmp_batchUpdateCount_tJDBCOutput_4
							: countSum_tJDBCOutput_4;

					insertedCount_tJDBCOutput_4 += tmp_batchUpdateCount_tJDBCOutput_4;

				}
				if (pstmt_tJDBCOutput_4 != null) {

					pstmt_tJDBCOutput_4.close();

				}

				nb_line_deleted_tJDBCOutput_4 = nb_line_deleted_tJDBCOutput_4
						+ deletedCount_tJDBCOutput_4;
				nb_line_update_tJDBCOutput_4 = nb_line_update_tJDBCOutput_4
						+ updatedCount_tJDBCOutput_4;
				nb_line_inserted_tJDBCOutput_4 = nb_line_inserted_tJDBCOutput_4
						+ insertedCount_tJDBCOutput_4;
				nb_line_rejected_tJDBCOutput_4 = nb_line_rejected_tJDBCOutput_4
						+ rejectedCount_tJDBCOutput_4;

				globalMap.put("tJDBCOutput_4_NB_LINE", nb_line_tJDBCOutput_4);
				globalMap.put("tJDBCOutput_4_NB_LINE_UPDATED",
						nb_line_update_tJDBCOutput_4);
				globalMap.put("tJDBCOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tJDBCOutput_4);
				globalMap.put("tJDBCOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tJDBCOutput_4);
				globalMap.put("tJDBCOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tJDBCOutput_4);

				ok_Hash.put("tJDBCOutput_4", true);
				end_Hash.put("tJDBCOutput_4", System.currentTimeMillis());

				/**
				 * [tJDBCOutput_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tFixedFlowInput_24:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tFixedFlowInput_26Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_24 finally ] start
				 */

				currentComponent = "tFixedFlowInput_24";

				/**
				 * [tFixedFlowInput_24 finally ] stop
				 */

				/**
				 * [tJDBCOutput_4 finally ] start
				 */

				currentComponent = "tJDBCOutput_4";

				/**
				 * [tJDBCOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_24_SUBPROCESS_STATE", 1);
	}

	public static class ok_resp5dStruct implements
			routines.system.IPersistableRow<ok_resp5dStruct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ok_resp5dStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row39Struct implements
			routines.system.IPersistableRow<row39Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String status_code;

		public String getStatus_code() {
			return this.status_code;
		}

		public String messages;

		public String getMessages() {
			return this.messages;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.status_code = readString(dis);

					this.messages = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status_code, dos);

				// String

				writeString(this.messages, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status_code=" + status_code);
			sb.append(",messages=" + messages);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row39Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_26Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_26_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row39Struct row39 = new row39Struct();
				ok_resp5dStruct ok_resp5d = new ok_resp5dStruct();

				/**
				 * [tRESTResponse_22 begin ] start
				 */

				ok_Hash.put("tRESTResponse_22", false);
				start_Hash.put("tRESTResponse_22", System.currentTimeMillis());

				currentComponent = "tRESTResponse_22";

				int tos_count_tRESTResponse_22 = 0;

				class BytesLimit65535_tRESTResponse_22 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTResponse_22().limitLog4jByte();

				/**
				 * [tRESTResponse_22 begin ] stop
				 */

				/**
				 * [tXMLMap_26 begin ] start
				 */

				ok_Hash.put("tXMLMap_26", false);
				start_Hash.put("tXMLMap_26", System.currentTimeMillis());

				currentComponent = "tXMLMap_26";

				int tos_count_tXMLMap_26 = 0;

				class BytesLimit65535_tXMLMap_26 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_26().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_26 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_26__Struct {
				}
				Var__tXMLMap_26__Struct Var__tXMLMap_26 = new Var__tXMLMap_26__Struct();
				// ###############################
				// # Outputs initialization
				ok_resp5dStruct ok_resp5d_tmp = new ok_resp5dStruct();
				ok_resp5dStruct ok_resp5d_save = null;
				// ###############################
				int nb_line_tXMLMap_26 = 0;

				XML_API_tXMLMap_26 xml_api_tXMLMap_26 = new XML_API_tXMLMap_26();

				class GenerateDocument_ok_resp5d {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					String currentValue = null;

					public GenerateDocument_ok_resp5d() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						generateOk();
						return this.doc;
					}

					// do some work after document has been generated
					private void generateOk() {
						routines.system.NestXMLTool.replaceDefaultNameSpace(
								this.doc.getRootElement(), null);
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin,
							row39Struct row39, Var__tXMLMap_26__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = org.dom4j.DocumentHelper
									.createElement("root");
							doc.add(root);
							subTreeRootParent = root;
							org.dom4j.Element root_0 = null;
							root_0 = root.addElement("STATUS");
							valueMap.put("root_0", "1");
							if (valueMap.get("root_0") != null) {
								routines.system.NestXMLTool.setText(root_0,
										FormatterUtils.format("1", null));
							}
							org.dom4j.Element root_1 = null;
							root_1 = root.addElement("FILE_ID");
							valueMap.put("root_1", row39.file_id);
							if (valueMap.get("root_1") != null) {
								routines.system.NestXMLTool.setText(root_1,
										FormatterUtils.format(row39.file_id,
												null));
							}
							org.dom4j.Element root_2 = null;
							root_2 = root.addElement("RETURN_CODE");
							valueMap.put("root_2", row39.status_code);
							if (valueMap.get("root_2") != null) {
								routines.system.NestXMLTool.setText(root_2,
										FormatterUtils.format(
												row39.status_code, null));
							}
							org.dom4j.Element root_3 = null;
							root_3 = root.addElement("RETURN_MSG");
							valueMap.put("root_3", row39.messages);
							if (valueMap.get("root_3") != null) {
								routines.system.NestXMLTool.setText(root_3,
										FormatterUtils.format(row39.messages,
												null));
							}
							org.dom4j.Element root_4 = null;
							root_4 = root.addElement("CONTENT");
							valueMap.put(
									"root_4",
									((String) globalMap
											.get("tRESTRequest_1_URI_BASE"))
											+ "/" + row39.file_id);
							if (valueMap.get("root_4") != null) {
								routines.system.NestXMLTool
										.setText(
												root_4,
												FormatterUtils.format(
														((String) globalMap
																.get("tRESTRequest_1_URI_BASE"))
																+ "/"
																+ row39.file_id,
														null));
							}
							org.dom4j.Element root_5 = null;
							root_5 = root.addElement("MID_NO");
							valueMap.put("root_5", context.MID_NO);
							if (valueMap.get("root_5") != null) {
								routines.system.NestXMLTool.setText(root_5,
										FormatterUtils.format(context.MID_NO,
												null));
							}
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
					}
				}

				/**
				 * [tXMLMap_26 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_26 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_26", false);
				start_Hash
						.put("tFixedFlowInput_26", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_26";

				int tos_count_tFixedFlowInput_26 = 0;

				class BytesLimit65535_tFixedFlowInput_26 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_26().limitLog4jByte();

				for (int i_tFixedFlowInput_26 = 0; i_tFixedFlowInput_26 < 1; i_tFixedFlowInput_26++) {

					row39.status_code = "201";

					row39.messages = "file uploaded";

					row39.file_id = ((String) globalMap.get("binary1.file_id"));

					/**
					 * [tFixedFlowInput_26 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_26 main ] start
					 */

					currentComponent = "tFixedFlowInput_26";

					tos_count_tFixedFlowInput_26++;

					/**
					 * [tFixedFlowInput_26 main ] stop
					 */

					/**
					 * [tXMLMap_26 main ] start
					 */

					currentComponent = "tXMLMap_26";

					boolean rejectedInnerJoin_tXMLMap_26 = false;
					boolean rejectedDocInnerJoin_tXMLMap_26 = false;
					boolean mainRowRejected_tXMLMap_26 = false;
					boolean isMatchDocRowtXMLMap_26 = false;

					GenerateDocument_ok_resp5d gen_Doc_ok_resp5d_tXMLMap_26 = new GenerateDocument_ok_resp5d();
					ok_resp5d_tmp.body = null;

					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tXMLMap_26__Struct Var = Var__tXMLMap_26;
						// ###############################
						// # Output tables

						ok_resp5d = null;

						// # Output table : 'ok_resp5d'

						gen_Doc_ok_resp5d_tXMLMap_26.generateElements(
								rejectedDocInnerJoin_tXMLMap_26, row39, Var);

						if (ok_resp5d_tmp.body == null) {
							ok_resp5d_tmp.body = new routines.system.Document();
							ok_resp5d_tmp.body
									.setDocument(gen_Doc_ok_resp5d_tXMLMap_26
											.getDocument());
						}

						ok_resp5d = ok_resp5d_tmp;
						ok_resp5d_save = ok_resp5d_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tXMLMap_26 = false;

					tos_count_tXMLMap_26++;

					/**
					 * [tXMLMap_26 main ] stop
					 */
					// Start of branch "ok_resp5d"
					if (ok_resp5d != null) {

						/**
						 * [tRESTResponse_22 main ] start
						 */

						currentComponent = "tRESTResponse_22";

						java.io.OutputStream outputStream_tRESTResponse_22 = (java.io.OutputStream) globalMap
								.get("restResponseStream");
						boolean responseAlreadySent_tRESTResponse_22 = globalMap
								.containsKey("restResponse");

						if (null == outputStream_tRESTResponse_22
								&& responseAlreadySent_tRESTResponse_22) {
							throw new RuntimeException(
									"Rest response already sent.");
						} else if (!globalMap.containsKey("restRequest")) {
							throw new RuntimeException(
									"Not received rest request yet.");
						} else {
							Integer restProviderStatusCode_tRESTResponse_22 = 201;

							Object restProviderResponse_tRESTResponse_22 = null;
							if (null != ok_resp5d.body) {
								restProviderResponse_tRESTResponse_22 = ok_resp5d.body
										.getDocument();
							}

							java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_22 = new java.util.TreeMap<String, String>(
									String.CASE_INSENSITIVE_ORDER);

							java.util.Map<String, Object> restRequest_tRESTResponse_22 = (java.util.Map<String, Object>) globalMap
									.get("restRequest");
							org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_22 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_22
									.get("MESSAGE_CONTEXT");

							if (null == outputStream_tRESTResponse_22) {
								java.util.Map<String, Object> restResponse_tRESTResponse_22 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_22.put("BODY",
										restProviderResponse_tRESTResponse_22);
								restResponse_tRESTResponse_22
										.put("STATUS",
												restProviderStatusCode_tRESTResponse_22);
								restResponse_tRESTResponse_22
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_22);
								restResponse_tRESTResponse_22.put(
										"drop.json.root.element",
										Boolean.valueOf(true));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_22);

							} else {

								javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_22 = null;
								if (!responseAlreadySent_tRESTResponse_22) {
									org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
													true);

									messageContext_tRESTResponse_22
											.put(org.apache.cxf.message.Message.RESPONSE_CODE,
													restProviderStatusCode_tRESTResponse_22);
									javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_22 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
									for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_22
											.entrySet()) {
										headersMultivaluedMap_tRESTResponse_22
												.putSingle(multivaluedHeader
														.getKey(),
														multivaluedHeader
																.getValue());
									}
									messageContext_tRESTResponse_22
											.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
													headersMultivaluedMap_tRESTResponse_22);

									// String
									// responseContentType_tRESTResponse_22 =
									// (String)
									// messageContext_tRESTResponse_22.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									String responseContentType_tRESTResponse_22 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									if (null == responseContentType_tRESTResponse_22) {
										// this should not be needed, just in
										// case. set it to the first value in
										// the sorted list returned from
										// HttpHeaders
										responseMediaType_tRESTResponse_22 = messageContext_tRESTResponse_22
												.getHttpHeaders()
												.getAcceptableMediaTypes()
												.get(0);
									} else {
										responseMediaType_tRESTResponse_22 = org.apache.cxf.jaxrs.utils.JAXRSUtils
												.toMediaType(responseContentType_tRESTResponse_22);
									}
									globalMap.put("restResponseMediaType",
											responseMediaType_tRESTResponse_22);

									String responseMediaSubType_tRESTResponse_22 = responseMediaType_tRESTResponse_22
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_22
											.equals("xml")
											|| responseMediaSubType_tRESTResponse_22
													.endsWith("+xml")) {
										outputStream_tRESTResponse_22
												.write("<wrapper>".getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"</wrapper>");
									}
									if (responseMediaSubType_tRESTResponse_22
											.equals("json")
											|| responseMediaSubType_tRESTResponse_22
													.endsWith("+json")) {
										outputStream_tRESTResponse_22.write("["
												.getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"]");
									}

									globalMap.put("restResponse", true);
								} else {
									responseMediaType_tRESTResponse_22 = (javax.ws.rs.core.MediaType) globalMap
											.get("restResponseMediaType");
								}

								if (null != restProviderResponse_tRESTResponse_22) {
									String responseMediaSubType_tRESTResponse_22 = responseMediaType_tRESTResponse_22
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_22
											.equals("json")
											|| responseMediaSubType_tRESTResponse_22
													.endsWith("+json")) {
										if (globalMap
												.containsKey("restResponseJsonStarted")) {
											outputStream_tRESTResponse_22
													.write(",".getBytes());
										} else {
											globalMap.put(
													"restResponseJsonStarted",
													true);
										}
									}

									Class<? extends Object> responseBodyClass_tRESTResponse_22 = restProviderResponse_tRESTResponse_22
											.getClass();
									javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_22 = messageContext_tRESTResponse_22
											.getProviders();
									javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_22 = messageBodyProviders_tRESTResponse_22
											.getMessageBodyWriter(
													responseBodyClass_tRESTResponse_22,
													responseBodyClass_tRESTResponse_22,
													null,
													responseMediaType_tRESTResponse_22);
									messageBodyWriter_tRESTResponse_22
											.writeTo(
													restProviderResponse_tRESTResponse_22,
													responseBodyClass_tRESTResponse_22,
													responseBodyClass_tRESTResponse_22,
													new java.lang.annotation.Annotation[] {},
													responseMediaType_tRESTResponse_22,
													null,
													outputStream_tRESTResponse_22);
								}
								// initial variant
								// outputStream_tRESTResponse_22.write(String.valueOf(restProviderResponse_tRESTResponse_22).getBytes());
								outputStream_tRESTResponse_22.flush();
							}
						}

						tos_count_tRESTResponse_22++;

						/**
						 * [tRESTResponse_22 main ] stop
						 */

					} // End of branch "ok_resp5d"

					/**
					 * [tFixedFlowInput_26 end ] start
					 */

					currentComponent = "tFixedFlowInput_26";

				}
				globalMap.put("tFixedFlowInput_26_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_26", true);
				end_Hash.put("tFixedFlowInput_26", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_26 end ] stop
				 */

				/**
				 * [tXMLMap_26 end ] start
				 */

				currentComponent = "tXMLMap_26";

				ok_Hash.put("tXMLMap_26", true);
				end_Hash.put("tXMLMap_26", System.currentTimeMillis());

				/**
				 * [tXMLMap_26 end ] stop
				 */

				/**
				 * [tRESTResponse_22 end ] start
				 */

				currentComponent = "tRESTResponse_22";

				ok_Hash.put("tRESTResponse_22", true);
				end_Hash.put("tRESTResponse_22", System.currentTimeMillis());

				/**
				 * [tRESTResponse_22 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_26 finally ] start
				 */

				currentComponent = "tFixedFlowInput_26";

				/**
				 * [tFixedFlowInput_26 finally ] stop
				 */

				/**
				 * [tXMLMap_26 finally ] start
				 */

				currentComponent = "tXMLMap_26";

				/**
				 * [tXMLMap_26 finally ] stop
				 */

				/**
				 * [tRESTResponse_22 finally ] start
				 */

				currentComponent = "tRESTResponse_22";

				/**
				 * [tRESTResponse_22 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_26_SUBPROCESS_STATE", 1);
	}

	public static class no500_5dStruct implements
			routines.system.IPersistableRow<no500_5dStruct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(no500_5dStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row38Struct implements
			routines.system.IPersistableRow<row38Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String status_code;

		public String getStatus_code() {
			return this.status_code;
		}

		public String status_message;

		public String getStatus_message() {
			return this.status_message;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.status_code = readString(dis);

					this.status_message = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status_code, dos);

				// String

				writeString(this.status_message, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status_code=" + status_code);
			sb.append(",status_message=" + status_message);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row38Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_25Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_25_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row38Struct row38 = new row38Struct();
				no500_5dStruct no500_5d = new no500_5dStruct();

				/**
				 * [tRESTResponse_21 begin ] start
				 */

				ok_Hash.put("tRESTResponse_21", false);
				start_Hash.put("tRESTResponse_21", System.currentTimeMillis());

				currentComponent = "tRESTResponse_21";

				int tos_count_tRESTResponse_21 = 0;

				class BytesLimit65535_tRESTResponse_21 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTResponse_21().limitLog4jByte();

				/**
				 * [tRESTResponse_21 begin ] stop
				 */

				/**
				 * [tXMLMap_25 begin ] start
				 */

				ok_Hash.put("tXMLMap_25", false);
				start_Hash.put("tXMLMap_25", System.currentTimeMillis());

				currentComponent = "tXMLMap_25";

				int tos_count_tXMLMap_25 = 0;

				class BytesLimit65535_tXMLMap_25 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_25().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_25 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_25__Struct {
				}
				Var__tXMLMap_25__Struct Var__tXMLMap_25 = new Var__tXMLMap_25__Struct();
				// ###############################
				// # Outputs initialization
				no500_5dStruct no500_5d_tmp = new no500_5dStruct();
				no500_5dStruct no500_5d_save = null;
				// ###############################
				int nb_line_tXMLMap_25 = 0;

				XML_API_tXMLMap_25 xml_api_tXMLMap_25 = new XML_API_tXMLMap_25();

				class GenerateDocument_no500_5d {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					String currentValue = null;

					public GenerateDocument_no500_5d() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						generateOk();
						return this.doc;
					}

					// do some work after document has been generated
					private void generateOk() {
						routines.system.NestXMLTool.replaceDefaultNameSpace(
								this.doc.getRootElement(), null);
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin,
							row38Struct row38, Var__tXMLMap_25__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = org.dom4j.DocumentHelper
									.createElement("root");
							doc.add(root);
							subTreeRootParent = root;
							org.dom4j.Element root_0 = null;
							root_0 = root.addElement("STATUS");
							valueMap.put("root_0", "0");
							if (valueMap.get("root_0") != null) {
								routines.system.NestXMLTool.setText(root_0,
										FormatterUtils.format("0", null));
							}
							org.dom4j.Element root_1 = null;
							root_1 = root.addElement("FILE_ID");
							valueMap.put("root_1", row38.file_id);
							if (valueMap.get("root_1") != null) {
								routines.system.NestXMLTool.setText(root_1,
										FormatterUtils.format(row38.file_id,
												null));
							}
							org.dom4j.Element root_2 = null;
							root_2 = root.addElement("RETURN_CODE");
							valueMap.put("root_2", row38.status_code);
							if (valueMap.get("root_2") != null) {
								routines.system.NestXMLTool.setText(root_2,
										FormatterUtils.format(
												row38.status_code, null));
							}
							org.dom4j.Element root_3 = null;
							root_3 = root.addElement("RETURN_MSG");
							valueMap.put("root_3", row38.status_message);
							if (valueMap.get("root_3") != null) {
								routines.system.NestXMLTool.setText(root_3,
										FormatterUtils.format(
												row38.status_message, null));
							}
							org.dom4j.Element root_4 = null;
							root_4 = root.addElement("CONTENT");
							valueMap.put("root_4", "file_id : " + row38.file_id);
							if (valueMap.get("root_4") != null) {
								routines.system.NestXMLTool.setText(
										root_4,
										FormatterUtils.format("file_id : "
												+ row38.file_id, null));
							}
							org.dom4j.Element root_5 = null;
							root_5 = root.addElement("MID_NO");
							valueMap.put("root_5", context.MID_NO);
							if (valueMap.get("root_5") != null) {
								routines.system.NestXMLTool.setText(root_5,
										FormatterUtils.format(context.MID_NO,
												null));
							}
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
					}
				}

				/**
				 * [tXMLMap_25 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_25 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_25", false);
				start_Hash
						.put("tFixedFlowInput_25", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_25";

				int tos_count_tFixedFlowInput_25 = 0;

				class BytesLimit65535_tFixedFlowInput_25 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_25().limitLog4jByte();

				for (int i_tFixedFlowInput_25 = 0; i_tFixedFlowInput_25 < 1; i_tFixedFlowInput_25++) {

					row38.status_code = "500";

					row38.status_message = "File upload failed";

					row38.file_id = ((String) globalMap.get("binary1.file_id"));

					/**
					 * [tFixedFlowInput_25 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_25 main ] start
					 */

					currentComponent = "tFixedFlowInput_25";

					tos_count_tFixedFlowInput_25++;

					/**
					 * [tFixedFlowInput_25 main ] stop
					 */

					/**
					 * [tXMLMap_25 main ] start
					 */

					currentComponent = "tXMLMap_25";

					boolean rejectedInnerJoin_tXMLMap_25 = false;
					boolean rejectedDocInnerJoin_tXMLMap_25 = false;
					boolean mainRowRejected_tXMLMap_25 = false;
					boolean isMatchDocRowtXMLMap_25 = false;

					GenerateDocument_no500_5d gen_Doc_no500_5d_tXMLMap_25 = new GenerateDocument_no500_5d();
					no500_5d_tmp.body = null;

					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tXMLMap_25__Struct Var = Var__tXMLMap_25;
						// ###############################
						// # Output tables

						no500_5d = null;

						// # Output table : 'no500_5d'

						gen_Doc_no500_5d_tXMLMap_25.generateElements(
								rejectedDocInnerJoin_tXMLMap_25, row38, Var);

						if (no500_5d_tmp.body == null) {
							no500_5d_tmp.body = new routines.system.Document();
							no500_5d_tmp.body
									.setDocument(gen_Doc_no500_5d_tXMLMap_25
											.getDocument());
						}

						no500_5d = no500_5d_tmp;
						no500_5d_save = no500_5d_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tXMLMap_25 = false;

					tos_count_tXMLMap_25++;

					/**
					 * [tXMLMap_25 main ] stop
					 */
					// Start of branch "no500_5d"
					if (no500_5d != null) {

						/**
						 * [tRESTResponse_21 main ] start
						 */

						currentComponent = "tRESTResponse_21";

						java.io.OutputStream outputStream_tRESTResponse_21 = (java.io.OutputStream) globalMap
								.get("restResponseStream");
						boolean responseAlreadySent_tRESTResponse_21 = globalMap
								.containsKey("restResponse");

						if (null == outputStream_tRESTResponse_21
								&& responseAlreadySent_tRESTResponse_21) {
							throw new RuntimeException(
									"Rest response already sent.");
						} else if (!globalMap.containsKey("restRequest")) {
							throw new RuntimeException(
									"Not received rest request yet.");
						} else {
							Integer restProviderStatusCode_tRESTResponse_21 = 500;

							Object restProviderResponse_tRESTResponse_21 = null;
							if (null != no500_5d.body) {
								restProviderResponse_tRESTResponse_21 = no500_5d.body
										.getDocument();
							}

							java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_21 = new java.util.TreeMap<String, String>(
									String.CASE_INSENSITIVE_ORDER);

							java.util.Map<String, Object> restRequest_tRESTResponse_21 = (java.util.Map<String, Object>) globalMap
									.get("restRequest");
							org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_21 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_21
									.get("MESSAGE_CONTEXT");

							if (null == outputStream_tRESTResponse_21) {
								java.util.Map<String, Object> restResponse_tRESTResponse_21 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_21.put("BODY",
										restProviderResponse_tRESTResponse_21);
								restResponse_tRESTResponse_21
										.put("STATUS",
												restProviderStatusCode_tRESTResponse_21);
								restResponse_tRESTResponse_21
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_21);
								restResponse_tRESTResponse_21.put(
										"drop.json.root.element",
										Boolean.valueOf(true));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_21);

							} else {

								javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_21 = null;
								if (!responseAlreadySent_tRESTResponse_21) {
									org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
													true);

									messageContext_tRESTResponse_21
											.put(org.apache.cxf.message.Message.RESPONSE_CODE,
													restProviderStatusCode_tRESTResponse_21);
									javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_21 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
									for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_21
											.entrySet()) {
										headersMultivaluedMap_tRESTResponse_21
												.putSingle(multivaluedHeader
														.getKey(),
														multivaluedHeader
																.getValue());
									}
									messageContext_tRESTResponse_21
											.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
													headersMultivaluedMap_tRESTResponse_21);

									// String
									// responseContentType_tRESTResponse_21 =
									// (String)
									// messageContext_tRESTResponse_21.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									String responseContentType_tRESTResponse_21 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									if (null == responseContentType_tRESTResponse_21) {
										// this should not be needed, just in
										// case. set it to the first value in
										// the sorted list returned from
										// HttpHeaders
										responseMediaType_tRESTResponse_21 = messageContext_tRESTResponse_21
												.getHttpHeaders()
												.getAcceptableMediaTypes()
												.get(0);
									} else {
										responseMediaType_tRESTResponse_21 = org.apache.cxf.jaxrs.utils.JAXRSUtils
												.toMediaType(responseContentType_tRESTResponse_21);
									}
									globalMap.put("restResponseMediaType",
											responseMediaType_tRESTResponse_21);

									String responseMediaSubType_tRESTResponse_21 = responseMediaType_tRESTResponse_21
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_21
											.equals("xml")
											|| responseMediaSubType_tRESTResponse_21
													.endsWith("+xml")) {
										outputStream_tRESTResponse_21
												.write("<wrapper>".getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"</wrapper>");
									}
									if (responseMediaSubType_tRESTResponse_21
											.equals("json")
											|| responseMediaSubType_tRESTResponse_21
													.endsWith("+json")) {
										outputStream_tRESTResponse_21.write("["
												.getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"]");
									}

									globalMap.put("restResponse", true);
								} else {
									responseMediaType_tRESTResponse_21 = (javax.ws.rs.core.MediaType) globalMap
											.get("restResponseMediaType");
								}

								if (null != restProviderResponse_tRESTResponse_21) {
									String responseMediaSubType_tRESTResponse_21 = responseMediaType_tRESTResponse_21
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_21
											.equals("json")
											|| responseMediaSubType_tRESTResponse_21
													.endsWith("+json")) {
										if (globalMap
												.containsKey("restResponseJsonStarted")) {
											outputStream_tRESTResponse_21
													.write(",".getBytes());
										} else {
											globalMap.put(
													"restResponseJsonStarted",
													true);
										}
									}

									Class<? extends Object> responseBodyClass_tRESTResponse_21 = restProviderResponse_tRESTResponse_21
											.getClass();
									javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_21 = messageContext_tRESTResponse_21
											.getProviders();
									javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_21 = messageBodyProviders_tRESTResponse_21
											.getMessageBodyWriter(
													responseBodyClass_tRESTResponse_21,
													responseBodyClass_tRESTResponse_21,
													null,
													responseMediaType_tRESTResponse_21);
									messageBodyWriter_tRESTResponse_21
											.writeTo(
													restProviderResponse_tRESTResponse_21,
													responseBodyClass_tRESTResponse_21,
													responseBodyClass_tRESTResponse_21,
													new java.lang.annotation.Annotation[] {},
													responseMediaType_tRESTResponse_21,
													null,
													outputStream_tRESTResponse_21);
								}
								// initial variant
								// outputStream_tRESTResponse_21.write(String.valueOf(restProviderResponse_tRESTResponse_21).getBytes());
								outputStream_tRESTResponse_21.flush();
							}
						}

						tos_count_tRESTResponse_21++;

						/**
						 * [tRESTResponse_21 main ] stop
						 */

					} // End of branch "no500_5d"

					/**
					 * [tFixedFlowInput_25 end ] start
					 */

					currentComponent = "tFixedFlowInput_25";

				}
				globalMap.put("tFixedFlowInput_25_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_25", true);
				end_Hash.put("tFixedFlowInput_25", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_25 end ] stop
				 */

				/**
				 * [tXMLMap_25 end ] start
				 */

				currentComponent = "tXMLMap_25";

				ok_Hash.put("tXMLMap_25", true);
				end_Hash.put("tXMLMap_25", System.currentTimeMillis());

				/**
				 * [tXMLMap_25 end ] stop
				 */

				/**
				 * [tRESTResponse_21 end ] start
				 */

				currentComponent = "tRESTResponse_21";

				ok_Hash.put("tRESTResponse_21", true);
				end_Hash.put("tRESTResponse_21", System.currentTimeMillis());

				/**
				 * [tRESTResponse_21 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_25 finally ] start
				 */

				currentComponent = "tFixedFlowInput_25";

				/**
				 * [tFixedFlowInput_25 finally ] stop
				 */

				/**
				 * [tXMLMap_25 finally ] start
				 */

				currentComponent = "tXMLMap_25";

				/**
				 * [tXMLMap_25 finally ] stop
				 */

				/**
				 * [tRESTResponse_21 finally ] start
				 */

				currentComponent = "tRESTResponse_21";

				/**
				 * [tRESTResponse_21 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_25_SUBPROCESS_STATE", 1);
	}

	public static class e401_5Struct implements
			routines.system.IPersistableRow<e401_5Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(e401_5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row30Struct implements
			routines.system.IPersistableRow<row30Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String status_code;

		public String getStatus_code() {
			return this.status_code;
		}

		public String status_message;

		public String getStatus_message() {
			return this.status_message;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.status_code = readString(dis);

					this.status_message = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status_code, dos);

				// String

				writeString(this.status_message, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status_code=" + status_code);
			sb.append(",status_message=" + status_message);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_20Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_20_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row30Struct row30 = new row30Struct();
				e401_5Struct e401_5 = new e401_5Struct();

				/**
				 * [tRESTResponse_18 begin ] start
				 */

				ok_Hash.put("tRESTResponse_18", false);
				start_Hash.put("tRESTResponse_18", System.currentTimeMillis());

				currentComponent = "tRESTResponse_18";

				int tos_count_tRESTResponse_18 = 0;

				class BytesLimit65535_tRESTResponse_18 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTResponse_18().limitLog4jByte();

				/**
				 * [tRESTResponse_18 begin ] stop
				 */

				/**
				 * [tXMLMap_22 begin ] start
				 */

				ok_Hash.put("tXMLMap_22", false);
				start_Hash.put("tXMLMap_22", System.currentTimeMillis());

				currentComponent = "tXMLMap_22";

				int tos_count_tXMLMap_22 = 0;

				class BytesLimit65535_tXMLMap_22 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXMLMap_22().limitLog4jByte();

				// ===============================input xml init
				// part===============================
				class XML_API_tXMLMap_22 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}
				class Var__tXMLMap_22__Struct {
				}
				Var__tXMLMap_22__Struct Var__tXMLMap_22 = new Var__tXMLMap_22__Struct();
				// ###############################
				// # Outputs initialization
				e401_5Struct e401_5_tmp = new e401_5Struct();
				e401_5Struct e401_5_save = null;
				// ###############################
				int nb_line_tXMLMap_22 = 0;

				XML_API_tXMLMap_22 xml_api_tXMLMap_22 = new XML_API_tXMLMap_22();

				class GenerateDocument_e401_5 {

					java.util.Map<String, Object> valueMap = null;

					routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
							1);

					org.dom4j.Document doc = null;

					org.dom4j.Element root4Group = null;

					org.dom4j.io.OutputFormat format = null;

					java.util.List<java.util.List<String>> groupbyList = null;
					java.util.List<org.dom4j.Element> groupElementList = null;
					int order = 0;

					boolean isFirst = true;

					boolean needRoot = true;

					String currentValue = null;

					public GenerateDocument_e401_5() {
						// this.treeNodeAPI = treeNodeAPI;

						valueMap = new java.util.HashMap<String, Object>();

						groupbyList = new java.util.ArrayList<java.util.List<String>>();
						groupElementList = new java.util.ArrayList<org.dom4j.Element>();

						doc = org.dom4j.DocumentHelper.createDocument();
						format = org.dom4j.io.OutputFormat.createPrettyPrint();
						format.setTrimText(false);
					}

					public org.dom4j.Document getDocument() {
						generateOk();
						return this.doc;
					}

					// do some work after document has been generated
					private void generateOk() {
						routines.system.NestXMLTool.replaceDefaultNameSpace(
								this.doc.getRootElement(), null);
					}

					// We generate the TreeNode_API object only if there is a
					// document in the main input table.
					void generateElements(boolean isInnerJoin,
							row30Struct row30, Var__tXMLMap_22__Struct Var) {

						/*
						 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
						 * treeNodeAPI; }
						 */

						org.dom4j.Element subTreeRootParent = null;
						// build root xml tree
						if (needRoot) {
							needRoot = false;
							org.dom4j.Element root = null;
							root = org.dom4j.DocumentHelper
									.createElement("root");
							doc.add(root);
							subTreeRootParent = root;
							org.dom4j.Element root_0 = null;
							root_0 = root.addElement("STATUS");
							valueMap.put("root_0", "0");
							if (valueMap.get("root_0") != null) {
								routines.system.NestXMLTool.setText(root_0,
										FormatterUtils.format("0", null));
							}
							org.dom4j.Element root_1 = null;
							root_1 = root.addElement("FILE_ID");
							valueMap.put("root_1", row30.file_id);
							if (valueMap.get("root_1") != null) {
								routines.system.NestXMLTool.setText(root_1,
										FormatterUtils.format(row30.file_id,
												null));
							}
							org.dom4j.Element root_2 = null;
							root_2 = root.addElement("RETURN_CODE");
							valueMap.put("root_2", row30.status_code);
							if (valueMap.get("root_2") != null) {
								routines.system.NestXMLTool.setText(root_2,
										FormatterUtils.format(
												row30.status_code, null));
							}
							org.dom4j.Element root_3 = null;
							root_3 = root.addElement("RETURN_MSG");
							valueMap.put("root_3", row30.status_message);
							if (valueMap.get("root_3") != null) {
								routines.system.NestXMLTool.setText(root_3,
										FormatterUtils.format(
												row30.status_message, null));
							}
							org.dom4j.Element root_4 = null;
							root_4 = root.addElement("CONTENT");
							valueMap.put("root_4", "file_id : " + row30.file_id);
							if (valueMap.get("root_4") != null) {
								routines.system.NestXMLTool.setText(
										root_4,
										FormatterUtils.format("file_id : "
												+ row30.file_id, null));
							}
							org.dom4j.Element root_5 = null;
							root_5 = root.addElement("MID_NO");
							valueMap.put("root_5", context.MID_NO);
							if (valueMap.get("root_5") != null) {
								routines.system.NestXMLTool.setText(root_5,
										FormatterUtils.format(context.MID_NO,
												null));
							}
							root4Group = subTreeRootParent;
						} else {
							subTreeRootParent = root4Group;
						}
						/* build group xml tree */
						boolean isNewElement = false;
						isNewElement = false;
					}
				}

				/**
				 * [tXMLMap_22 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_20 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_20", false);
				start_Hash
						.put("tFixedFlowInput_20", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_20";

				int tos_count_tFixedFlowInput_20 = 0;

				class BytesLimit65535_tFixedFlowInput_20 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_20().limitLog4jByte();

				for (int i_tFixedFlowInput_20 = 0; i_tFixedFlowInput_20 < 1; i_tFixedFlowInput_20++) {

					row30.status_code = "401";

					row30.status_message = "Authenication fail";

					row30.file_id = ((String) globalMap.get("binary1.file_id"));

					/**
					 * [tFixedFlowInput_20 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_20 main ] start
					 */

					currentComponent = "tFixedFlowInput_20";

					tos_count_tFixedFlowInput_20++;

					/**
					 * [tFixedFlowInput_20 main ] stop
					 */

					/**
					 * [tXMLMap_22 main ] start
					 */

					currentComponent = "tXMLMap_22";

					boolean rejectedInnerJoin_tXMLMap_22 = false;
					boolean rejectedDocInnerJoin_tXMLMap_22 = false;
					boolean mainRowRejected_tXMLMap_22 = false;
					boolean isMatchDocRowtXMLMap_22 = false;

					GenerateDocument_e401_5 gen_Doc_e401_5_tXMLMap_22 = new GenerateDocument_e401_5();
					e401_5_tmp.body = null;

					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tXMLMap_22__Struct Var = Var__tXMLMap_22;
						// ###############################
						// # Output tables

						e401_5 = null;

						// # Output table : 'e401_5'

						gen_Doc_e401_5_tXMLMap_22.generateElements(
								rejectedDocInnerJoin_tXMLMap_22, row30, Var);

						if (e401_5_tmp.body == null) {
							e401_5_tmp.body = new routines.system.Document();
							e401_5_tmp.body
									.setDocument(gen_Doc_e401_5_tXMLMap_22
											.getDocument());
						}

						e401_5 = e401_5_tmp;
						e401_5_save = e401_5_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tXMLMap_22 = false;

					tos_count_tXMLMap_22++;

					/**
					 * [tXMLMap_22 main ] stop
					 */
					// Start of branch "e401_5"
					if (e401_5 != null) {

						/**
						 * [tRESTResponse_18 main ] start
						 */

						currentComponent = "tRESTResponse_18";

						java.io.OutputStream outputStream_tRESTResponse_18 = (java.io.OutputStream) globalMap
								.get("restResponseStream");
						boolean responseAlreadySent_tRESTResponse_18 = globalMap
								.containsKey("restResponse");

						if (null == outputStream_tRESTResponse_18
								&& responseAlreadySent_tRESTResponse_18) {
							throw new RuntimeException(
									"Rest response already sent.");
						} else if (!globalMap.containsKey("restRequest")) {
							throw new RuntimeException(
									"Not received rest request yet.");
						} else {
							Integer restProviderStatusCode_tRESTResponse_18 = 401;

							Object restProviderResponse_tRESTResponse_18 = null;
							if (null != e401_5.body) {
								restProviderResponse_tRESTResponse_18 = e401_5.body
										.getDocument();
							}

							java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_18 = new java.util.TreeMap<String, String>(
									String.CASE_INSENSITIVE_ORDER);

							java.util.Map<String, Object> restRequest_tRESTResponse_18 = (java.util.Map<String, Object>) globalMap
									.get("restRequest");
							org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_18 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_18
									.get("MESSAGE_CONTEXT");

							if (null == outputStream_tRESTResponse_18) {
								java.util.Map<String, Object> restResponse_tRESTResponse_18 = new java.util.HashMap<String, Object>();
								restResponse_tRESTResponse_18.put("BODY",
										restProviderResponse_tRESTResponse_18);
								restResponse_tRESTResponse_18
										.put("STATUS",
												restProviderStatusCode_tRESTResponse_18);
								restResponse_tRESTResponse_18
										.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_18);
								restResponse_tRESTResponse_18.put(
										"drop.json.root.element",
										Boolean.valueOf(true));
								globalMap.put("restResponse",
										restResponse_tRESTResponse_18);

							} else {

								javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_18 = null;
								if (!responseAlreadySent_tRESTResponse_18) {
									org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
													true);

									messageContext_tRESTResponse_18
											.put(org.apache.cxf.message.Message.RESPONSE_CODE,
													restProviderStatusCode_tRESTResponse_18);
									javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_18 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
									for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_18
											.entrySet()) {
										headersMultivaluedMap_tRESTResponse_18
												.putSingle(multivaluedHeader
														.getKey(),
														multivaluedHeader
																.getValue());
									}
									messageContext_tRESTResponse_18
											.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
													headersMultivaluedMap_tRESTResponse_18);

									// String
									// responseContentType_tRESTResponse_18 =
									// (String)
									// messageContext_tRESTResponse_18.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									String responseContentType_tRESTResponse_18 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
											.getCurrentMessage()
											.getExchange()
											.get(org.apache.cxf.message.Message.CONTENT_TYPE);
									if (null == responseContentType_tRESTResponse_18) {
										// this should not be needed, just in
										// case. set it to the first value in
										// the sorted list returned from
										// HttpHeaders
										responseMediaType_tRESTResponse_18 = messageContext_tRESTResponse_18
												.getHttpHeaders()
												.getAcceptableMediaTypes()
												.get(0);
									} else {
										responseMediaType_tRESTResponse_18 = org.apache.cxf.jaxrs.utils.JAXRSUtils
												.toMediaType(responseContentType_tRESTResponse_18);
									}
									globalMap.put("restResponseMediaType",
											responseMediaType_tRESTResponse_18);

									String responseMediaSubType_tRESTResponse_18 = responseMediaType_tRESTResponse_18
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_18
											.equals("xml")
											|| responseMediaSubType_tRESTResponse_18
													.endsWith("+xml")) {
										outputStream_tRESTResponse_18
												.write("<wrapper>".getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"</wrapper>");
									}
									if (responseMediaSubType_tRESTResponse_18
											.equals("json")
											|| responseMediaSubType_tRESTResponse_18
													.endsWith("+json")) {
										outputStream_tRESTResponse_18.write("["
												.getBytes());
										globalMap.put(
												"restResponseWrappingClosure",
												"]");
									}

									globalMap.put("restResponse", true);
								} else {
									responseMediaType_tRESTResponse_18 = (javax.ws.rs.core.MediaType) globalMap
											.get("restResponseMediaType");
								}

								if (null != restProviderResponse_tRESTResponse_18) {
									String responseMediaSubType_tRESTResponse_18 = responseMediaType_tRESTResponse_18
											.getSubtype();
									if (responseMediaSubType_tRESTResponse_18
											.equals("json")
											|| responseMediaSubType_tRESTResponse_18
													.endsWith("+json")) {
										if (globalMap
												.containsKey("restResponseJsonStarted")) {
											outputStream_tRESTResponse_18
													.write(",".getBytes());
										} else {
											globalMap.put(
													"restResponseJsonStarted",
													true);
										}
									}

									Class<? extends Object> responseBodyClass_tRESTResponse_18 = restProviderResponse_tRESTResponse_18
											.getClass();
									javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_18 = messageContext_tRESTResponse_18
											.getProviders();
									javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_18 = messageBodyProviders_tRESTResponse_18
											.getMessageBodyWriter(
													responseBodyClass_tRESTResponse_18,
													responseBodyClass_tRESTResponse_18,
													null,
													responseMediaType_tRESTResponse_18);
									messageBodyWriter_tRESTResponse_18
											.writeTo(
													restProviderResponse_tRESTResponse_18,
													responseBodyClass_tRESTResponse_18,
													responseBodyClass_tRESTResponse_18,
													new java.lang.annotation.Annotation[] {},
													responseMediaType_tRESTResponse_18,
													null,
													outputStream_tRESTResponse_18);
								}
								// initial variant
								// outputStream_tRESTResponse_18.write(String.valueOf(restProviderResponse_tRESTResponse_18).getBytes());
								outputStream_tRESTResponse_18.flush();
							}
						}

						tos_count_tRESTResponse_18++;

						/**
						 * [tRESTResponse_18 main ] stop
						 */

					} // End of branch "e401_5"

					/**
					 * [tFixedFlowInput_20 end ] start
					 */

					currentComponent = "tFixedFlowInput_20";

				}
				globalMap.put("tFixedFlowInput_20_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_20", true);
				end_Hash.put("tFixedFlowInput_20", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_20 end ] stop
				 */

				/**
				 * [tXMLMap_22 end ] start
				 */

				currentComponent = "tXMLMap_22";

				ok_Hash.put("tXMLMap_22", true);
				end_Hash.put("tXMLMap_22", System.currentTimeMillis());

				/**
				 * [tXMLMap_22 end ] stop
				 */

				/**
				 * [tRESTResponse_18 end ] start
				 */

				currentComponent = "tRESTResponse_18";

				ok_Hash.put("tRESTResponse_18", true);
				end_Hash.put("tRESTResponse_18", System.currentTimeMillis());

				/**
				 * [tRESTResponse_18 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_20 finally ] start
				 */

				currentComponent = "tFixedFlowInput_20";

				/**
				 * [tFixedFlowInput_20 finally ] stop
				 */

				/**
				 * [tXMLMap_22 finally ] start
				 */

				currentComponent = "tXMLMap_22";

				/**
				 * [tXMLMap_22 finally ] stop
				 */

				/**
				 * [tRESTResponse_18 finally ] start
				 */

				currentComponent = "tRESTResponse_18";

				/**
				 * [tRESTResponse_18 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_20_SUBPROCESS_STATE", 1);
	}

	public static class binary1Struct implements
			routines.system.IPersistableRow<binary1Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String Authorization;

		public String getAuthorization() {
			return this.Authorization;
		}

		public byte[] userfile;

		public byte[] getUserfile() {
			return this.userfile;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		public String grant_system;

		public String getGrant_system() {
			return this.grant_system;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private byte[] readByteArray(ObjectInputStream dis) throws IOException {
			byte[] byteArrayReturn;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				byteArrayReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.readFully(byteArray);
				byteArrayReturn = byteArray;
			}
			return byteArrayReturn;
		}

		private void writeByteArray(byte[] byteArray, ObjectOutputStream dos)
				throws IOException {
			if (byteArray == null) {
				dos.writeInt(-1);
			} else {
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.Authorization = readString(dis);

					this.userfile = readByteArray(dis);

					this.file_id = readString(dis);

					this.grant_system = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Authorization, dos);

				// byte[]

				writeByteArray(this.userfile, dos);

				// String

				writeString(this.file_id, dos);

				// String

				writeString(this.grant_system, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Authorization=" + Authorization);
			sb.append(",userfile=" + String.valueOf(userfile));
			sb.append(",file_id=" + file_id);
			sb.append(",grant_system=" + grant_system);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(binary1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class header1Struct implements
			routines.system.IPersistableRow<header1Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String Authorization;

		public String getAuthorization() {
			return this.Authorization;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.Authorization = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Authorization, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Authorization=" + Authorization);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(header1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class expiring1Struct implements
			routines.system.IPersistableRow<expiring1Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String Authorization;

		public String getAuthorization() {
			return this.Authorization;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.Authorization = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Authorization, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Authorization=" + Authorization);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(expiring1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class retrieve1Struct implements
			routines.system.IPersistableRow<retrieve1Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String Authorization;

		public String getAuthorization() {
			return this.Authorization;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.Authorization = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Authorization, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Authorization=" + Authorization);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(retrieve1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class upload1Struct implements
			routines.system.IPersistableRow<upload1Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String Authorization;

		public String getAuthorization() {
			return this.Authorization;
		}

		public String original_uri;

		public String getOriginal_uri() {
			return this.original_uri;
		}

		public String auth_string;

		public String getAuth_string() {
			return this.auth_string;
		}

		public String grant_system;

		public String getGrant_system() {
			return this.grant_system;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.Authorization = readString(dis);

					this.original_uri = readString(dis);

					this.auth_string = readString(dis);

					this.grant_system = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Authorization, dos);

				// String

				writeString(this.original_uri, dos);

				// String

				writeString(this.auth_string, dos);

				// String

				writeString(this.grant_system, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Authorization=" + Authorization);
			sb.append(",original_uri=" + original_uri);
			sb.append(",auth_string=" + auth_string);
			sb.append(",grant_system=" + grant_system);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(upload1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class stderrStruct implements
			routines.system.IPersistableRow<stderrStruct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(stderrStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class uploadStruct implements
			routines.system.IPersistableRow<uploadStruct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String Authorization;

		public String getAuthorization() {
			return this.Authorization;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.Authorization = readString(dis);

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Authorization, dos);

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Authorization=" + Authorization);
			sb.append(",body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(uploadStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class retrieveStruct implements
			routines.system.IPersistableRow<retrieveStruct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String Authorization;

		public String getAuthorization() {
			return this.Authorization;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.Authorization = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Authorization, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Authorization=" + Authorization);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(retrieveStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class expringStruct implements
			routines.system.IPersistableRow<expringStruct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String Authorization;

		public String getAuthorization() {
			return this.Authorization;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.Authorization = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Authorization, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Authorization=" + Authorization);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(expringStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String uri;

		public String getUri() {
			return this.uri;
		}

		public String method;

		public String getMethod() {
			return this.method;
		}

		public Integer status;

		public Integer getStatus() {
			return this.status;
		}

		public String error;

		public String getError() {
			return this.error;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.uri = readString(dis);

					this.method = readString(dis);

					this.status = readInteger(dis);

					this.error = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.uri, dos);

				// String

				writeString(this.method, dos);

				// Integer

				writeInteger(this.status, dos);

				// String

				writeString(this.error, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("uri=" + uri);
			sb.append(",method=" + method);
			sb.append(",status=" + String.valueOf(status));
			sb.append(",error=" + error);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class headerStruct implements
			routines.system.IPersistableRow<headerStruct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String Authorization;

		public String getAuthorization() {
			return this.Authorization;
		}

		public String file_id;

		public String getFile_id() {
			return this.file_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.Authorization = readString(dis);

					this.file_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Authorization, dos);

				// String

				writeString(this.file_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Authorization=" + Authorization);
			sb.append(",file_id=" + file_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(headerStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class binaryStruct implements
			routines.system.IPersistableRow<binaryStruct> {
		final static byte[] commonByteArrayLock_ESB_MFS_SRV_esb_file_srv = new byte[0];
		static byte[] commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[0];

		public String Authorization;

		public String getAuthorization() {
			return this.Authorization;
		}

		public byte[] userfile;

		public byte[] getUserfile() {
			return this.userfile;
		}

		public String grant_system;

		public String getGrant_system() {
			return this.grant_system;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ESB_MFS_SRV_esb_file_srv.length) {
					if (length < 1024
							&& commonByteArray_ESB_MFS_SRV_esb_file_srv.length == 0) {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[1024];
					} else {
						commonByteArray_ESB_MFS_SRV_esb_file_srv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ESB_MFS_SRV_esb_file_srv, 0,
						length);
				strReturn = new String(
						commonByteArray_ESB_MFS_SRV_esb_file_srv, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private byte[] readByteArray(ObjectInputStream dis) throws IOException {
			byte[] byteArrayReturn;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				byteArrayReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.readFully(byteArray);
				byteArrayReturn = byteArray;
			}
			return byteArrayReturn;
		}

		private void writeByteArray(byte[] byteArray, ObjectOutputStream dos)
				throws IOException {
			if (byteArray == null) {
				dos.writeInt(-1);
			} else {
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ESB_MFS_SRV_esb_file_srv) {

				try {

					int length = 0;

					this.Authorization = readString(dis);

					this.userfile = readByteArray(dis);

					this.grant_system = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Authorization, dos);

				// byte[]

				writeByteArray(this.userfile, dos);

				// String

				writeString(this.grant_system, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Authorization=" + Authorization);
			sb.append(",userfile=" + String.valueOf(userfile));
			sb.append(",grant_system=" + grant_system);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(binaryStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRESTRequest_1_LoopProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				uploadStruct upload = new uploadStruct();
				upload1Struct upload1 = new upload1Struct();
				retrieveStruct retrieve = new retrieveStruct();
				retrieve1Struct retrieve1 = new retrieve1Struct();
				expringStruct expring = new expringStruct();
				expiring1Struct expiring1 = new expiring1Struct();
				row1Struct row1 = new row1Struct();
				stderrStruct stderr = new stderrStruct();
				headerStruct header = new headerStruct();
				header1Struct header1 = new header1Struct();
				binaryStruct binary = new binaryStruct();
				binary1Struct binary1 = new binary1Struct();

				/**
				 * [tRESTRequest_1_Loop begin ] start
				 */

				int NB_ITERATE_tRESTRequest_1_In = 0; // for statistics

				ok_Hash.put("tRESTRequest_1_Loop", false);
				start_Hash.put("tRESTRequest_1_Loop",
						System.currentTimeMillis());

				currentVirtualComponent = "tRESTRequest_1";

				currentComponent = "tRESTRequest_1_Loop";

				int tos_count_tRESTRequest_1_Loop = 0;

				class BytesLimit65535_tRESTRequest_1_Loop {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tRESTRequest_1_Loop().limitLog4jByte();

				binary = null;

				header = null;

				expring = null;

				retrieve = null;

				upload = null;

				row1 = null;

				int nb_line_tRESTRequest_1 = 0;

				try {

					java.util.Map<String, Object> requestMessage_tRESTRequest_1 = (java.util.Map<String, Object>) globalMap
							.get("restRequest");

					if (null == requestMessage_tRESTRequest_1) {

						if (restTalendJobAlreadyStarted) {
							throw new RuntimeException(
									"request is not provided");
						} else {
							if (!runInTalendEsbRuntimeContainer
									&& null == thread4RestServiceProviderEndpoint) {
								String endpointUrl_tRESTRequest_1 = checkEndpointUrl("/mfs/file");
								// *** external thread for endpoint
								// initialization
								thread4RestServiceProviderEndpoint = new Thread4RestServiceProviderEndpoint(
										this, endpointUrl_tRESTRequest_1);
								thread4RestServiceProviderEndpoint.start();
								// *** external thread for endpoint
								// initialization
							}

							restTalendJobAlreadyStarted = true;

							Thread.currentThread();
							try {
								while (true) {
									Thread.sleep(60000);
								}
							} catch (InterruptedException e_tRESTRequest_1) {
								// e_tRESTRequest_1.printStackTrace();
								// throw new TalendException(e_tRESTRequest_1,
								// "wholeJob", globalMap);
							}
						}
						return;
					}

					/**
					 * [tRESTRequest_1_Loop begin ] stop
					 */

					/**
					 * [tRESTRequest_1_Loop main ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_Loop";

					tos_count_tRESTRequest_1_Loop++;

					/**
					 * [tRESTRequest_1_Loop main ] stop
					 */
					NB_ITERATE_tRESTRequest_1_In++;

					/**
					 * [tXMLMap_2_TXMLMAP_OUT begin ] start
					 */

					ok_Hash.put("tXMLMap_2_TXMLMAP_OUT", false);
					start_Hash.put("tXMLMap_2_TXMLMAP_OUT",
							System.currentTimeMillis());

					currentVirtualComponent = "tXMLMap_2";

					currentComponent = "tXMLMap_2_TXMLMAP_OUT";

					int tos_count_tXMLMap_2_TXMLMAP_OUT = 0;

					class BytesLimit65535_tXMLMap_2_TXMLMAP_OUT {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tXMLMap_2_TXMLMAP_OUT()
							.limitLog4jByte();

					// ===============================input xml init
					// part===============================
					class XML_API_tXMLMap_2_TXMLMAP_OUT {
						public boolean isDefNull(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null
									&& node instanceof org.dom4j.Element) {
								org.dom4j.Attribute attri = ((org.dom4j.Element) node)
										.attribute("nil");
								if (attri != null
										&& ("true").equals(attri.getText())) {
									return true;
								}
							}
							return false;
						}

						public boolean isMissing(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							return node == null ? true : false;
						}

						public boolean isEmpty(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null) {
								return node.getText().length() == 0;
							}
							return false;
						}
					}
					class Var__tXMLMap_2_TXMLMAP_OUT__Struct {
					}
					Var__tXMLMap_2_TXMLMAP_OUT__Struct Var__tXMLMap_2_TXMLMAP_OUT = new Var__tXMLMap_2_TXMLMAP_OUT__Struct();
					// ###############################
					// # Outputs initialization
					upload1Struct upload1_tmp = new upload1Struct();
					upload1Struct upload1_save = null;
					// the aggregate variable
					upload1Struct upload1_aggregate = null;
					// init the resultset for aggregate
					java.util.List<Object> allOutsForAggregate_tXMLMap_2 = new java.util.ArrayList<Object>();
					globalMap.put("allOutsForAggregate_tXMLMap_2",
							allOutsForAggregate_tXMLMap_2);
					// ###############################
					class TreeNode_API_tXMLMap_2_TXMLMAP_OUT {
						java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();

						void clear() {
							xpath_value_map.clear();
						}

						void put(String xpath, String value) {
							xpath_value_map.put(xpath, value);
						}

						String get_null(String xpath) {
							return null;
						}

						String get_String(String xpath) {
							return xpath_value_map.get(xpath);
						}
					}
					TreeNode_API_tXMLMap_2_TXMLMAP_OUT treeNodeAPI_tXMLMap_2_TXMLMAP_OUT = new TreeNode_API_tXMLMap_2_TXMLMAP_OUT();
					NameSpaceTool nsTool_tXMLMap_2_TXMLMAP_OUT = new NameSpaceTool();
					int nb_line_tXMLMap_2_TXMLMAP_OUT = 0;

					XML_API_tXMLMap_2_TXMLMAP_OUT xml_api_tXMLMap_2_TXMLMAP_OUT = new XML_API_tXMLMap_2_TXMLMAP_OUT();

					// the map store the previous value of aggregate columns
					java.util.Map<String, Object> aggregateCacheMap_tXMLMap_2_TXMLMAP_OUT = new java.util.HashMap<String, Object>();

					/**
					 * [tXMLMap_2_TXMLMAP_OUT begin ] stop
					 */

					/**
					 * [tFlowToIterate_2 begin ] start
					 */

					ok_Hash.put("tFlowToIterate_2", false);
					start_Hash.put("tFlowToIterate_2",
							System.currentTimeMillis());

					currentComponent = "tFlowToIterate_2";

					int tos_count_tFlowToIterate_2 = 0;

					class BytesLimit65535_tFlowToIterate_2 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tFlowToIterate_2().limitLog4jByte();

					int nb_line_tFlowToIterate_2 = 0;
					int counter_tFlowToIterate_2 = 0;

					/**
					 * [tFlowToIterate_2 begin ] stop
					 */

					/**
					 * [tXMLMap_3 begin ] start
					 */

					ok_Hash.put("tXMLMap_3", false);
					start_Hash.put("tXMLMap_3", System.currentTimeMillis());

					currentComponent = "tXMLMap_3";

					int tos_count_tXMLMap_3 = 0;

					class BytesLimit65535_tXMLMap_3 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tXMLMap_3().limitLog4jByte();

					// ===============================input xml init
					// part===============================
					class XML_API_tXMLMap_3 {
						public boolean isDefNull(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null
									&& node instanceof org.dom4j.Element) {
								org.dom4j.Attribute attri = ((org.dom4j.Element) node)
										.attribute("nil");
								if (attri != null
										&& ("true").equals(attri.getText())) {
									return true;
								}
							}
							return false;
						}

						public boolean isMissing(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							return node == null ? true : false;
						}

						public boolean isEmpty(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null) {
								return node.getText().length() == 0;
							}
							return false;
						}
					}
					class Var__tXMLMap_3__Struct {
					}
					Var__tXMLMap_3__Struct Var__tXMLMap_3 = new Var__tXMLMap_3__Struct();
					// ###############################
					// # Outputs initialization
					retrieve1Struct retrieve1_tmp = new retrieve1Struct();
					retrieve1Struct retrieve1_save = null;
					// ###############################
					int nb_line_tXMLMap_3 = 0;

					XML_API_tXMLMap_3 xml_api_tXMLMap_3 = new XML_API_tXMLMap_3();

					/**
					 * [tXMLMap_3 begin ] stop
					 */

					/**
					 * [tFlowToIterate_3 begin ] start
					 */

					ok_Hash.put("tFlowToIterate_3", false);
					start_Hash.put("tFlowToIterate_3",
							System.currentTimeMillis());

					currentComponent = "tFlowToIterate_3";

					int tos_count_tFlowToIterate_3 = 0;

					class BytesLimit65535_tFlowToIterate_3 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tFlowToIterate_3().limitLog4jByte();

					int nb_line_tFlowToIterate_3 = 0;
					int counter_tFlowToIterate_3 = 0;

					/**
					 * [tFlowToIterate_3 begin ] stop
					 */

					/**
					 * [tXMLMap_4 begin ] start
					 */

					ok_Hash.put("tXMLMap_4", false);
					start_Hash.put("tXMLMap_4", System.currentTimeMillis());

					currentComponent = "tXMLMap_4";

					int tos_count_tXMLMap_4 = 0;

					class BytesLimit65535_tXMLMap_4 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tXMLMap_4().limitLog4jByte();

					// ===============================input xml init
					// part===============================
					class XML_API_tXMLMap_4 {
						public boolean isDefNull(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null
									&& node instanceof org.dom4j.Element) {
								org.dom4j.Attribute attri = ((org.dom4j.Element) node)
										.attribute("nil");
								if (attri != null
										&& ("true").equals(attri.getText())) {
									return true;
								}
							}
							return false;
						}

						public boolean isMissing(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							return node == null ? true : false;
						}

						public boolean isEmpty(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null) {
								return node.getText().length() == 0;
							}
							return false;
						}
					}
					class Var__tXMLMap_4__Struct {
					}
					Var__tXMLMap_4__Struct Var__tXMLMap_4 = new Var__tXMLMap_4__Struct();
					// ###############################
					// # Outputs initialization
					expiring1Struct expiring1_tmp = new expiring1Struct();
					expiring1Struct expiring1_save = null;
					// ###############################
					int nb_line_tXMLMap_4 = 0;

					XML_API_tXMLMap_4 xml_api_tXMLMap_4 = new XML_API_tXMLMap_4();

					/**
					 * [tXMLMap_4 begin ] stop
					 */

					/**
					 * [tRESTResponse_1 begin ] start
					 */

					ok_Hash.put("tRESTResponse_1", false);
					start_Hash.put("tRESTResponse_1",
							System.currentTimeMillis());

					currentComponent = "tRESTResponse_1";

					int tos_count_tRESTResponse_1 = 0;

					class BytesLimit65535_tRESTResponse_1 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tRESTResponse_1().limitLog4jByte();

					/**
					 * [tRESTResponse_1 begin ] stop
					 */

					/**
					 * [tXMLMap_1 begin ] start
					 */

					ok_Hash.put("tXMLMap_1", false);
					start_Hash.put("tXMLMap_1", System.currentTimeMillis());

					currentComponent = "tXMLMap_1";

					int tos_count_tXMLMap_1 = 0;

					class BytesLimit65535_tXMLMap_1 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tXMLMap_1().limitLog4jByte();

					// ===============================input xml init
					// part===============================
					class XML_API_tXMLMap_1 {
						public boolean isDefNull(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null
									&& node instanceof org.dom4j.Element) {
								org.dom4j.Attribute attri = ((org.dom4j.Element) node)
										.attribute("nil");
								if (attri != null
										&& ("true").equals(attri.getText())) {
									return true;
								}
							}
							return false;
						}

						public boolean isMissing(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							return node == null ? true : false;
						}

						public boolean isEmpty(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null) {
								return node.getText().length() == 0;
							}
							return false;
						}
					}
					class Var__tXMLMap_1__Struct {
					}
					Var__tXMLMap_1__Struct Var__tXMLMap_1 = new Var__tXMLMap_1__Struct();
					// ###############################
					// # Outputs initialization
					stderrStruct stderr_tmp = new stderrStruct();
					stderrStruct stderr_save = null;
					// ###############################
					int nb_line_tXMLMap_1 = 0;

					XML_API_tXMLMap_1 xml_api_tXMLMap_1 = new XML_API_tXMLMap_1();

					class GenerateDocument_stderr {

						java.util.Map<String, Object> valueMap = null;

						routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
								1);

						org.dom4j.Document doc = null;

						org.dom4j.Element root4Group = null;

						org.dom4j.io.OutputFormat format = null;

						java.util.List<java.util.List<String>> groupbyList = null;
						java.util.List<org.dom4j.Element> groupElementList = null;
						int order = 0;

						boolean isFirst = true;

						boolean needRoot = true;

						String currentValue = null;

						public GenerateDocument_stderr() {
							// this.treeNodeAPI = treeNodeAPI;

							valueMap = new java.util.HashMap<String, Object>();

							groupbyList = new java.util.ArrayList<java.util.List<String>>();
							groupElementList = new java.util.ArrayList<org.dom4j.Element>();

							doc = org.dom4j.DocumentHelper.createDocument();
							format = org.dom4j.io.OutputFormat
									.createPrettyPrint();
							format.setTrimText(false);
						}

						public org.dom4j.Document getDocument() {
							generateOk();
							return this.doc;
						}

						// do some work after document has been generated
						private void generateOk() {
							routines.system.NestXMLTool
									.replaceDefaultNameSpace(
											this.doc.getRootElement(), null);
						}

						// We generate the TreeNode_API object only if there is
						// a document in the main input table.
						void generateElements(boolean isInnerJoin,
								row1Struct row1, Var__tXMLMap_1__Struct Var) {

							/*
							 * if(this.treeNodeAPI==null) { this.treeNodeAPI =
							 * treeNodeAPI; }
							 */

							org.dom4j.Element subTreeRootParent = null;
							// build root xml tree
							if (needRoot) {
								needRoot = false;
								org.dom4j.Element root = null;
								root = org.dom4j.DocumentHelper
										.createElement("root");
								doc.add(root);
								subTreeRootParent = root;
								org.dom4j.Element root_0 = null;
								root_0 = root.addElement("STATUS");
								valueMap.put("root_0", "0");
								if (valueMap.get("root_0") != null) {
									routines.system.NestXMLTool.setText(root_0,
											FormatterUtils.format("0", null));
								}
								org.dom4j.Element root_1 = null;
								root_1 = root.addElement("FILE_ID");
								valueMap.put("root_1", "");
								if (valueMap.get("root_1") != null) {
									routines.system.NestXMLTool.setText(root_1,
											FormatterUtils.format("", null));
								}
								org.dom4j.Element root_2 = null;
								root_2 = root.addElement("ORIGINAL_URI");
								valueMap.put("root_2", "");
								if (valueMap.get("root_2") != null) {
									routines.system.NestXMLTool.setText(root_2,
											FormatterUtils.format("", null));
								}
								org.dom4j.Element root_3 = null;
								root_3 = root.addElement("ERROR_CODE");
								valueMap.put("root_3", row1.status);
								if (valueMap.get("root_3") != null) {
									routines.system.NestXMLTool.setText(root_3,
											FormatterUtils.format(row1.status,
													null));
								}
								org.dom4j.Element root_4 = null;
								root_4 = root.addElement("ERROR_MSG");
								valueMap.put("root_4", "request uri: "
										+ row1.uri + ", method: " + row1.method
										+ ", error: " + row1.error);
								if (valueMap.get("root_4") != null) {
									routines.system.NestXMLTool
											.setText(root_4, FormatterUtils
													.format("request uri: "
															+ row1.uri
															+ ", method: "
															+ row1.method
															+ ", error: "
															+ row1.error, null));
								}
								org.dom4j.Element root_5 = null;
								root_5 = root.addElement("CONTENT");
								valueMap.put("root_5", "");
								if (valueMap.get("root_5") != null) {
									routines.system.NestXMLTool.setText(root_5,
											FormatterUtils.format("", null));
								}
								org.dom4j.Element root_6 = null;
								root_6 = root.addElement("MID_NO");
								valueMap.put("root_6", context.MID_NO);
								if (valueMap.get("root_6") != null) {
									routines.system.NestXMLTool.setText(root_6,
											FormatterUtils.format(
													context.MID_NO, null));
								}
								root4Group = subTreeRootParent;
							} else {
								subTreeRootParent = root4Group;
							}
							/* build group xml tree */
							boolean isNewElement = false;
							isNewElement = false;
						}
					}

					/**
					 * [tXMLMap_1 begin ] stop
					 */

					/**
					 * [tFlowToIterate_11 begin ] start
					 */

					ok_Hash.put("tFlowToIterate_11", false);
					start_Hash.put("tFlowToIterate_11",
							System.currentTimeMillis());

					currentComponent = "tFlowToIterate_11";

					int tos_count_tFlowToIterate_11 = 0;

					class BytesLimit65535_tFlowToIterate_11 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tFlowToIterate_11().limitLog4jByte();

					int nb_line_tFlowToIterate_11 = 0;
					int counter_tFlowToIterate_11 = 0;

					/**
					 * [tFlowToIterate_11 begin ] stop
					 */

					/**
					 * [tXMLMap_16 begin ] start
					 */

					ok_Hash.put("tXMLMap_16", false);
					start_Hash.put("tXMLMap_16", System.currentTimeMillis());

					currentComponent = "tXMLMap_16";

					int tos_count_tXMLMap_16 = 0;

					class BytesLimit65535_tXMLMap_16 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tXMLMap_16().limitLog4jByte();

					// ===============================input xml init
					// part===============================
					class XML_API_tXMLMap_16 {
						public boolean isDefNull(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null
									&& node instanceof org.dom4j.Element) {
								org.dom4j.Attribute attri = ((org.dom4j.Element) node)
										.attribute("nil");
								if (attri != null
										&& ("true").equals(attri.getText())) {
									return true;
								}
							}
							return false;
						}

						public boolean isMissing(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							return node == null ? true : false;
						}

						public boolean isEmpty(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null) {
								return node.getText().length() == 0;
							}
							return false;
						}
					}
					class Var__tXMLMap_16__Struct {
					}
					Var__tXMLMap_16__Struct Var__tXMLMap_16 = new Var__tXMLMap_16__Struct();
					// ###############################
					// # Outputs initialization
					header1Struct header1_tmp = new header1Struct();
					header1Struct header1_save = null;
					// ###############################
					int nb_line_tXMLMap_16 = 0;

					XML_API_tXMLMap_16 xml_api_tXMLMap_16 = new XML_API_tXMLMap_16();

					/**
					 * [tXMLMap_16 begin ] stop
					 */

					/**
					 * [tFlowToIterate_16 begin ] start
					 */

					ok_Hash.put("tFlowToIterate_16", false);
					start_Hash.put("tFlowToIterate_16",
							System.currentTimeMillis());

					currentComponent = "tFlowToIterate_16";

					int tos_count_tFlowToIterate_16 = 0;

					class BytesLimit65535_tFlowToIterate_16 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tFlowToIterate_16().limitLog4jByte();

					int nb_line_tFlowToIterate_16 = 0;
					int counter_tFlowToIterate_16 = 0;

					/**
					 * [tFlowToIterate_16 begin ] stop
					 */

					/**
					 * [tXMLMap_21 begin ] start
					 */

					ok_Hash.put("tXMLMap_21", false);
					start_Hash.put("tXMLMap_21", System.currentTimeMillis());

					currentComponent = "tXMLMap_21";

					int tos_count_tXMLMap_21 = 0;

					class BytesLimit65535_tXMLMap_21 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tXMLMap_21().limitLog4jByte();

					// ===============================input xml init
					// part===============================
					class XML_API_tXMLMap_21 {
						public boolean isDefNull(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null
									&& node instanceof org.dom4j.Element) {
								org.dom4j.Attribute attri = ((org.dom4j.Element) node)
										.attribute("nil");
								if (attri != null
										&& ("true").equals(attri.getText())) {
									return true;
								}
							}
							return false;
						}

						public boolean isMissing(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							return node == null ? true : false;
						}

						public boolean isEmpty(org.dom4j.Node node)
								throws javax.xml.transform.TransformerException {
							if (node != null) {
								return node.getText().length() == 0;
							}
							return false;
						}
					}
					class Var__tXMLMap_21__Struct {
					}
					Var__tXMLMap_21__Struct Var__tXMLMap_21 = new Var__tXMLMap_21__Struct();
					// ###############################
					// # Outputs initialization
					binary1Struct binary1_tmp = new binary1Struct();
					binary1Struct binary1_save = null;
					// ###############################
					int nb_line_tXMLMap_21 = 0;

					XML_API_tXMLMap_21 xml_api_tXMLMap_21 = new XML_API_tXMLMap_21();

					/**
					 * [tXMLMap_21 begin ] stop
					 */

					/**
					 * [tRESTRequest_1_In begin ] start
					 */

					ok_Hash.put("tRESTRequest_1_In", false);
					start_Hash.put("tRESTRequest_1_In",
							System.currentTimeMillis());

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					int tos_count_tRESTRequest_1_In = 0;

					class BytesLimit65535_tRESTRequest_1_In {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tRESTRequest_1_In().limitLog4jByte();

					/**
					 * [tRESTRequest_1_In begin ] stop
					 */

					/**
					 * [tRESTRequest_1_In main ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					if (requestMessage_tRESTRequest_1.containsKey("ERROR")) { // wrong
																				// request
																				// received
						binary = null;
						header = null;
						expring = null;
						retrieve = null;
						upload = null;
						String wrongCallUri_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1
								.get("URI");
						String wrongCallMethod_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1
								.get("VERB");
						String wrongCallError_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1
								.get("ERROR");
						int wrongCallStatus_tRESTRequest_1 = (Integer) requestMessage_tRESTRequest_1
								.get("STATUS");

						row1 = new row1Struct();
						row1.uri = wrongCallUri_tRESTRequest_1;
						row1.method = wrongCallMethod_tRESTRequest_1;
						row1.error = wrongCallError_tRESTRequest_1;
						row1.status = wrongCallStatus_tRESTRequest_1;
					} else { // non-error (not wrong request)

						String matchedUriPattern_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1
								.get("PATTERN");
						String matchedFlow_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1
								.get("OPERATION");

						java.util.Map<String, Object> params_tRESTRequest_1 = (java.util.Map<String, Object>) requestMessage_tRESTRequest_1
								.get("PARAMS");
						if (matchedFlow_tRESTRequest_1.equals("binary")) {
							binary = new binaryStruct();
							if (params_tRESTRequest_1
									.containsKey("HEADER:Authorization:id_String")) {

								binary.Authorization = (String) params_tRESTRequest_1
										.get("HEADER:Authorization:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("MULTIPART:userfile:id_byte[]")) {

								binary.userfile = (byte[]) params_tRESTRequest_1
										.get("MULTIPART:userfile:id_byte[]");

							}
							if (params_tRESTRequest_1
									.containsKey("MULTIPART:grant_system:id_String")) {

								binary.grant_system = (String) params_tRESTRequest_1
										.get("MULTIPART:grant_system:id_String");

							}
						} else { // non matched flow
							binary = null;
						}

						if (matchedFlow_tRESTRequest_1.equals("header")) {
							header = new headerStruct();
							if (params_tRESTRequest_1
									.containsKey("HEADER:Authorization:id_String")) {

								header.Authorization = (String) params_tRESTRequest_1
										.get("HEADER:Authorization:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:file_id:id_String")) {

								header.file_id = (String) params_tRESTRequest_1
										.get("PATH:file_id:id_String");

							}
						} else { // non matched flow
							header = null;
						}

						if (matchedFlow_tRESTRequest_1.equals("expring")) {
							expring = new expringStruct();
							if (params_tRESTRequest_1
									.containsKey("HEADER:Authorization:id_String")) {

								expring.Authorization = (String) params_tRESTRequest_1
										.get("HEADER:Authorization:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:file_id:id_String")) {

								expring.file_id = (String) params_tRESTRequest_1
										.get("PATH:file_id:id_String");

							}
						} else { // non matched flow
							expring = null;
						}

						if (matchedFlow_tRESTRequest_1.equals("retrieve")) {
							retrieve = new retrieveStruct();
							if (params_tRESTRequest_1
									.containsKey("HEADER:Authorization:id_String")) {

								retrieve.Authorization = (String) params_tRESTRequest_1
										.get("HEADER:Authorization:id_String");

							}
							if (params_tRESTRequest_1
									.containsKey("PATH:file_id:id_String")) {

								retrieve.file_id = (String) params_tRESTRequest_1
										.get("PATH:file_id:id_String");

							}
						} else { // non matched flow
							retrieve = null;
						}

						if (matchedFlow_tRESTRequest_1.equals("upload")) {
							upload = new uploadStruct();
							if (params_tRESTRequest_1
									.containsKey("HEADER:Authorization:id_String")) {

								upload.Authorization = (String) params_tRESTRequest_1
										.get("HEADER:Authorization:id_String");

							}
							Object bodyObject_tRESTRequest_1 = requestMessage_tRESTRequest_1
									.get("BODY");
							if (null != bodyObject_tRESTRequest_1) {

								routines.system.Document body_tRESTRequest_1 = new routines.system.Document();
								body_tRESTRequest_1
										.setDocument((org.dom4j.Document) bodyObject_tRESTRequest_1);
								upload.body = body_tRESTRequest_1;

							}
						} else { // non matched flow
							upload = null;
						}

						row1 = null;
					}

					globalMap.put("tRESTRequest_1_URI",
							(String) requestMessage_tRESTRequest_1.get("URI"));
					globalMap.put("tRESTRequest_1_URI_BASE",
							(String) requestMessage_tRESTRequest_1
									.get("URI_BASE"));
					globalMap.put("tRESTRequest_1_URI_ABSOLUTE",
							(String) requestMessage_tRESTRequest_1
									.get("URI_ABSOLUTE"));
					globalMap.put("tRESTRequest_1_URI_REQUEST",
							(String) requestMessage_tRESTRequest_1
									.get("URI_REQUEST"));
					globalMap.put("tRESTRequest_1_HTTP_METHOD",
							(String) requestMessage_tRESTRequest_1.get("VERB"));

					globalMap.put("tRESTRequest_1_ATTACHMENT_HEADERS",
							requestMessage_tRESTRequest_1
									.get("ATTACHMENT_HEADERS"));
					globalMap.put("tRESTRequest_1_ATTACHMENT_FILENAMES",
							requestMessage_tRESTRequest_1
									.get("ATTACHMENT_FILENAMES"));

					globalMap.put("tRESTRequest_1_PRINCIPAL_NAME",
							(String) requestMessage_tRESTRequest_1
									.get("PRINCIPAL_NAME"));
					globalMap.put("tRESTRequest_1_CORRELATION_ID",
							(String) requestMessage_tRESTRequest_1
									.get("CorrelationID"));

					tos_count_tRESTRequest_1_In++;

					/**
					 * [tRESTRequest_1_In main ] stop
					 */
					// Start of branch "upload"
					if (upload != null) {

						/**
						 * [tXMLMap_2_TXMLMAP_OUT main ] start
						 */

						currentVirtualComponent = "tXMLMap_2";

						currentComponent = "tXMLMap_2_TXMLMAP_OUT";

						boolean rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
						boolean rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
						boolean mainRowRejected_tXMLMap_2_TXMLMAP_OUT = false;
						boolean isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;

						// init document to flat tool
						routines.system.DocumentToFlat docToFlat_tXMLMap_2_TXMLMAP_OUT = new routines.system.DocumentToFlat();
						docToFlat_tXMLMap_2_TXMLMAP_OUT
								.setOriginalLoop("/root");
						docToFlat_tXMLMap_2_TXMLMAP_OUT.setIsOptional(false);
						if (upload.body == null
								|| upload.body.getDocument() == null) {
							throw new RuntimeException(
									"upload.body can't be empty");
						}
						org.dom4j.Document doc_tXMLMap_2_TXMLMAP_OUT = upload.body
								.getDocument();
						docToFlat_tXMLMap_2_TXMLMAP_OUT
								.setDoc(doc_tXMLMap_2_TXMLMAP_OUT);
						docToFlat_tXMLMap_2_TXMLMAP_OUT.setDefineNS(false);
						docToFlat_tXMLMap_2_TXMLMAP_OUT
								.setNamespaceTool(nsTool_tXMLMap_2_TXMLMAP_OUT);

						// old version, find NS from doc
						nsTool_tXMLMap_2_TXMLMAP_OUT
								.countNSMap(doc_tXMLMap_2_TXMLMAP_OUT
										.getRootElement());
						java.util.HashMap<String, String> xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT = nsTool_tXMLMap_2_TXMLMAP_OUT.xmlNameSpaceMap;

						docToFlat_tXMLMap_2_TXMLMAP_OUT
								.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT);

						String[] absolutePathMappings_tXMLMap_2_TXMLMAP_OUT = new String[3];
						String[] relativePathMappings_tXMLMap_2_TXMLMAP_OUT = new String[3];

						absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[0] = "upload.body:/root/original_uri";
						relativePathMappings_tXMLMap_2_TXMLMAP_OUT[0] = "original_uri";

						absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[1] = "upload.body:/root/grant_system";
						relativePathMappings_tXMLMap_2_TXMLMAP_OUT[1] = "grant_system";

						absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[2] = "upload.body:/root/auth_string";
						relativePathMappings_tXMLMap_2_TXMLMAP_OUT[2] = "auth_string";

						docToFlat_tXMLMap_2_TXMLMAP_OUT
								.setAbsolutePathMappings(absolutePathMappings_tXMLMap_2_TXMLMAP_OUT);
						docToFlat_tXMLMap_2_TXMLMAP_OUT
								.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_2_TXMLMAP_OUT);
						// generate document to flat data
						docToFlat_tXMLMap_2_TXMLMAP_OUT.flat();
						// get flat data
						java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_2_TXMLMAP_OUT = docToFlat_tXMLMap_2_TXMLMAP_OUT
								.getResultSet();

						for (java.util.Map<String, String> oneRow_tXMLMap_2_TXMLMAP_OUT : resultSet_tXMLMap_2_TXMLMAP_OUT) { // G_TXM_M_001
							nb_line_tXMLMap_2_TXMLMAP_OUT++;
							rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
							rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
							mainRowRejected_tXMLMap_2_TXMLMAP_OUT = false;
							isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;

							treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.clear();
							for (java.util.Map.Entry<String, String> entry_tXMLMap_2_TXMLMAP_OUT : oneRow_tXMLMap_2_TXMLMAP_OUT
									.entrySet()) {
								treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.put(
										entry_tXMLMap_2_TXMLMAP_OUT.getKey(),
										entry_tXMLMap_2_TXMLMAP_OUT.getValue());
							}

							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tXMLMap_2_TXMLMAP_OUT__Struct Var = Var__tXMLMap_2_TXMLMAP_OUT;
								// ###############################
								// # Output tables

								upload1 = null;

								// # Output table : 'upload1'

								upload1_tmp = new upload1Struct();
								upload1_tmp.Authorization = upload.Authorization;
								upload1_tmp.original_uri = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
										.get_String("upload.body:/root/original_uri");
								upload1_tmp.auth_string = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
										.get_String("upload.body:/root/auth_string");
								upload1_tmp.grant_system = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT
										.get_String("upload.body:/root/grant_system");
								upload1_tmp.file_id = java.util.UUID
										.randomUUID().toString();
								allOutsForAggregate_tXMLMap_2.add(upload1_tmp);

								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;

						}// G_TXM_M_001 close

						tos_count_tXMLMap_2_TXMLMAP_OUT++;

						/**
						 * [tXMLMap_2_TXMLMAP_OUT main ] stop
						 */

					} // End of branch "upload"

					// Start of branch "retrieve"
					if (retrieve != null) {

						/**
						 * [tXMLMap_3 main ] start
						 */

						currentComponent = "tXMLMap_3";

						boolean rejectedInnerJoin_tXMLMap_3 = false;
						boolean rejectedDocInnerJoin_tXMLMap_3 = false;
						boolean mainRowRejected_tXMLMap_3 = false;
						boolean isMatchDocRowtXMLMap_3 = false;

						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tXMLMap_3__Struct Var = Var__tXMLMap_3;
							// ###############################
							// # Output tables

							retrieve1 = null;

							// # Output table : 'retrieve1'
							retrieve1_tmp.Authorization = retrieve.Authorization;
							retrieve1_tmp.file_id = retrieve.file_id;
							retrieve1 = retrieve1_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tXMLMap_3 = false;

						tos_count_tXMLMap_3++;

						/**
						 * [tXMLMap_3 main ] stop
						 */
						// Start of branch "retrieve1"
						if (retrieve1 != null) {

							/**
							 * [tFlowToIterate_2 main ] start
							 */

							currentComponent = "tFlowToIterate_2";

							globalMap.put("retrieve1.Authorization",
									retrieve1.Authorization);

							globalMap.put("retrieve1.file_id",
									retrieve1.file_id);

							nb_line_tFlowToIterate_2++;
							counter_tFlowToIterate_2++;
							globalMap.put("tFlowToIterate_2_CURRENT_ITERATION",
									counter_tFlowToIterate_2);

							tos_count_tFlowToIterate_2++;

							/**
							 * [tFlowToIterate_2 main ] stop
							 */

						} // End of branch "retrieve1"

					} // End of branch "retrieve"

					// Start of branch "expring"
					if (expring != null) {

						/**
						 * [tXMLMap_4 main ] start
						 */

						currentComponent = "tXMLMap_4";

						boolean rejectedInnerJoin_tXMLMap_4 = false;
						boolean rejectedDocInnerJoin_tXMLMap_4 = false;
						boolean mainRowRejected_tXMLMap_4 = false;
						boolean isMatchDocRowtXMLMap_4 = false;

						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tXMLMap_4__Struct Var = Var__tXMLMap_4;
							// ###############################
							// # Output tables

							expiring1 = null;

							// # Output table : 'expiring1'
							expiring1_tmp.Authorization = expring.Authorization;
							expiring1_tmp.file_id = expring.file_id;
							expiring1 = expiring1_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tXMLMap_4 = false;

						tos_count_tXMLMap_4++;

						/**
						 * [tXMLMap_4 main ] stop
						 */
						// Start of branch "expiring1"
						if (expiring1 != null) {

							/**
							 * [tFlowToIterate_3 main ] start
							 */

							currentComponent = "tFlowToIterate_3";

							globalMap.put("expiring1.Authorization",
									expiring1.Authorization);

							globalMap.put("expiring1.file_id",
									expiring1.file_id);

							nb_line_tFlowToIterate_3++;
							counter_tFlowToIterate_3++;
							globalMap.put("tFlowToIterate_3_CURRENT_ITERATION",
									counter_tFlowToIterate_3);

							tos_count_tFlowToIterate_3++;

							/**
							 * [tFlowToIterate_3 main ] stop
							 */

						} // End of branch "expiring1"

					} // End of branch "expring"

					// Start of branch "row1"
					if (row1 != null) {

						/**
						 * [tXMLMap_1 main ] start
						 */

						currentComponent = "tXMLMap_1";

						boolean rejectedInnerJoin_tXMLMap_1 = false;
						boolean rejectedDocInnerJoin_tXMLMap_1 = false;
						boolean mainRowRejected_tXMLMap_1 = false;
						boolean isMatchDocRowtXMLMap_1 = false;

						GenerateDocument_stderr gen_Doc_stderr_tXMLMap_1 = new GenerateDocument_stderr();
						stderr_tmp.body = null;

						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tXMLMap_1__Struct Var = Var__tXMLMap_1;
							// ###############################
							// # Output tables

							stderr = null;

							// # Output table : 'stderr'

							gen_Doc_stderr_tXMLMap_1.generateElements(
									rejectedDocInnerJoin_tXMLMap_1, row1, Var);

							if (stderr_tmp.body == null) {
								stderr_tmp.body = new routines.system.Document();
								stderr_tmp.body
										.setDocument(gen_Doc_stderr_tXMLMap_1
												.getDocument());
							}

							stderr = stderr_tmp;
							stderr_save = stderr_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tXMLMap_1 = false;

						tos_count_tXMLMap_1++;

						/**
						 * [tXMLMap_1 main ] stop
						 */
						// Start of branch "stderr"
						if (stderr != null) {

							/**
							 * [tRESTResponse_1 main ] start
							 */

							currentComponent = "tRESTResponse_1";

							java.io.OutputStream outputStream_tRESTResponse_1 = (java.io.OutputStream) globalMap
									.get("restResponseStream");
							boolean responseAlreadySent_tRESTResponse_1 = globalMap
									.containsKey("restResponse");

							if (null == outputStream_tRESTResponse_1
									&& responseAlreadySent_tRESTResponse_1) {
								throw new RuntimeException(
										"Rest response already sent.");
							} else if (!globalMap.containsKey("restRequest")) {
								throw new RuntimeException(
										"Not received rest request yet.");
							} else {
								Integer restProviderStatusCode_tRESTResponse_1 = 400;

								Object restProviderResponse_tRESTResponse_1 = null;
								if (null != stderr.body) {
									restProviderResponse_tRESTResponse_1 = stderr.body
											.getDocument();
								}

								java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_1 = new java.util.TreeMap<String, String>(
										String.CASE_INSENSITIVE_ORDER);

								java.util.Map<String, Object> restRequest_tRESTResponse_1 = (java.util.Map<String, Object>) globalMap
										.get("restRequest");
								org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_1 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_1
										.get("MESSAGE_CONTEXT");

								if (null == outputStream_tRESTResponse_1) {
									java.util.Map<String, Object> restResponse_tRESTResponse_1 = new java.util.HashMap<String, Object>();
									restResponse_tRESTResponse_1
											.put("BODY",
													restProviderResponse_tRESTResponse_1);
									restResponse_tRESTResponse_1
											.put("STATUS",
													restProviderStatusCode_tRESTResponse_1);
									restResponse_tRESTResponse_1
											.put("HEADERS",
													restProviderResponseHeaders_tRESTResponse_1);
									restResponse_tRESTResponse_1.put(
											"drop.json.root.element",
											Boolean.valueOf(false));
									globalMap.put("restResponse",
											restResponse_tRESTResponse_1);

								} else {

									javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_1 = null;
									if (!responseAlreadySent_tRESTResponse_1) {
										org.apache.cxf.jaxrs.utils.JAXRSUtils
												.getCurrentMessage()
												.getExchange()
												.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION,
														true);

										messageContext_tRESTResponse_1
												.put(org.apache.cxf.message.Message.RESPONSE_CODE,
														restProviderStatusCode_tRESTResponse_1);
										javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_1 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
										for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_1
												.entrySet()) {
											headersMultivaluedMap_tRESTResponse_1
													.putSingle(
															multivaluedHeader
																	.getKey(),
															multivaluedHeader
																	.getValue());
										}
										messageContext_tRESTResponse_1
												.put(org.apache.cxf.message.Message.PROTOCOL_HEADERS,
														headersMultivaluedMap_tRESTResponse_1);

										// String
										// responseContentType_tRESTResponse_1 =
										// (String)
										// messageContext_tRESTResponse_1.get(org.apache.cxf.message.Message.CONTENT_TYPE);
										String responseContentType_tRESTResponse_1 = (String) org.apache.cxf.jaxrs.utils.JAXRSUtils
												.getCurrentMessage()
												.getExchange()
												.get(org.apache.cxf.message.Message.CONTENT_TYPE);
										if (null == responseContentType_tRESTResponse_1) {
											// this should not be needed, just
											// in case. set it to the first
											// value in the sorted list returned
											// from HttpHeaders
											responseMediaType_tRESTResponse_1 = messageContext_tRESTResponse_1
													.getHttpHeaders()
													.getAcceptableMediaTypes()
													.get(0);
										} else {
											responseMediaType_tRESTResponse_1 = org.apache.cxf.jaxrs.utils.JAXRSUtils
													.toMediaType(responseContentType_tRESTResponse_1);
										}
										globalMap
												.put("restResponseMediaType",
														responseMediaType_tRESTResponse_1);

										String responseMediaSubType_tRESTResponse_1 = responseMediaType_tRESTResponse_1
												.getSubtype();
										if (responseMediaSubType_tRESTResponse_1
												.equals("xml")
												|| responseMediaSubType_tRESTResponse_1
														.endsWith("+xml")) {
											outputStream_tRESTResponse_1
													.write("<wrapper>"
															.getBytes());
											globalMap
													.put("restResponseWrappingClosure",
															"</wrapper>");
										}
										if (responseMediaSubType_tRESTResponse_1
												.equals("json")
												|| responseMediaSubType_tRESTResponse_1
														.endsWith("+json")) {
											outputStream_tRESTResponse_1
													.write("[".getBytes());
											globalMap
													.put("restResponseWrappingClosure",
															"]");
										}

										globalMap.put("restResponse", true);
									} else {
										responseMediaType_tRESTResponse_1 = (javax.ws.rs.core.MediaType) globalMap
												.get("restResponseMediaType");
									}

									if (null != restProviderResponse_tRESTResponse_1) {
										String responseMediaSubType_tRESTResponse_1 = responseMediaType_tRESTResponse_1
												.getSubtype();
										if (responseMediaSubType_tRESTResponse_1
												.equals("json")
												|| responseMediaSubType_tRESTResponse_1
														.endsWith("+json")) {
											if (globalMap
													.containsKey("restResponseJsonStarted")) {
												outputStream_tRESTResponse_1
														.write(",".getBytes());
											} else {
												globalMap
														.put("restResponseJsonStarted",
																true);
											}
										}

										Class<? extends Object> responseBodyClass_tRESTResponse_1 = restProviderResponse_tRESTResponse_1
												.getClass();
										javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_1 = messageContext_tRESTResponse_1
												.getProviders();
										javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_1 = messageBodyProviders_tRESTResponse_1
												.getMessageBodyWriter(
														responseBodyClass_tRESTResponse_1,
														responseBodyClass_tRESTResponse_1,
														null,
														responseMediaType_tRESTResponse_1);
										messageBodyWriter_tRESTResponse_1
												.writeTo(
														restProviderResponse_tRESTResponse_1,
														responseBodyClass_tRESTResponse_1,
														responseBodyClass_tRESTResponse_1,
														new java.lang.annotation.Annotation[] {},
														responseMediaType_tRESTResponse_1,
														null,
														outputStream_tRESTResponse_1);
									}
									// initial variant
									// outputStream_tRESTResponse_1.write(String.valueOf(restProviderResponse_tRESTResponse_1).getBytes());
									outputStream_tRESTResponse_1.flush();
								}
							}

							tos_count_tRESTResponse_1++;

							/**
							 * [tRESTResponse_1 main ] stop
							 */

						} // End of branch "stderr"

					} // End of branch "row1"

					// Start of branch "header"
					if (header != null) {

						/**
						 * [tXMLMap_16 main ] start
						 */

						currentComponent = "tXMLMap_16";

						boolean rejectedInnerJoin_tXMLMap_16 = false;
						boolean rejectedDocInnerJoin_tXMLMap_16 = false;
						boolean mainRowRejected_tXMLMap_16 = false;
						boolean isMatchDocRowtXMLMap_16 = false;

						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tXMLMap_16__Struct Var = Var__tXMLMap_16;
							// ###############################
							// # Output tables

							header1 = null;

							// # Output table : 'header1'
							header1_tmp.Authorization = header.Authorization;
							header1_tmp.file_id = header.file_id;
							header1 = header1_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tXMLMap_16 = false;

						tos_count_tXMLMap_16++;

						/**
						 * [tXMLMap_16 main ] stop
						 */
						// Start of branch "header1"
						if (header1 != null) {

							/**
							 * [tFlowToIterate_11 main ] start
							 */

							currentComponent = "tFlowToIterate_11";

							globalMap.put("header1.Authorization",
									header1.Authorization);

							globalMap.put("header1.file_id", header1.file_id);

							nb_line_tFlowToIterate_11++;
							counter_tFlowToIterate_11++;
							globalMap.put(
									"tFlowToIterate_11_CURRENT_ITERATION",
									counter_tFlowToIterate_11);

							tos_count_tFlowToIterate_11++;

							/**
							 * [tFlowToIterate_11 main ] stop
							 */

						} // End of branch "header1"

					} // End of branch "header"

					// Start of branch "binary"
					if (binary != null) {

						/**
						 * [tXMLMap_21 main ] start
						 */

						currentComponent = "tXMLMap_21";

						boolean rejectedInnerJoin_tXMLMap_21 = false;
						boolean rejectedDocInnerJoin_tXMLMap_21 = false;
						boolean mainRowRejected_tXMLMap_21 = false;
						boolean isMatchDocRowtXMLMap_21 = false;

						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tXMLMap_21__Struct Var = Var__tXMLMap_21;
							// ###############################
							// # Output tables

							binary1 = null;

							// # Output table : 'binary1'
							binary1_tmp.Authorization = binary.Authorization;
							binary1_tmp.userfile = binary.userfile;
							binary1_tmp.file_id = java.util.UUID.randomUUID()
									.toString();
							binary1_tmp.grant_system = binary.grant_system;
							binary1 = binary1_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tXMLMap_21 = false;

						tos_count_tXMLMap_21++;

						/**
						 * [tXMLMap_21 main ] stop
						 */
						// Start of branch "binary1"
						if (binary1 != null) {

							/**
							 * [tFlowToIterate_16 main ] start
							 */

							currentComponent = "tFlowToIterate_16";

							globalMap.put("binary1.Authorization",
									binary1.Authorization);

							globalMap.put("binary1.userfile", binary1.userfile);

							globalMap.put("binary1.file_id", binary1.file_id);

							globalMap.put("binary1.grant_system",
									binary1.grant_system);

							nb_line_tFlowToIterate_16++;
							counter_tFlowToIterate_16++;
							globalMap.put(
									"tFlowToIterate_16_CURRENT_ITERATION",
									counter_tFlowToIterate_16);

							tos_count_tFlowToIterate_16++;

							/**
							 * [tFlowToIterate_16 main ] stop
							 */

						} // End of branch "binary1"

					} // End of branch "binary"

					/**
					 * [tRESTRequest_1_In end ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					ok_Hash.put("tRESTRequest_1_In", true);
					end_Hash.put("tRESTRequest_1_In",
							System.currentTimeMillis());

					/**
					 * [tRESTRequest_1_In end ] stop
					 */

					/**
					 * [tXMLMap_2_TXMLMAP_OUT end ] start
					 */

					currentVirtualComponent = "tXMLMap_2";

					currentComponent = "tXMLMap_2_TXMLMAP_OUT";

					ok_Hash.put("tXMLMap_2_TXMLMAP_OUT", true);
					end_Hash.put("tXMLMap_2_TXMLMAP_OUT",
							System.currentTimeMillis());

					/**
					 * [tXMLMap_2_TXMLMAP_OUT end ] stop
					 */

					/**
					 * [tFlowToIterate_1 begin ] start
					 */

					ok_Hash.put("tFlowToIterate_1", false);
					start_Hash.put("tFlowToIterate_1",
							System.currentTimeMillis());

					currentComponent = "tFlowToIterate_1";

					int tos_count_tFlowToIterate_1 = 0;

					class BytesLimit65535_tFlowToIterate_1 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tFlowToIterate_1().limitLog4jByte();

					int nb_line_tFlowToIterate_1 = 0;
					int counter_tFlowToIterate_1 = 0;

					/**
					 * [tFlowToIterate_1 begin ] stop
					 */

					/**
					 * [tXMLMap_2_TXMLMAP_IN begin ] start
					 */

					ok_Hash.put("tXMLMap_2_TXMLMAP_IN", false);
					start_Hash.put("tXMLMap_2_TXMLMAP_IN",
							System.currentTimeMillis());

					currentVirtualComponent = "tXMLMap_2";

					currentComponent = "tXMLMap_2_TXMLMAP_IN";

					int tos_count_tXMLMap_2_TXMLMAP_IN = 0;

					class BytesLimit65535_tXMLMap_2_TXMLMAP_IN {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tXMLMap_2_TXMLMAP_IN().limitLog4jByte();
					java.util.List<Object> outs_tXMLMap_2 = (java.util.List<Object>) globalMap
							.get("allOutsForAggregate_tXMLMap_2");
					for (Object row_out_tXMLMap_2_TXMLMAP_IN : outs_tXMLMap_2) {// TD512

						/**
						 * [tXMLMap_2_TXMLMAP_IN begin ] stop
						 */

						/**
						 * [tXMLMap_2_TXMLMAP_IN main ] start
						 */

						currentVirtualComponent = "tXMLMap_2";

						currentComponent = "tXMLMap_2_TXMLMAP_IN";

						upload1 = null;
						if (row_out_tXMLMap_2_TXMLMAP_IN != null
								&& row_out_tXMLMap_2_TXMLMAP_IN instanceof upload1Struct) {
							upload1 = (upload1Struct) row_out_tXMLMap_2_TXMLMAP_IN;
						}

						tos_count_tXMLMap_2_TXMLMAP_IN++;

						/**
						 * [tXMLMap_2_TXMLMAP_IN main ] stop
						 */
						// Start of branch "upload1"
						if (upload1 != null) {

							/**
							 * [tFlowToIterate_1 main ] start
							 */

							currentComponent = "tFlowToIterate_1";

							globalMap.put("upload1.Authorization",
									upload1.Authorization);

							globalMap.put("upload1.original_uri",
									upload1.original_uri);

							globalMap.put("upload1.auth_string",
									upload1.auth_string);

							globalMap.put("upload1.grant_system",
									upload1.grant_system);

							globalMap.put("upload1.file_id", upload1.file_id);

							nb_line_tFlowToIterate_1++;
							counter_tFlowToIterate_1++;
							globalMap.put("tFlowToIterate_1_CURRENT_ITERATION",
									counter_tFlowToIterate_1);

							tos_count_tFlowToIterate_1++;

							/**
							 * [tFlowToIterate_1 main ] stop
							 */

						} // End of branch "upload1"

						/**
						 * [tXMLMap_2_TXMLMAP_IN end ] start
						 */

						currentVirtualComponent = "tXMLMap_2";

						currentComponent = "tXMLMap_2_TXMLMAP_IN";

					}// TD512

					ok_Hash.put("tXMLMap_2_TXMLMAP_IN", true);
					end_Hash.put("tXMLMap_2_TXMLMAP_IN",
							System.currentTimeMillis());

					/**
					 * [tXMLMap_2_TXMLMAP_IN end ] stop
					 */

					/**
					 * [tFlowToIterate_1 end ] start
					 */

					currentComponent = "tFlowToIterate_1";

					globalMap.put("tFlowToIterate_1_NB_LINE",
							nb_line_tFlowToIterate_1);

					ok_Hash.put("tFlowToIterate_1", true);
					end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

					if (((Integer) globalMap.get("tFlowToIterate_1_NB_LINE")) > 0) {

						tRunJob_4Process(globalMap);
					}

					/**
					 * [tFlowToIterate_1 end ] stop
					 */

					/**
					 * [tXMLMap_3 end ] start
					 */

					currentComponent = "tXMLMap_3";

					ok_Hash.put("tXMLMap_3", true);
					end_Hash.put("tXMLMap_3", System.currentTimeMillis());

					/**
					 * [tXMLMap_3 end ] stop
					 */

					/**
					 * [tFlowToIterate_2 end ] start
					 */

					currentComponent = "tFlowToIterate_2";

					globalMap.put("tFlowToIterate_2_NB_LINE",
							nb_line_tFlowToIterate_2);

					ok_Hash.put("tFlowToIterate_2", true);
					end_Hash.put("tFlowToIterate_2", System.currentTimeMillis());

					if (((Integer) globalMap.get("tFlowToIterate_2_NB_LINE")) > 0) {

						tRunJob_2Process(globalMap);
					}

					/**
					 * [tFlowToIterate_2 end ] stop
					 */

					/**
					 * [tXMLMap_4 end ] start
					 */

					currentComponent = "tXMLMap_4";

					ok_Hash.put("tXMLMap_4", true);
					end_Hash.put("tXMLMap_4", System.currentTimeMillis());

					/**
					 * [tXMLMap_4 end ] stop
					 */

					/**
					 * [tFlowToIterate_3 end ] start
					 */

					currentComponent = "tFlowToIterate_3";

					globalMap.put("tFlowToIterate_3_NB_LINE",
							nb_line_tFlowToIterate_3);

					ok_Hash.put("tFlowToIterate_3", true);
					end_Hash.put("tFlowToIterate_3", System.currentTimeMillis());

					if (((Integer) globalMap.get("tFlowToIterate_3_NB_LINE")) > 0) {

						tRunJob_3Process(globalMap);
					}

					/**
					 * [tFlowToIterate_3 end ] stop
					 */

					/**
					 * [tXMLMap_1 end ] start
					 */

					currentComponent = "tXMLMap_1";

					ok_Hash.put("tXMLMap_1", true);
					end_Hash.put("tXMLMap_1", System.currentTimeMillis());

					/**
					 * [tXMLMap_1 end ] stop
					 */

					/**
					 * [tRESTResponse_1 end ] start
					 */

					currentComponent = "tRESTResponse_1";

					ok_Hash.put("tRESTResponse_1", true);
					end_Hash.put("tRESTResponse_1", System.currentTimeMillis());

					/**
					 * [tRESTResponse_1 end ] stop
					 */

					/**
					 * [tXMLMap_16 end ] start
					 */

					currentComponent = "tXMLMap_16";

					ok_Hash.put("tXMLMap_16", true);
					end_Hash.put("tXMLMap_16", System.currentTimeMillis());

					/**
					 * [tXMLMap_16 end ] stop
					 */

					/**
					 * [tFlowToIterate_11 end ] start
					 */

					currentComponent = "tFlowToIterate_11";

					globalMap.put("tFlowToIterate_11_NB_LINE",
							nb_line_tFlowToIterate_11);

					ok_Hash.put("tFlowToIterate_11", true);
					end_Hash.put("tFlowToIterate_11",
							System.currentTimeMillis());

					if (((Integer) globalMap.get("tFlowToIterate_11_NB_LINE")) > 0) {

						tRunJob_5Process(globalMap);
					}

					/**
					 * [tFlowToIterate_11 end ] stop
					 */

					/**
					 * [tXMLMap_21 end ] start
					 */

					currentComponent = "tXMLMap_21";

					ok_Hash.put("tXMLMap_21", true);
					end_Hash.put("tXMLMap_21", System.currentTimeMillis());

					/**
					 * [tXMLMap_21 end ] stop
					 */

					/**
					 * [tFlowToIterate_16 end ] start
					 */

					currentComponent = "tFlowToIterate_16";

					globalMap.put("tFlowToIterate_16_NB_LINE",
							nb_line_tFlowToIterate_16);

					ok_Hash.put("tFlowToIterate_16", true);
					end_Hash.put("tFlowToIterate_16",
							System.currentTimeMillis());

					if (((Integer) globalMap.get("tFlowToIterate_16_NB_LINE")) > 0) {

						tRunJob_6Process(globalMap);
					}

					/**
					 * [tFlowToIterate_16 end ] stop
					 */

					/**
					 * [tRESTRequest_1_Loop end ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_Loop";

				} catch (Throwable e_tRESTRequest_1) {
					if (e_tRESTRequest_1 instanceof Exception) {
						new TalendException((Exception) e_tRESTRequest_1,
								currentComponent, globalMap).printStackTrace();
					} else {
						new TalendException(new RuntimeException(
								e_tRESTRequest_1), currentComponent, globalMap)
								.printStackTrace();
					}
					if (!globalMap.containsKey("restResponse")) {
						java.util.Map<String, Object> restFault_tRESTRequest_1 = new java.util.HashMap<String, Object>();
						restFault_tRESTRequest_1.put("STATUS", 500);
						restFault_tRESTRequest_1.put("BODY",
								e_tRESTRequest_1.getMessage());
						globalMap.put("restResponse", restFault_tRESTRequest_1);
					}
					return;
				}
				nb_line_tRESTRequest_1++;
				globalMap.put("tRESTRequest_1_NB_LINE", nb_line_tRESTRequest_1);

				ok_Hash.put("tRESTRequest_1_Loop", true);
				end_Hash.put("tRESTRequest_1_Loop", System.currentTimeMillis());

				/**
				 * [tRESTRequest_1_Loop end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRESTRequest_1_Loop finally ] start
				 */

				currentVirtualComponent = "tRESTRequest_1";

				currentComponent = "tRESTRequest_1_Loop";

				/**
				 * [tRESTRequest_1_Loop finally ] stop
				 */

				/**
				 * [tRESTRequest_1_In finally ] start
				 */

				currentVirtualComponent = "tRESTRequest_1";

				currentComponent = "tRESTRequest_1_In";

				/**
				 * [tRESTRequest_1_In finally ] stop
				 */

				/**
				 * [tXMLMap_2_TXMLMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tXMLMap_2";

				currentComponent = "tXMLMap_2_TXMLMAP_OUT";

				/**
				 * [tXMLMap_2_TXMLMAP_OUT finally ] stop
				 */

				/**
				 * [tXMLMap_2_TXMLMAP_IN finally ] start
				 */

				currentVirtualComponent = "tXMLMap_2";

				currentComponent = "tXMLMap_2_TXMLMAP_IN";

				/**
				 * [tXMLMap_2_TXMLMAP_IN finally ] stop
				 */

				/**
				 * [tFlowToIterate_1 finally ] start
				 */

				currentComponent = "tFlowToIterate_1";

				/**
				 * [tFlowToIterate_1 finally ] stop
				 */

				/**
				 * [tXMLMap_3 finally ] start
				 */

				currentComponent = "tXMLMap_3";

				/**
				 * [tXMLMap_3 finally ] stop
				 */

				/**
				 * [tFlowToIterate_2 finally ] start
				 */

				currentComponent = "tFlowToIterate_2";

				/**
				 * [tFlowToIterate_2 finally ] stop
				 */

				/**
				 * [tXMLMap_4 finally ] start
				 */

				currentComponent = "tXMLMap_4";

				/**
				 * [tXMLMap_4 finally ] stop
				 */

				/**
				 * [tFlowToIterate_3 finally ] start
				 */

				currentComponent = "tFlowToIterate_3";

				/**
				 * [tFlowToIterate_3 finally ] stop
				 */

				/**
				 * [tXMLMap_1 finally ] start
				 */

				currentComponent = "tXMLMap_1";

				/**
				 * [tXMLMap_1 finally ] stop
				 */

				/**
				 * [tRESTResponse_1 finally ] start
				 */

				currentComponent = "tRESTResponse_1";

				/**
				 * [tRESTResponse_1 finally ] stop
				 */

				/**
				 * [tXMLMap_16 finally ] start
				 */

				currentComponent = "tXMLMap_16";

				/**
				 * [tXMLMap_16 finally ] stop
				 */

				/**
				 * [tFlowToIterate_11 finally ] start
				 */

				currentComponent = "tFlowToIterate_11";

				/**
				 * [tFlowToIterate_11 finally ] stop
				 */

				/**
				 * [tXMLMap_21 finally ] start
				 */

				currentComponent = "tXMLMap_21";

				/**
				 * [tXMLMap_21 finally ] stop
				 */

				/**
				 * [tFlowToIterate_16 finally ] start
				 */

				currentComponent = "tFlowToIterate_16";

				/**
				 * [tFlowToIterate_16 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final esb_file_srv esb_file_srvClass = new esb_file_srv();

		int exitCode = esb_file_srvClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = esb_file_srv.class.getClassLoader()
					.getResourceAsStream(
							"esb_mfs_srv/esb_file_srv_0_2/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.mq_host = (String) context.getProperty("mq_host");
			context.mq_host_c1 = (String) context.getProperty("mq_host_c1");
			context.mq_host_c2 = (String) context.getProperty("mq_host_c2");
			context.mq_host_c3 = (String) context.getProperty("mq_host_c3");
			context.mq_password = (String) context.getProperty("mq_password");
			context.mq_port = (String) context.getProperty("mq_port");
			context.mq_port_c1 = (String) context.getProperty("mq_port_c1");
			context.mq_port_c2 = (String) context.getProperty("mq_port_c2");
			context.mq_port_c3 = (String) context.getProperty("mq_port_c3");
			context.mq_queuename = (String) context.getProperty("mq_queuename");
			context.mq_username = (String) context.getProperty("mq_username");
			context.mq_virtualhost = (String) context
					.getProperty("mq_virtualhost");
			try {
				context.retrySAPConn = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("retrySAPConn"));
			} catch (NumberFormatException e) {
				context.retrySAPConn = null;
			}
			context.APPNAME_PREFIX = (String) context
					.getProperty("APPNAME_PREFIX");
			context.DRIVER_CLASS = (String) context.getProperty("DRIVER_CLASS");
			context.JDBC_JAR = (String) context.getProperty("JDBC_JAR");
			context.JDBC_URL = (String) context.getProperty("JDBC_URL");
			context.LOG_TABLE = (String) context.getProperty("LOG_TABLE");
			try {
				context.MAX_CONNECTION = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("MAX_CONNECTION"));
			} catch (NumberFormatException e) {
				context.MAX_CONNECTION = null;
			}
			context.MID_NO = (String) context.getProperty("MID_NO");
			context.PASSWORD = (String) context.getProperty("PASSWORD");
			try {
				context.RANDOM_CONN = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("RANDOM_CONN"));
			} catch (NumberFormatException e) {
				context.RANDOM_CONN = null;
			}
			context.USERNAME = (String) context.getProperty("USERNAME");
			context.mount_folder = (String) context.getProperty("mount_folder");
			try {
				context.debugging = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("debugging"));
			} catch (NumberFormatException e) {
				context.debugging = null;
			}
			context.mapping_table_name = (String) context
					.getProperty("mapping_table_name");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("mq_host")) {
				context.mq_host = (String) parentContextMap.get("mq_host");
			}
			if (parentContextMap.containsKey("mq_host_c1")) {
				context.mq_host_c1 = (String) parentContextMap
						.get("mq_host_c1");
			}
			if (parentContextMap.containsKey("mq_host_c2")) {
				context.mq_host_c2 = (String) parentContextMap
						.get("mq_host_c2");
			}
			if (parentContextMap.containsKey("mq_host_c3")) {
				context.mq_host_c3 = (String) parentContextMap
						.get("mq_host_c3");
			}
			if (parentContextMap.containsKey("mq_password")) {
				context.mq_password = (String) parentContextMap
						.get("mq_password");
			}
			if (parentContextMap.containsKey("mq_port")) {
				context.mq_port = (String) parentContextMap.get("mq_port");
			}
			if (parentContextMap.containsKey("mq_port_c1")) {
				context.mq_port_c1 = (String) parentContextMap
						.get("mq_port_c1");
			}
			if (parentContextMap.containsKey("mq_port_c2")) {
				context.mq_port_c2 = (String) parentContextMap
						.get("mq_port_c2");
			}
			if (parentContextMap.containsKey("mq_port_c3")) {
				context.mq_port_c3 = (String) parentContextMap
						.get("mq_port_c3");
			}
			if (parentContextMap.containsKey("mq_queuename")) {
				context.mq_queuename = (String) parentContextMap
						.get("mq_queuename");
			}
			if (parentContextMap.containsKey("mq_username")) {
				context.mq_username = (String) parentContextMap
						.get("mq_username");
			}
			if (parentContextMap.containsKey("mq_virtualhost")) {
				context.mq_virtualhost = (String) parentContextMap
						.get("mq_virtualhost");
			}
			if (parentContextMap.containsKey("retrySAPConn")) {
				context.retrySAPConn = (Integer) parentContextMap
						.get("retrySAPConn");
			}
			if (parentContextMap.containsKey("APPNAME_PREFIX")) {
				context.APPNAME_PREFIX = (String) parentContextMap
						.get("APPNAME_PREFIX");
			}
			if (parentContextMap.containsKey("DRIVER_CLASS")) {
				context.DRIVER_CLASS = (String) parentContextMap
						.get("DRIVER_CLASS");
			}
			if (parentContextMap.containsKey("JDBC_JAR")) {
				context.JDBC_JAR = (String) parentContextMap.get("JDBC_JAR");
			}
			if (parentContextMap.containsKey("JDBC_URL")) {
				context.JDBC_URL = (String) parentContextMap.get("JDBC_URL");
			}
			if (parentContextMap.containsKey("LOG_TABLE")) {
				context.LOG_TABLE = (String) parentContextMap.get("LOG_TABLE");
			}
			if (parentContextMap.containsKey("MAX_CONNECTION")) {
				context.MAX_CONNECTION = (Integer) parentContextMap
						.get("MAX_CONNECTION");
			}
			if (parentContextMap.containsKey("MID_NO")) {
				context.MID_NO = (String) parentContextMap.get("MID_NO");
			}
			if (parentContextMap.containsKey("PASSWORD")) {
				context.PASSWORD = (String) parentContextMap.get("PASSWORD");
			}
			if (parentContextMap.containsKey("RANDOM_CONN")) {
				context.RANDOM_CONN = (Integer) parentContextMap
						.get("RANDOM_CONN");
			}
			if (parentContextMap.containsKey("USERNAME")) {
				context.USERNAME = (String) parentContextMap.get("USERNAME");
			}
			if (parentContextMap.containsKey("mount_folder")) {
				context.mount_folder = (String) parentContextMap
						.get("mount_folder");
			}
			if (parentContextMap.containsKey("debugging")) {
				context.debugging = (Boolean) parentContextMap.get("debugging");
			}
			if (parentContextMap.containsKey("mapping_table_name")) {
				context.mapping_table_name = (String) parentContextMap
						.get("mapping_table_name");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tRESTRequest_1_LoopProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRESTRequest_1_Loop) {
			globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", -1);

			e_tRESTRequest_1_Loop.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : esb_file_srv");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tJDBCConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tJDBCConnection_2");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tJDBCConnection_3");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tJDBCConnection_4");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tJDBCConnection_5");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tJDBCConnection_1",
				globalMap.get("conn_tJDBCConnection_1"));
		connections.put("conn_tJDBCConnection_2",
				globalMap.get("conn_tJDBCConnection_2"));
		connections.put("conn_tJDBCConnection_3",
				globalMap.get("conn_tJDBCConnection_3"));
		connections.put("conn_tJDBCConnection_4",
				globalMap.get("conn_tJDBCConnection_4"));
		connections.put("conn_tJDBCConnection_5",
				globalMap.get("conn_tJDBCConnection_5"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 1011273 characters generated by Talend Open Studio for ESB on the February
 * 21, 2024 3:19:44 PM CST
 ************************************************************************************************/

